V1.0.2,1.0.0,1.0.2,'Suite .eachTest(fn) when there are no nested suites or tests should return 0'
V1.0.2,1.0.0,1.0.2,'Suite .eachTest(fn) when there are several tests in the suite should return the number'
V1.0.2,1.0.0,1.0.2,'Suite .eachTest(fn) when there are several levels of nested suites should return the number'
V1.0.2,1.0.0,1.0.2,'Runner .grep() should update the runner.total with number of matched tests'
V1.0.2,1.0.0,1.0.2,'Runner .grepTotal() should return the total number of matched tests'
V1.0.2,1.0.1,1.0.2,'Suite .eachTest(fn) when there are no nested suites or tests should return 0'
V1.0.2,1.0.1,1.0.2,'Suite .eachTest(fn) when there are several tests in the suite should return the number'
V1.0.2,1.0.1,1.0.2,'Suite .eachTest(fn) when there are several levels of nested suites should return the number'
V1.0.2,1.0.1,1.0.2,'Runner .grep() should update the runner.total with number of matched tests'
V1.0.2,1.0.1,1.0.2,'Runner .grepTotal() should return the total number of matched tests'
V1.0.3,1.0.0,1.0.3,'Suite .eachTest(fn) when there are no nested suites or tests should return 0'
V1.0.3,1.0.0,1.0.3,'Suite .eachTest(fn) when there are several tests in the suite should return the number'
V1.0.3,1.0.0,1.0.3,'Suite .eachTest(fn) when there are several levels of nested suites should return the number'
V1.0.3,1.0.0,1.0.3,'Runner .grep() should update the runner.total with number of matched tests'
V1.0.3,1.0.0,1.0.3,'Runner .grepTotal() should return the total number of matched tests'
V1.0.3,1.0.1,1.0.3,'Suite .eachTest(fn) when there are no nested suites or tests should return 0'
V1.0.3,1.0.1,1.0.3,'Suite .eachTest(fn) when there are several tests in the suite should return the number'
V1.0.3,1.0.1,1.0.3,'Suite .eachTest(fn) when there are several levels of nested suites should return the number'
V1.0.3,1.0.1,1.0.3,'Runner .grep() should update the runner.total with number of matched tests'
V1.0.3,1.0.1,1.0.3,'Runner .grepTotal() should return the total number of matched tests'
V1.1.0,1.0.0,1.1.0,'Suite .eachTest(fn) when there are no nested suites or tests should return 0'
V1.1.0,1.0.0,1.1.0,'Suite .eachTest(fn) when there are several tests in the suite should return the number'
V1.1.0,1.0.0,1.1.0,'Suite .eachTest(fn) when there are several levels of nested suites should return the number'
V1.1.0,1.0.0,1.1.0,'Runner .grep() should update the runner.total with number of matched tests'
V1.1.0,1.0.0,1.1.0,'Runner .grepTotal() should return the total number of matched tests'
V1.1.0,1.0.0,1.1.0,'Runnable(title, fn) .run(fn) when .pending should not invoke the callback'
V1.1.0,1.0.0,1.1.0,'Runnable(title, fn) .run(fn) when sync without error should invoke the callback'
V1.1.0,1.0.0,1.1.0,'Runnable(title, fn) .run(fn) when sync when an exception is thrown should invoke the callback'
V1.1.0,1.0.0,1.1.0,'Runnable(title, fn) .run(fn) when async without error should invoke the callback'
V1.1.0,1.0.0,1.1.0,'Runnable(title, fn) .run(fn) when async when the callback is invoked several times without an error should emit a single "error" event'
V1.1.0,1.0.0,1.1.0,'Runnable(title, fn) .run(fn) when async when the callback is invoked several times with an error should emit a single "error" event'
V1.1.0,1.0.0,1.1.0,'Runnable(title, fn) .run(fn) when async when an exception is thrown should invoke the callback'
V1.1.0,1.0.0,1.1.0,'Runnable(title, fn) .run(fn) when async when an error is passed should invoke the callback'
V1.1.0,1.0.1,1.1.0,'Suite .eachTest(fn) when there are no nested suites or tests should return 0'
V1.1.0,1.0.1,1.1.0,'Suite .eachTest(fn) when there are several tests in the suite should return the number'
V1.1.0,1.0.1,1.1.0,'Suite .eachTest(fn) when there are several levels of nested suites should return the number'
V1.1.0,1.0.1,1.1.0,'Runner .grep() should update the runner.total with number of matched tests'
V1.1.0,1.0.1,1.1.0,'Runner .grepTotal() should return the total number of matched tests'
V1.1.0,1.0.1,1.1.0,'Runnable(title, fn) .run(fn) when .pending should not invoke the callback'
V1.1.0,1.0.1,1.1.0,'Runnable(title, fn) .run(fn) when sync without error should invoke the callback'
V1.1.0,1.0.1,1.1.0,'Runnable(title, fn) .run(fn) when sync when an exception is thrown should invoke the callback'
V1.1.0,1.0.1,1.1.0,'Runnable(title, fn) .run(fn) when async without error should invoke the callback'
V1.1.0,1.0.1,1.1.0,'Runnable(title, fn) .run(fn) when async when the callback is invoked several times without an error should emit a single "error" event'
V1.1.0,1.0.1,1.1.0,'Runnable(title, fn) .run(fn) when async when the callback is invoked several times with an error should emit a single "error" event'
V1.1.0,1.0.1,1.1.0,'Runnable(title, fn) .run(fn) when async when an exception is thrown should invoke the callback'
V1.1.0,1.0.1,1.1.0,'Runnable(title, fn) .run(fn) when async when an error is passed should invoke the callback'
V1.1.0,1.0.2,1.1.0,'Runnable(title, fn) .run(fn) when .pending should not invoke the callback'
V1.1.0,1.0.2,1.1.0,'Runnable(title, fn) .run(fn) when sync without error should invoke the callback'
V1.1.0,1.0.2,1.1.0,'Runnable(title, fn) .run(fn) when sync when an exception is thrown should invoke the callback'
V1.1.0,1.0.2,1.1.0,'Runnable(title, fn) .run(fn) when async without error should invoke the callback'
V1.1.0,1.0.2,1.1.0,'Runnable(title, fn) .run(fn) when async when the callback is invoked several times without an error should emit a single "error" event'
V1.1.0,1.0.2,1.1.0,'Runnable(title, fn) .run(fn) when async when the callback is invoked several times with an error should emit a single "error" event'
V1.1.0,1.0.2,1.1.0,'Runnable(title, fn) .run(fn) when async when an exception is thrown should invoke the callback'
V1.1.0,1.0.2,1.1.0,'Runnable(title, fn) .run(fn) when async when an error is passed should invoke the callback'
V1.1.0,1.0.3,1.1.0,'Runnable(title, fn) .run(fn) when .pending should not invoke the callback'
V1.1.0,1.0.3,1.1.0,'Runnable(title, fn) .run(fn) when sync without error should invoke the callback'
V1.1.0,1.0.3,1.1.0,'Runnable(title, fn) .run(fn) when sync when an exception is thrown should invoke the callback'
V1.1.0,1.0.3,1.1.0,'Runnable(title, fn) .run(fn) when async without error should invoke the callback'
V1.1.0,1.0.3,1.1.0,'Runnable(title, fn) .run(fn) when async when the callback is invoked several times without an error should emit a single "error" event'
V1.1.0,1.0.3,1.1.0,'Runnable(title, fn) .run(fn) when async when the callback is invoked several times with an error should emit a single "error" event'
V1.1.0,1.0.3,1.1.0,'Runnable(title, fn) .run(fn) when async when an exception is thrown should invoke the callback'
V1.1.0,1.0.3,1.1.0,'Runnable(title, fn) .run(fn) when async when an error is passed should invoke the callback'
V1.2.0,1.0.0,1.2.0,'Suite .eachTest(fn) when there are no nested suites or tests should return 0'
V1.2.0,1.0.0,1.2.0,'Suite .eachTest(fn) when there are several tests in the suite should return the number'
V1.2.0,1.0.0,1.2.0,'Suite .eachTest(fn) when there are several levels of nested suites should return the number'
V1.2.0,1.0.0,1.2.0,'Runner .grep() should update the runner.total with number of matched tests'
V1.2.0,1.0.0,1.2.0,'Runner .grepTotal() should return the total number of matched tests'
V1.2.0,1.0.0,1.2.0,'Runner .checkGlobals(test) should allow variables that match a wildcard'
V1.2.0,1.0.0,1.2.0,'Runner .checkGlobals(test) should allow variables that match a wildcard'
V1.2.0,1.0.0,1.2.0,'Runner .checkGlobals(test) should emit "fail" when a new global is introduced'
V1.2.0,1.0.0,1.2.0,'Runner .checkGlobals(test) should pluralize the error message when several are introduced'
V1.2.0,1.0.0,1.2.0,'Runner .checkGlobals(test) should pluralize the error message when several are introduced'
V1.2.0,1.0.0,1.2.0,'Runnable(title, fn) .run(fn) when .pending should not invoke the callback'
V1.2.0,1.0.0,1.2.0,'Runnable(title, fn) .run(fn) when sync without error should invoke the callback'
V1.2.0,1.0.0,1.2.0,'Runnable(title, fn) .run(fn) when sync when an exception is thrown should invoke the callback'
V1.2.0,1.0.0,1.2.0,'Runnable(title, fn) .run(fn) when async without error should invoke the callback'
V1.2.0,1.0.0,1.2.0,'Runnable(title, fn) .run(fn) when async when the callback is invoked several times without an error should emit a single "error" event'
V1.2.0,1.0.0,1.2.0,'Runnable(title, fn) .run(fn) when async when the callback is invoked several times with an error should emit a single "error" event'
V1.2.0,1.0.0,1.2.0,'Runnable(title, fn) .run(fn) when async when an exception is thrown should invoke the callback'
V1.2.0,1.0.0,1.2.0,'Runnable(title, fn) .run(fn) when async when an error is passed should invoke the callback'
V1.2.0,1.0.1,1.2.0,'Suite .eachTest(fn) when there are no nested suites or tests should return 0'
V1.2.0,1.0.1,1.2.0,'Suite .eachTest(fn) when there are several tests in the suite should return the number'
V1.2.0,1.0.1,1.2.0,'Suite .eachTest(fn) when there are several levels of nested suites should return the number'
V1.2.0,1.0.1,1.2.0,'Runner .grep() should update the runner.total with number of matched tests'
V1.2.0,1.0.1,1.2.0,'Runner .grepTotal() should return the total number of matched tests'
V1.2.0,1.0.1,1.2.0,'Runner .checkGlobals(test) should allow variables that match a wildcard'
V1.2.0,1.0.1,1.2.0,'Runner .checkGlobals(test) should allow variables that match a wildcard'
V1.2.0,1.0.1,1.2.0,'Runner .checkGlobals(test) should emit "fail" when a new global is introduced'
V1.2.0,1.0.1,1.2.0,'Runner .checkGlobals(test) should pluralize the error message when several are introduced'
V1.2.0,1.0.1,1.2.0,'Runner .checkGlobals(test) should pluralize the error message when several are introduced'
V1.2.0,1.0.1,1.2.0,'Runnable(title, fn) .run(fn) when .pending should not invoke the callback'
V1.2.0,1.0.1,1.2.0,'Runnable(title, fn) .run(fn) when sync without error should invoke the callback'
V1.2.0,1.0.1,1.2.0,'Runnable(title, fn) .run(fn) when sync when an exception is thrown should invoke the callback'
V1.2.0,1.0.1,1.2.0,'Runnable(title, fn) .run(fn) when async without error should invoke the callback'
V1.2.0,1.0.1,1.2.0,'Runnable(title, fn) .run(fn) when async when the callback is invoked several times without an error should emit a single "error" event'
V1.2.0,1.0.1,1.2.0,'Runnable(title, fn) .run(fn) when async when the callback is invoked several times with an error should emit a single "error" event'
V1.2.0,1.0.1,1.2.0,'Runnable(title, fn) .run(fn) when async when an exception is thrown should invoke the callback'
V1.2.0,1.0.1,1.2.0,'Runnable(title, fn) .run(fn) when async when an error is passed should invoke the callback'
V1.2.0,1.0.2,1.2.0,'Runner .checkGlobals(test) should allow variables that match a wildcard'
V1.2.0,1.0.2,1.2.0,'Runner .checkGlobals(test) should allow variables that match a wildcard'
V1.2.0,1.0.2,1.2.0,'Runner .checkGlobals(test) should emit "fail" when a new global is introduced'
V1.2.0,1.0.2,1.2.0,'Runner .checkGlobals(test) should pluralize the error message when several are introduced'
V1.2.0,1.0.2,1.2.0,'Runner .checkGlobals(test) should pluralize the error message when several are introduced'
V1.2.0,1.0.2,1.2.0,'Runnable(title, fn) .run(fn) when .pending should not invoke the callback'
V1.2.0,1.0.2,1.2.0,'Runnable(title, fn) .run(fn) when sync without error should invoke the callback'
V1.2.0,1.0.2,1.2.0,'Runnable(title, fn) .run(fn) when sync when an exception is thrown should invoke the callback'
V1.2.0,1.0.2,1.2.0,'Runnable(title, fn) .run(fn) when async without error should invoke the callback'
V1.2.0,1.0.2,1.2.0,'Runnable(title, fn) .run(fn) when async when the callback is invoked several times without an error should emit a single "error" event'
V1.2.0,1.0.2,1.2.0,'Runnable(title, fn) .run(fn) when async when the callback is invoked several times with an error should emit a single "error" event'
V1.2.0,1.0.2,1.2.0,'Runnable(title, fn) .run(fn) when async when an exception is thrown should invoke the callback'
V1.2.0,1.0.2,1.2.0,'Runnable(title, fn) .run(fn) when async when an error is passed should invoke the callback'
V1.2.0,1.0.3,1.2.0,'Runner .checkGlobals(test) should allow variables that match a wildcard'
V1.2.0,1.0.3,1.2.0,'Runner .checkGlobals(test) should allow variables that match a wildcard'
V1.2.0,1.0.3,1.2.0,'Runner .checkGlobals(test) should emit "fail" when a new global is introduced'
V1.2.0,1.0.3,1.2.0,'Runner .checkGlobals(test) should pluralize the error message when several are introduced'
V1.2.0,1.0.3,1.2.0,'Runner .checkGlobals(test) should pluralize the error message when several are introduced'
V1.2.0,1.0.3,1.2.0,'Runnable(title, fn) .run(fn) when .pending should not invoke the callback'
V1.2.0,1.0.3,1.2.0,'Runnable(title, fn) .run(fn) when sync without error should invoke the callback'
V1.2.0,1.0.3,1.2.0,'Runnable(title, fn) .run(fn) when sync when an exception is thrown should invoke the callback'
V1.2.0,1.0.3,1.2.0,'Runnable(title, fn) .run(fn) when async without error should invoke the callback'
V1.2.0,1.0.3,1.2.0,'Runnable(title, fn) .run(fn) when async when the callback is invoked several times without an error should emit a single "error" event'
V1.2.0,1.0.3,1.2.0,'Runnable(title, fn) .run(fn) when async when the callback is invoked several times with an error should emit a single "error" event'
V1.2.0,1.0.3,1.2.0,'Runnable(title, fn) .run(fn) when async when an exception is thrown should invoke the callback'
V1.2.0,1.0.3,1.2.0,'Runnable(title, fn) .run(fn) when async when an error is passed should invoke the callback'
V1.2.0,1.1.0,1.2.0,'Runner .checkGlobals(test) should allow variables that match a wildcard'
V1.2.0,1.1.0,1.2.0,'Runner .checkGlobals(test) should allow variables that match a wildcard'
V1.2.0,1.1.0,1.2.0,'Runner .checkGlobals(test) should emit "fail" when a new global is introduced'
V1.2.0,1.1.0,1.2.0,'Runner .checkGlobals(test) should pluralize the error message when several are introduced'
V1.2.0,1.1.0,1.2.0,'Runner .checkGlobals(test) should pluralize the error message when several are introduced'
V1.2.1,1.0.0,1.2.1,'Suite .eachTest(fn) when there are no nested suites or tests should return 0'
V1.2.1,1.0.0,1.2.1,'Suite .eachTest(fn) when there are several tests in the suite should return the number'
V1.2.1,1.0.0,1.2.1,'Suite .eachTest(fn) when there are several levels of nested suites should return the number'
V1.2.1,1.0.0,1.2.1,'Runner .grep() should update the runner.total with number of matched tests'
V1.2.1,1.0.0,1.2.1,'Runner .grepTotal() should return the total number of matched tests'
V1.2.1,1.0.0,1.2.1,'Runner .checkGlobals(test) should allow variables that match a wildcard'
V1.2.1,1.0.0,1.2.1,'Runner .checkGlobals(test) should allow variables that match a wildcard'
V1.2.1,1.0.0,1.2.1,'Runner .checkGlobals(test) should emit "fail" when a new global is introduced'
V1.2.1,1.0.0,1.2.1,'Runner .checkGlobals(test) should pluralize the error message when several are introduced'
V1.2.1,1.0.0,1.2.1,'Runner .checkGlobals(test) should pluralize the error message when several are introduced'
V1.2.1,1.0.0,1.2.1,'Runnable(title, fn) .run(fn) when .pending should not invoke the callback'
V1.2.1,1.0.0,1.2.1,'Runnable(title, fn) .run(fn) when sync without error should invoke the callback'
V1.2.1,1.0.0,1.2.1,'Runnable(title, fn) .run(fn) when sync when an exception is thrown should invoke the callback'
V1.2.1,1.0.0,1.2.1,'Runnable(title, fn) .run(fn) when async without error should invoke the callback'
V1.2.1,1.0.0,1.2.1,'Runnable(title, fn) .run(fn) when async when the callback is invoked several times without an error should emit a single "error" event'
V1.2.1,1.0.0,1.2.1,'Runnable(title, fn) .run(fn) when async when the callback is invoked several times with an error should emit a single "error" event'
V1.2.1,1.0.0,1.2.1,'Runnable(title, fn) .run(fn) when async when an exception is thrown should invoke the callback'
V1.2.1,1.0.0,1.2.1,'Runnable(title, fn) .run(fn) when async when an error is passed should invoke the callback'
V1.2.1,1.0.0,1.2.1,'global leaks should pass with wildcard'
V1.2.1,1.0.1,1.2.1,'Suite .eachTest(fn) when there are no nested suites or tests should return 0'
V1.2.1,1.0.1,1.2.1,'Suite .eachTest(fn) when there are several tests in the suite should return the number'
V1.2.1,1.0.1,1.2.1,'Suite .eachTest(fn) when there are several levels of nested suites should return the number'
V1.2.1,1.0.1,1.2.1,'Runner .grep() should update the runner.total with number of matched tests'
V1.2.1,1.0.1,1.2.1,'Runner .grepTotal() should return the total number of matched tests'
V1.2.1,1.0.1,1.2.1,'Runner .checkGlobals(test) should allow variables that match a wildcard'
V1.2.1,1.0.1,1.2.1,'Runner .checkGlobals(test) should allow variables that match a wildcard'
V1.2.1,1.0.1,1.2.1,'Runner .checkGlobals(test) should emit "fail" when a new global is introduced'
V1.2.1,1.0.1,1.2.1,'Runner .checkGlobals(test) should pluralize the error message when several are introduced'
V1.2.1,1.0.1,1.2.1,'Runner .checkGlobals(test) should pluralize the error message when several are introduced'
V1.2.1,1.0.1,1.2.1,'Runnable(title, fn) .run(fn) when .pending should not invoke the callback'
V1.2.1,1.0.1,1.2.1,'Runnable(title, fn) .run(fn) when sync without error should invoke the callback'
V1.2.1,1.0.1,1.2.1,'Runnable(title, fn) .run(fn) when sync when an exception is thrown should invoke the callback'
V1.2.1,1.0.1,1.2.1,'Runnable(title, fn) .run(fn) when async without error should invoke the callback'
V1.2.1,1.0.1,1.2.1,'Runnable(title, fn) .run(fn) when async when the callback is invoked several times without an error should emit a single "error" event'
V1.2.1,1.0.1,1.2.1,'Runnable(title, fn) .run(fn) when async when the callback is invoked several times with an error should emit a single "error" event'
V1.2.1,1.0.1,1.2.1,'Runnable(title, fn) .run(fn) when async when an exception is thrown should invoke the callback'
V1.2.1,1.0.1,1.2.1,'Runnable(title, fn) .run(fn) when async when an error is passed should invoke the callback'
V1.2.1,1.0.1,1.2.1,'global leaks should pass with wildcard'
V1.2.1,1.0.2,1.2.1,'Runner .checkGlobals(test) should allow variables that match a wildcard'
V1.2.1,1.0.2,1.2.1,'Runner .checkGlobals(test) should allow variables that match a wildcard'
V1.2.1,1.0.2,1.2.1,'Runner .checkGlobals(test) should emit "fail" when a new global is introduced'
V1.2.1,1.0.2,1.2.1,'Runner .checkGlobals(test) should pluralize the error message when several are introduced'
V1.2.1,1.0.2,1.2.1,'Runner .checkGlobals(test) should pluralize the error message when several are introduced'
V1.2.1,1.0.2,1.2.1,'Runnable(title, fn) .run(fn) when .pending should not invoke the callback'
V1.2.1,1.0.2,1.2.1,'Runnable(title, fn) .run(fn) when sync without error should invoke the callback'
V1.2.1,1.0.2,1.2.1,'Runnable(title, fn) .run(fn) when sync when an exception is thrown should invoke the callback'
V1.2.1,1.0.2,1.2.1,'Runnable(title, fn) .run(fn) when async without error should invoke the callback'
V1.2.1,1.0.2,1.2.1,'Runnable(title, fn) .run(fn) when async when the callback is invoked several times without an error should emit a single "error" event'
V1.2.1,1.0.2,1.2.1,'Runnable(title, fn) .run(fn) when async when the callback is invoked several times with an error should emit a single "error" event'
V1.2.1,1.0.2,1.2.1,'Runnable(title, fn) .run(fn) when async when an exception is thrown should invoke the callback'
V1.2.1,1.0.2,1.2.1,'Runnable(title, fn) .run(fn) when async when an error is passed should invoke the callback'
V1.2.1,1.0.2,1.2.1,'global leaks should pass with wildcard'
V1.2.1,1.0.3,1.2.1,'Runner .checkGlobals(test) should allow variables that match a wildcard'
V1.2.1,1.0.3,1.2.1,'Runner .checkGlobals(test) should allow variables that match a wildcard'
V1.2.1,1.0.3,1.2.1,'Runner .checkGlobals(test) should emit "fail" when a new global is introduced'
V1.2.1,1.0.3,1.2.1,'Runner .checkGlobals(test) should pluralize the error message when several are introduced'
V1.2.1,1.0.3,1.2.1,'Runner .checkGlobals(test) should pluralize the error message when several are introduced'
V1.2.1,1.0.3,1.2.1,'Runnable(title, fn) .run(fn) when .pending should not invoke the callback'
V1.2.1,1.0.3,1.2.1,'Runnable(title, fn) .run(fn) when sync without error should invoke the callback'
V1.2.1,1.0.3,1.2.1,'Runnable(title, fn) .run(fn) when sync when an exception is thrown should invoke the callback'
V1.2.1,1.0.3,1.2.1,'Runnable(title, fn) .run(fn) when async without error should invoke the callback'
V1.2.1,1.0.3,1.2.1,'Runnable(title, fn) .run(fn) when async when the callback is invoked several times without an error should emit a single "error" event'
V1.2.1,1.0.3,1.2.1,'Runnable(title, fn) .run(fn) when async when the callback is invoked several times with an error should emit a single "error" event'
V1.2.1,1.0.3,1.2.1,'Runnable(title, fn) .run(fn) when async when an exception is thrown should invoke the callback'
V1.2.1,1.0.3,1.2.1,'Runnable(title, fn) .run(fn) when async when an error is passed should invoke the callback'
V1.2.1,1.0.3,1.2.1,'global leaks should pass with wildcard'
V1.2.1,1.1.0,1.2.1,'Runner .checkGlobals(test) should allow variables that match a wildcard'
V1.2.1,1.1.0,1.2.1,'Runner .checkGlobals(test) should allow variables that match a wildcard'
V1.2.1,1.1.0,1.2.1,'Runner .checkGlobals(test) should emit "fail" when a new global is introduced'
V1.2.1,1.1.0,1.2.1,'Runner .checkGlobals(test) should pluralize the error message when several are introduced'
V1.2.1,1.1.0,1.2.1,'Runner .checkGlobals(test) should pluralize the error message when several are introduced'
V1.2.1,1.1.0,1.2.1,'global leaks should pass with wildcard'
V1.2.2,1.0.0,1.2.2,'Suite .eachTest(fn) when there are no nested suites or tests should return 0'
V1.2.2,1.0.0,1.2.2,'Suite .eachTest(fn) when there are several tests in the suite should return the number'
V1.2.2,1.0.0,1.2.2,'Suite .eachTest(fn) when there are several levels of nested suites should return the number'
V1.2.2,1.0.0,1.2.2,'Runner .grep() should update the runner.total with number of matched tests'
V1.2.2,1.0.0,1.2.2,'Runner .grepTotal() should return the total number of matched tests'
V1.2.2,1.0.0,1.2.2,'Runner .checkGlobals(test) should allow variables that match a wildcard'
V1.2.2,1.0.0,1.2.2,'Runner .checkGlobals(test) should allow variables that match a wildcard'
V1.2.2,1.0.0,1.2.2,'Runner .checkGlobals(test) should emit "fail" when a new global is introduced'
V1.2.2,1.0.0,1.2.2,'Runner .checkGlobals(test) should pluralize the error message when several are introduced'
V1.2.2,1.0.0,1.2.2,'Runner .checkGlobals(test) should pluralize the error message when several are introduced'
V1.2.2,1.0.0,1.2.2,'Runnable(title, fn) .run(fn) when .pending should not invoke the callback'
V1.2.2,1.0.0,1.2.2,'Runnable(title, fn) .run(fn) when sync without error should invoke the callback'
V1.2.2,1.0.0,1.2.2,'Runnable(title, fn) .run(fn) when sync when an exception is thrown should invoke the callback'
V1.2.2,1.0.0,1.2.2,'Runnable(title, fn) .run(fn) when async without error should invoke the callback'
V1.2.2,1.0.0,1.2.2,'Runnable(title, fn) .run(fn) when async when the callback is invoked several times without an error should emit a single "error" event'
V1.2.2,1.0.0,1.2.2,'Runnable(title, fn) .run(fn) when async when the callback is invoked several times with an error should emit a single "error" event'
V1.2.2,1.0.0,1.2.2,'Runnable(title, fn) .run(fn) when async when an exception is thrown should invoke the callback'
V1.2.2,1.0.0,1.2.2,'Runnable(title, fn) .run(fn) when async when an error is passed should invoke the callback'
V1.2.2,1.0.0,1.2.2,'global leaks should pass with wildcard'
V1.2.2,1.0.1,1.2.2,'Suite .eachTest(fn) when there are no nested suites or tests should return 0'
V1.2.2,1.0.1,1.2.2,'Suite .eachTest(fn) when there are several tests in the suite should return the number'
V1.2.2,1.0.1,1.2.2,'Suite .eachTest(fn) when there are several levels of nested suites should return the number'
V1.2.2,1.0.1,1.2.2,'Runner .grep() should update the runner.total with number of matched tests'
V1.2.2,1.0.1,1.2.2,'Runner .grepTotal() should return the total number of matched tests'
V1.2.2,1.0.1,1.2.2,'Runner .checkGlobals(test) should allow variables that match a wildcard'
V1.2.2,1.0.1,1.2.2,'Runner .checkGlobals(test) should allow variables that match a wildcard'
V1.2.2,1.0.1,1.2.2,'Runner .checkGlobals(test) should emit "fail" when a new global is introduced'
V1.2.2,1.0.1,1.2.2,'Runner .checkGlobals(test) should pluralize the error message when several are introduced'
V1.2.2,1.0.1,1.2.2,'Runner .checkGlobals(test) should pluralize the error message when several are introduced'
V1.2.2,1.0.1,1.2.2,'Runnable(title, fn) .run(fn) when .pending should not invoke the callback'
V1.2.2,1.0.1,1.2.2,'Runnable(title, fn) .run(fn) when sync without error should invoke the callback'
V1.2.2,1.0.1,1.2.2,'Runnable(title, fn) .run(fn) when sync when an exception is thrown should invoke the callback'
V1.2.2,1.0.1,1.2.2,'Runnable(title, fn) .run(fn) when async without error should invoke the callback'
V1.2.2,1.0.1,1.2.2,'Runnable(title, fn) .run(fn) when async when the callback is invoked several times without an error should emit a single "error" event'
V1.2.2,1.0.1,1.2.2,'Runnable(title, fn) .run(fn) when async when the callback is invoked several times with an error should emit a single "error" event'
V1.2.2,1.0.1,1.2.2,'Runnable(title, fn) .run(fn) when async when an exception is thrown should invoke the callback'
V1.2.2,1.0.1,1.2.2,'Runnable(title, fn) .run(fn) when async when an error is passed should invoke the callback'
V1.2.2,1.0.1,1.2.2,'global leaks should pass with wildcard'
V1.2.2,1.0.2,1.2.2,'Runner .checkGlobals(test) should allow variables that match a wildcard'
V1.2.2,1.0.2,1.2.2,'Runner .checkGlobals(test) should allow variables that match a wildcard'
V1.2.2,1.0.2,1.2.2,'Runner .checkGlobals(test) should emit "fail" when a new global is introduced'
V1.2.2,1.0.2,1.2.2,'Runner .checkGlobals(test) should pluralize the error message when several are introduced'
V1.2.2,1.0.2,1.2.2,'Runner .checkGlobals(test) should pluralize the error message when several are introduced'
V1.2.2,1.0.2,1.2.2,'Runnable(title, fn) .run(fn) when .pending should not invoke the callback'
V1.2.2,1.0.2,1.2.2,'Runnable(title, fn) .run(fn) when sync without error should invoke the callback'
V1.2.2,1.0.2,1.2.2,'Runnable(title, fn) .run(fn) when sync when an exception is thrown should invoke the callback'
V1.2.2,1.0.2,1.2.2,'Runnable(title, fn) .run(fn) when async without error should invoke the callback'
V1.2.2,1.0.2,1.2.2,'Runnable(title, fn) .run(fn) when async when the callback is invoked several times without an error should emit a single "error" event'
V1.2.2,1.0.2,1.2.2,'Runnable(title, fn) .run(fn) when async when the callback is invoked several times with an error should emit a single "error" event'
V1.2.2,1.0.2,1.2.2,'Runnable(title, fn) .run(fn) when async when an exception is thrown should invoke the callback'
V1.2.2,1.0.2,1.2.2,'Runnable(title, fn) .run(fn) when async when an error is passed should invoke the callback'
V1.2.2,1.0.2,1.2.2,'global leaks should pass with wildcard'
V1.2.2,1.0.3,1.2.2,'Runner .checkGlobals(test) should allow variables that match a wildcard'
V1.2.2,1.0.3,1.2.2,'Runner .checkGlobals(test) should allow variables that match a wildcard'
V1.2.2,1.0.3,1.2.2,'Runner .checkGlobals(test) should emit "fail" when a new global is introduced'
V1.2.2,1.0.3,1.2.2,'Runner .checkGlobals(test) should pluralize the error message when several are introduced'
V1.2.2,1.0.3,1.2.2,'Runner .checkGlobals(test) should pluralize the error message when several are introduced'
V1.2.2,1.0.3,1.2.2,'Runnable(title, fn) .run(fn) when .pending should not invoke the callback'
V1.2.2,1.0.3,1.2.2,'Runnable(title, fn) .run(fn) when sync without error should invoke the callback'
V1.2.2,1.0.3,1.2.2,'Runnable(title, fn) .run(fn) when sync when an exception is thrown should invoke the callback'
V1.2.2,1.0.3,1.2.2,'Runnable(title, fn) .run(fn) when async without error should invoke the callback'
V1.2.2,1.0.3,1.2.2,'Runnable(title, fn) .run(fn) when async when the callback is invoked several times without an error should emit a single "error" event'
V1.2.2,1.0.3,1.2.2,'Runnable(title, fn) .run(fn) when async when the callback is invoked several times with an error should emit a single "error" event'
V1.2.2,1.0.3,1.2.2,'Runnable(title, fn) .run(fn) when async when an exception is thrown should invoke the callback'
V1.2.2,1.0.3,1.2.2,'Runnable(title, fn) .run(fn) when async when an error is passed should invoke the callback'
V1.2.2,1.0.3,1.2.2,'global leaks should pass with wildcard'
V1.2.2,1.1.0,1.2.2,'Runner .checkGlobals(test) should allow variables that match a wildcard'
V1.2.2,1.1.0,1.2.2,'Runner .checkGlobals(test) should allow variables that match a wildcard'
V1.2.2,1.1.0,1.2.2,'Runner .checkGlobals(test) should emit "fail" when a new global is introduced'
V1.2.2,1.1.0,1.2.2,'Runner .checkGlobals(test) should pluralize the error message when several are introduced'
V1.2.2,1.1.0,1.2.2,'Runner .checkGlobals(test) should pluralize the error message when several are introduced'
V1.2.2,1.1.0,1.2.2,'global leaks should pass with wildcard'
V1.3.0,1.0.0,1.3.0,'Suite .eachTest(fn) when there are no nested suites or tests should return 0'
V1.3.0,1.0.0,1.3.0,'Suite .eachTest(fn) when there are several tests in the suite should return the number'
V1.3.0,1.0.0,1.3.0,'Suite .eachTest(fn) when there are several levels of nested suites should return the number'
V1.3.0,1.0.0,1.3.0,'Runner .grep() should update the runner.total with number of matched tests'
V1.3.0,1.0.0,1.3.0,'Runner .grep() should update the runner.total with number of matched tests when inverted'
V1.3.0,1.0.0,1.3.0,'Runner .grepTotal() should return the total number of matched tests'
V1.3.0,1.0.0,1.3.0,'Runner .grepTotal() should return the total number of matched tests when inverted'
V1.3.0,1.0.0,1.3.0,'Runner .checkGlobals(test) should allow variables that match a wildcard'
V1.3.0,1.0.0,1.3.0,'Runner .checkGlobals(test) should allow variables that match a wildcard'
V1.3.0,1.0.0,1.3.0,'Runner .checkGlobals(test) should emit "fail" when a new global is introduced'
V1.3.0,1.0.0,1.3.0,'Runner .checkGlobals(test) should pluralize the error message when several are introduced'
V1.3.0,1.0.0,1.3.0,'Runner .checkGlobals(test) should pluralize the error message when several are introduced'
V1.3.0,1.0.0,1.3.0,'Runnable(title, fn) .run(fn) when .pending should not invoke the callback'
V1.3.0,1.0.0,1.3.0,'Runnable(title, fn) .run(fn) when sync without error should invoke the callback'
V1.3.0,1.0.0,1.3.0,'Runnable(title, fn) .run(fn) when sync when an exception is thrown should invoke the callback'
V1.3.0,1.0.0,1.3.0,'Runnable(title, fn) .run(fn) when async without error should invoke the callback'
V1.3.0,1.0.0,1.3.0,'Runnable(title, fn) .run(fn) when async when the callback is invoked several times without an error should emit a single "error" event'
V1.3.0,1.0.0,1.3.0,'Runnable(title, fn) .run(fn) when async when the callback is invoked several times with an error should emit a single "error" event'
V1.3.0,1.0.0,1.3.0,'Runnable(title, fn) .run(fn) when async when an exception is thrown should invoke the callback'
V1.3.0,1.0.0,1.3.0,'Runnable(title, fn) .run(fn) when async when an error is passed should invoke the callback'
V1.3.0,1.0.0,1.3.0,'global leaks should pass with wildcard'
V1.3.0,1.0.1,1.3.0,'Suite .eachTest(fn) when there are no nested suites or tests should return 0'
V1.3.0,1.0.1,1.3.0,'Suite .eachTest(fn) when there are several tests in the suite should return the number'
V1.3.0,1.0.1,1.3.0,'Suite .eachTest(fn) when there are several levels of nested suites should return the number'
V1.3.0,1.0.1,1.3.0,'Runner .grep() should update the runner.total with number of matched tests'
V1.3.0,1.0.1,1.3.0,'Runner .grep() should update the runner.total with number of matched tests when inverted'
V1.3.0,1.0.1,1.3.0,'Runner .grepTotal() should return the total number of matched tests'
V1.3.0,1.0.1,1.3.0,'Runner .grepTotal() should return the total number of matched tests when inverted'
V1.3.0,1.0.1,1.3.0,'Runner .checkGlobals(test) should allow variables that match a wildcard'
V1.3.0,1.0.1,1.3.0,'Runner .checkGlobals(test) should allow variables that match a wildcard'
V1.3.0,1.0.1,1.3.0,'Runner .checkGlobals(test) should emit "fail" when a new global is introduced'
V1.3.0,1.0.1,1.3.0,'Runner .checkGlobals(test) should pluralize the error message when several are introduced'
V1.3.0,1.0.1,1.3.0,'Runner .checkGlobals(test) should pluralize the error message when several are introduced'
V1.3.0,1.0.1,1.3.0,'Runnable(title, fn) .run(fn) when .pending should not invoke the callback'
V1.3.0,1.0.1,1.3.0,'Runnable(title, fn) .run(fn) when sync without error should invoke the callback'
V1.3.0,1.0.1,1.3.0,'Runnable(title, fn) .run(fn) when sync when an exception is thrown should invoke the callback'
V1.3.0,1.0.1,1.3.0,'Runnable(title, fn) .run(fn) when async without error should invoke the callback'
V1.3.0,1.0.1,1.3.0,'Runnable(title, fn) .run(fn) when async when the callback is invoked several times without an error should emit a single "error" event'
V1.3.0,1.0.1,1.3.0,'Runnable(title, fn) .run(fn) when async when the callback is invoked several times with an error should emit a single "error" event'
V1.3.0,1.0.1,1.3.0,'Runnable(title, fn) .run(fn) when async when an exception is thrown should invoke the callback'
V1.3.0,1.0.1,1.3.0,'Runnable(title, fn) .run(fn) when async when an error is passed should invoke the callback'
V1.3.0,1.0.1,1.3.0,'global leaks should pass with wildcard'
V1.3.0,1.0.2,1.3.0,'Runner .grep() should update the runner.total with number of matched tests when inverted'
V1.3.0,1.0.2,1.3.0,'Runner .grepTotal() should return the total number of matched tests when inverted'
V1.3.0,1.0.2,1.3.0,'Runner .checkGlobals(test) should allow variables that match a wildcard'
V1.3.0,1.0.2,1.3.0,'Runner .checkGlobals(test) should allow variables that match a wildcard'
V1.3.0,1.0.2,1.3.0,'Runner .checkGlobals(test) should emit "fail" when a new global is introduced'
V1.3.0,1.0.2,1.3.0,'Runner .checkGlobals(test) should pluralize the error message when several are introduced'
V1.3.0,1.0.2,1.3.0,'Runner .checkGlobals(test) should pluralize the error message when several are introduced'
V1.3.0,1.0.2,1.3.0,'Runnable(title, fn) .run(fn) when .pending should not invoke the callback'
V1.3.0,1.0.2,1.3.0,'Runnable(title, fn) .run(fn) when sync without error should invoke the callback'
V1.3.0,1.0.2,1.3.0,'Runnable(title, fn) .run(fn) when sync when an exception is thrown should invoke the callback'
V1.3.0,1.0.2,1.3.0,'Runnable(title, fn) .run(fn) when async without error should invoke the callback'
V1.3.0,1.0.2,1.3.0,'Runnable(title, fn) .run(fn) when async when the callback is invoked several times without an error should emit a single "error" event'
V1.3.0,1.0.2,1.3.0,'Runnable(title, fn) .run(fn) when async when the callback is invoked several times with an error should emit a single "error" event'
V1.3.0,1.0.2,1.3.0,'Runnable(title, fn) .run(fn) when async when an exception is thrown should invoke the callback'
V1.3.0,1.0.2,1.3.0,'Runnable(title, fn) .run(fn) when async when an error is passed should invoke the callback'
V1.3.0,1.0.2,1.3.0,'global leaks should pass with wildcard'
V1.3.0,1.0.3,1.3.0,'Runner .grep() should update the runner.total with number of matched tests when inverted'
V1.3.0,1.0.3,1.3.0,'Runner .grepTotal() should return the total number of matched tests when inverted'
V1.3.0,1.0.3,1.3.0,'Runner .checkGlobals(test) should allow variables that match a wildcard'
V1.3.0,1.0.3,1.3.0,'Runner .checkGlobals(test) should allow variables that match a wildcard'
V1.3.0,1.0.3,1.3.0,'Runner .checkGlobals(test) should emit "fail" when a new global is introduced'
V1.3.0,1.0.3,1.3.0,'Runner .checkGlobals(test) should pluralize the error message when several are introduced'
V1.3.0,1.0.3,1.3.0,'Runner .checkGlobals(test) should pluralize the error message when several are introduced'
V1.3.0,1.0.3,1.3.0,'Runnable(title, fn) .run(fn) when .pending should not invoke the callback'
V1.3.0,1.0.3,1.3.0,'Runnable(title, fn) .run(fn) when sync without error should invoke the callback'
V1.3.0,1.0.3,1.3.0,'Runnable(title, fn) .run(fn) when sync when an exception is thrown should invoke the callback'
V1.3.0,1.0.3,1.3.0,'Runnable(title, fn) .run(fn) when async without error should invoke the callback'
V1.3.0,1.0.3,1.3.0,'Runnable(title, fn) .run(fn) when async when the callback is invoked several times without an error should emit a single "error" event'
V1.3.0,1.0.3,1.3.0,'Runnable(title, fn) .run(fn) when async when the callback is invoked several times with an error should emit a single "error" event'
V1.3.0,1.0.3,1.3.0,'Runnable(title, fn) .run(fn) when async when an exception is thrown should invoke the callback'
V1.3.0,1.0.3,1.3.0,'Runnable(title, fn) .run(fn) when async when an error is passed should invoke the callback'
V1.3.0,1.0.3,1.3.0,'global leaks should pass with wildcard'
V1.3.0,1.1.0,1.3.0,'Runner .grep() should update the runner.total with number of matched tests when inverted'
V1.3.0,1.1.0,1.3.0,'Runner .grepTotal() should return the total number of matched tests when inverted'
V1.3.0,1.1.0,1.3.0,'Runner .checkGlobals(test) should allow variables that match a wildcard'
V1.3.0,1.1.0,1.3.0,'Runner .checkGlobals(test) should allow variables that match a wildcard'
V1.3.0,1.1.0,1.3.0,'Runner .checkGlobals(test) should emit "fail" when a new global is introduced'
V1.3.0,1.1.0,1.3.0,'Runner .checkGlobals(test) should pluralize the error message when several are introduced'
V1.3.0,1.1.0,1.3.0,'Runner .checkGlobals(test) should pluralize the error message when several are introduced'
V1.3.0,1.1.0,1.3.0,'Runnable(title, fn) .run(fn) when async when the callback is invoked several times with an error should emit a single "error" event'
V1.3.0,1.1.0,1.3.0,'global leaks should pass with wildcard'
V1.3.0,1.2.0,1.3.0,'Runner .grep() should update the runner.total with number of matched tests when inverted'
V1.3.0,1.2.0,1.3.0,'Runner .grepTotal() should return the total number of matched tests when inverted'
V1.3.0,1.2.0,1.3.0,'Runnable(title, fn) .run(fn) when async when the callback is invoked several times with an error should emit a single "error" event'
V1.3.0,1.2.1,1.3.0,'Runner .grep() should update the runner.total with number of matched tests when inverted'
V1.3.0,1.2.1,1.3.0,'Runner .grepTotal() should return the total number of matched tests when inverted'
V1.3.0,1.2.1,1.3.0,'Runnable(title, fn) .run(fn) when async when the callback is invoked several times with an error should emit a single "error" event'
V1.3.0,1.2.2,1.3.0,'Runner .grep() should update the runner.total with number of matched tests when inverted'
V1.3.0,1.2.2,1.3.0,'Runner .grepTotal() should return the total number of matched tests when inverted'
V1.3.0,1.2.2,1.3.0,'Runnable(title, fn) .run(fn) when async when the callback is invoked several times with an error should emit a single "error" event'
V1.3.1,1.0.0,1.3.1,'Suite .eachTest(fn) when there are no nested suites or tests should return 0'
V1.3.1,1.0.0,1.3.1,'Suite .eachTest(fn) when there are several tests in the suite should return the number'
V1.3.1,1.0.0,1.3.1,'Suite .eachTest(fn) when there are several levels of nested suites should return the number'
V1.3.1,1.0.0,1.3.1,'Runner .grep() should update the runner.total with number of matched tests'
V1.3.1,1.0.0,1.3.1,'Runner .grep() should update the runner.total with number of matched tests when inverted'
V1.3.1,1.0.0,1.3.1,'Runner .grepTotal() should return the total number of matched tests'
V1.3.1,1.0.0,1.3.1,'Runner .grepTotal() should return the total number of matched tests when inverted'
V1.3.1,1.0.0,1.3.1,'Runner .checkGlobals(test) should allow variables that match a wildcard'
V1.3.1,1.0.0,1.3.1,'Runner .checkGlobals(test) should allow variables that match a wildcard'
V1.3.1,1.0.0,1.3.1,'Runner .checkGlobals(test) should emit "fail" when a new global is introduced'
V1.3.1,1.0.0,1.3.1,'Runner .checkGlobals(test) should pluralize the error message when several are introduced'
V1.3.1,1.0.0,1.3.1,'Runner .checkGlobals(test) should pluralize the error message when several are introduced'
V1.3.1,1.0.0,1.3.1,'Runnable(title, fn) .run(fn) when .pending should not invoke the callback'
V1.3.1,1.0.0,1.3.1,'Runnable(title, fn) .run(fn) when sync without error should invoke the callback'
V1.3.1,1.0.0,1.3.1,'Runnable(title, fn) .run(fn) when sync when an exception is thrown should invoke the callback'
V1.3.1,1.0.0,1.3.1,'Runnable(title, fn) .run(fn) when async without error should invoke the callback'
V1.3.1,1.0.0,1.3.1,'Runnable(title, fn) .run(fn) when async when the callback is invoked several times without an error should emit a single "error" event'
V1.3.1,1.0.0,1.3.1,'Runnable(title, fn) .run(fn) when async when the callback is invoked several times with an error should emit a single "error" event'
V1.3.1,1.0.0,1.3.1,'Runnable(title, fn) .run(fn) when async when an exception is thrown should invoke the callback'
V1.3.1,1.0.0,1.3.1,'Runnable(title, fn) .run(fn) when async when an error is passed should invoke the callback'
V1.3.1,1.0.0,1.3.1,'global leaks should pass with wildcard'
V1.3.1,1.0.1,1.3.1,'Suite .eachTest(fn) when there are no nested suites or tests should return 0'
V1.3.1,1.0.1,1.3.1,'Suite .eachTest(fn) when there are several tests in the suite should return the number'
V1.3.1,1.0.1,1.3.1,'Suite .eachTest(fn) when there are several levels of nested suites should return the number'
V1.3.1,1.0.1,1.3.1,'Runner .grep() should update the runner.total with number of matched tests'
V1.3.1,1.0.1,1.3.1,'Runner .grep() should update the runner.total with number of matched tests when inverted'
V1.3.1,1.0.1,1.3.1,'Runner .grepTotal() should return the total number of matched tests'
V1.3.1,1.0.1,1.3.1,'Runner .grepTotal() should return the total number of matched tests when inverted'
V1.3.1,1.0.1,1.3.1,'Runner .checkGlobals(test) should allow variables that match a wildcard'
V1.3.1,1.0.1,1.3.1,'Runner .checkGlobals(test) should allow variables that match a wildcard'
V1.3.1,1.0.1,1.3.1,'Runner .checkGlobals(test) should emit "fail" when a new global is introduced'
V1.3.1,1.0.1,1.3.1,'Runner .checkGlobals(test) should pluralize the error message when several are introduced'
V1.3.1,1.0.1,1.3.1,'Runner .checkGlobals(test) should pluralize the error message when several are introduced'
V1.3.1,1.0.1,1.3.1,'Runnable(title, fn) .run(fn) when .pending should not invoke the callback'
V1.3.1,1.0.1,1.3.1,'Runnable(title, fn) .run(fn) when sync without error should invoke the callback'
V1.3.1,1.0.1,1.3.1,'Runnable(title, fn) .run(fn) when sync when an exception is thrown should invoke the callback'
V1.3.1,1.0.1,1.3.1,'Runnable(title, fn) .run(fn) when async without error should invoke the callback'
V1.3.1,1.0.1,1.3.1,'Runnable(title, fn) .run(fn) when async when the callback is invoked several times without an error should emit a single "error" event'
V1.3.1,1.0.1,1.3.1,'Runnable(title, fn) .run(fn) when async when the callback is invoked several times with an error should emit a single "error" event'
V1.3.1,1.0.1,1.3.1,'Runnable(title, fn) .run(fn) when async when an exception is thrown should invoke the callback'
V1.3.1,1.0.1,1.3.1,'Runnable(title, fn) .run(fn) when async when an error is passed should invoke the callback'
V1.3.1,1.0.1,1.3.1,'global leaks should pass with wildcard'
V1.3.1,1.0.2,1.3.1,'Runner .grep() should update the runner.total with number of matched tests when inverted'
V1.3.1,1.0.2,1.3.1,'Runner .grepTotal() should return the total number of matched tests when inverted'
V1.3.1,1.0.2,1.3.1,'Runner .checkGlobals(test) should allow variables that match a wildcard'
V1.3.1,1.0.2,1.3.1,'Runner .checkGlobals(test) should allow variables that match a wildcard'
V1.3.1,1.0.2,1.3.1,'Runner .checkGlobals(test) should emit "fail" when a new global is introduced'
V1.3.1,1.0.2,1.3.1,'Runner .checkGlobals(test) should pluralize the error message when several are introduced'
V1.3.1,1.0.2,1.3.1,'Runner .checkGlobals(test) should pluralize the error message when several are introduced'
V1.3.1,1.0.2,1.3.1,'Runnable(title, fn) .run(fn) when .pending should not invoke the callback'
V1.3.1,1.0.2,1.3.1,'Runnable(title, fn) .run(fn) when sync without error should invoke the callback'
V1.3.1,1.0.2,1.3.1,'Runnable(title, fn) .run(fn) when sync when an exception is thrown should invoke the callback'
V1.3.1,1.0.2,1.3.1,'Runnable(title, fn) .run(fn) when async without error should invoke the callback'
V1.3.1,1.0.2,1.3.1,'Runnable(title, fn) .run(fn) when async when the callback is invoked several times without an error should emit a single "error" event'
V1.3.1,1.0.2,1.3.1,'Runnable(title, fn) .run(fn) when async when the callback is invoked several times with an error should emit a single "error" event'
V1.3.1,1.0.2,1.3.1,'Runnable(title, fn) .run(fn) when async when an exception is thrown should invoke the callback'
V1.3.1,1.0.2,1.3.1,'Runnable(title, fn) .run(fn) when async when an error is passed should invoke the callback'
V1.3.1,1.0.2,1.3.1,'global leaks should pass with wildcard'
V1.3.1,1.0.3,1.3.1,'Runner .grep() should update the runner.total with number of matched tests when inverted'
V1.3.1,1.0.3,1.3.1,'Runner .grepTotal() should return the total number of matched tests when inverted'
V1.3.1,1.0.3,1.3.1,'Runner .checkGlobals(test) should allow variables that match a wildcard'
V1.3.1,1.0.3,1.3.1,'Runner .checkGlobals(test) should allow variables that match a wildcard'
V1.3.1,1.0.3,1.3.1,'Runner .checkGlobals(test) should emit "fail" when a new global is introduced'
V1.3.1,1.0.3,1.3.1,'Runner .checkGlobals(test) should pluralize the error message when several are introduced'
V1.3.1,1.0.3,1.3.1,'Runner .checkGlobals(test) should pluralize the error message when several are introduced'
V1.3.1,1.0.3,1.3.1,'Runnable(title, fn) .run(fn) when .pending should not invoke the callback'
V1.3.1,1.0.3,1.3.1,'Runnable(title, fn) .run(fn) when sync without error should invoke the callback'
V1.3.1,1.0.3,1.3.1,'Runnable(title, fn) .run(fn) when sync when an exception is thrown should invoke the callback'
V1.3.1,1.0.3,1.3.1,'Runnable(title, fn) .run(fn) when async without error should invoke the callback'
V1.3.1,1.0.3,1.3.1,'Runnable(title, fn) .run(fn) when async when the callback is invoked several times without an error should emit a single "error" event'
V1.3.1,1.0.3,1.3.1,'Runnable(title, fn) .run(fn) when async when the callback is invoked several times with an error should emit a single "error" event'
V1.3.1,1.0.3,1.3.1,'Runnable(title, fn) .run(fn) when async when an exception is thrown should invoke the callback'
V1.3.1,1.0.3,1.3.1,'Runnable(title, fn) .run(fn) when async when an error is passed should invoke the callback'
V1.3.1,1.0.3,1.3.1,'global leaks should pass with wildcard'
V1.3.1,1.1.0,1.3.1,'Runner .grep() should update the runner.total with number of matched tests when inverted'
V1.3.1,1.1.0,1.3.1,'Runner .grepTotal() should return the total number of matched tests when inverted'
V1.3.1,1.1.0,1.3.1,'Runner .checkGlobals(test) should allow variables that match a wildcard'
V1.3.1,1.1.0,1.3.1,'Runner .checkGlobals(test) should allow variables that match a wildcard'
V1.3.1,1.1.0,1.3.1,'Runner .checkGlobals(test) should emit "fail" when a new global is introduced'
V1.3.1,1.1.0,1.3.1,'Runner .checkGlobals(test) should pluralize the error message when several are introduced'
V1.3.1,1.1.0,1.3.1,'Runner .checkGlobals(test) should pluralize the error message when several are introduced'
V1.3.1,1.1.0,1.3.1,'Runnable(title, fn) .run(fn) when async when the callback is invoked several times with an error should emit a single "error" event'
V1.3.1,1.1.0,1.3.1,'global leaks should pass with wildcard'
V1.3.1,1.2.0,1.3.1,'Runner .grep() should update the runner.total with number of matched tests when inverted'
V1.3.1,1.2.0,1.3.1,'Runner .grepTotal() should return the total number of matched tests when inverted'
V1.3.1,1.2.0,1.3.1,'Runnable(title, fn) .run(fn) when async when the callback is invoked several times with an error should emit a single "error" event'
V1.3.1,1.2.1,1.3.1,'Runner .grep() should update the runner.total with number of matched tests when inverted'
V1.3.1,1.2.1,1.3.1,'Runner .grepTotal() should return the total number of matched tests when inverted'
V1.3.1,1.2.1,1.3.1,'Runnable(title, fn) .run(fn) when async when the callback is invoked several times with an error should emit a single "error" event'
V1.3.1,1.2.2,1.3.1,'Runner .grep() should update the runner.total with number of matched tests when inverted'
V1.3.1,1.2.2,1.3.1,'Runner .grepTotal() should return the total number of matched tests when inverted'
V1.3.1,1.2.2,1.3.1,'Runnable(title, fn) .run(fn) when async when the callback is invoked several times with an error should emit a single "error" event'
V1.3.2,1.0.0,1.3.2,'Suite .eachTest(fn) when there are no nested suites or tests should return 0'
V1.3.2,1.0.0,1.3.2,'Suite .eachTest(fn) when there are several tests in the suite should return the number'
V1.3.2,1.0.0,1.3.2,'Suite .eachTest(fn) when there are several levels of nested suites should return the number'
V1.3.2,1.0.0,1.3.2,'Runner .grep() should update the runner.total with number of matched tests'
V1.3.2,1.0.0,1.3.2,'Runner .grep() should update the runner.total with number of matched tests when inverted'
V1.3.2,1.0.0,1.3.2,'Runner .grepTotal() should return the total number of matched tests'
V1.3.2,1.0.0,1.3.2,'Runner .grepTotal() should return the total number of matched tests when inverted'
V1.3.2,1.0.0,1.3.2,'Runner .checkGlobals(test) should allow variables that match a wildcard'
V1.3.2,1.0.0,1.3.2,'Runner .checkGlobals(test) should allow variables that match a wildcard'
V1.3.2,1.0.0,1.3.2,'Runner .checkGlobals(test) should emit "fail" when a new global is introduced'
V1.3.2,1.0.0,1.3.2,'Runner .checkGlobals(test) should pluralize the error message when several are introduced'
V1.3.2,1.0.0,1.3.2,'Runner .checkGlobals(test) should pluralize the error message when several are introduced'
V1.3.2,1.0.0,1.3.2,'Runnable(title, fn) .run(fn) when .pending should not invoke the callback'
V1.3.2,1.0.0,1.3.2,'Runnable(title, fn) .run(fn) when sync without error should invoke the callback'
V1.3.2,1.0.0,1.3.2,'Runnable(title, fn) .run(fn) when sync when an exception is thrown should invoke the callback'
V1.3.2,1.0.0,1.3.2,'Runnable(title, fn) .run(fn) when async without error should invoke the callback'
V1.3.2,1.0.0,1.3.2,'Runnable(title, fn) .run(fn) when async when the callback is invoked several times without an error should emit a single "error" event'
V1.3.2,1.0.0,1.3.2,'Runnable(title, fn) .run(fn) when async when the callback is invoked several times with an error should emit a single "error" event'
V1.3.2,1.0.0,1.3.2,'Runnable(title, fn) .run(fn) when async when an exception is thrown should invoke the callback'
V1.3.2,1.0.0,1.3.2,'Runnable(title, fn) .run(fn) when async when an error is passed should invoke the callback'
V1.3.2,1.0.0,1.3.2,'global leaks should pass with wildcard'
V1.3.2,1.0.1,1.3.2,'Suite .eachTest(fn) when there are no nested suites or tests should return 0'
V1.3.2,1.0.1,1.3.2,'Suite .eachTest(fn) when there are several tests in the suite should return the number'
V1.3.2,1.0.1,1.3.2,'Suite .eachTest(fn) when there are several levels of nested suites should return the number'
V1.3.2,1.0.1,1.3.2,'Runner .grep() should update the runner.total with number of matched tests'
V1.3.2,1.0.1,1.3.2,'Runner .grep() should update the runner.total with number of matched tests when inverted'
V1.3.2,1.0.1,1.3.2,'Runner .grepTotal() should return the total number of matched tests'
V1.3.2,1.0.1,1.3.2,'Runner .grepTotal() should return the total number of matched tests when inverted'
V1.3.2,1.0.1,1.3.2,'Runner .checkGlobals(test) should allow variables that match a wildcard'
V1.3.2,1.0.1,1.3.2,'Runner .checkGlobals(test) should allow variables that match a wildcard'
V1.3.2,1.0.1,1.3.2,'Runner .checkGlobals(test) should emit "fail" when a new global is introduced'
V1.3.2,1.0.1,1.3.2,'Runner .checkGlobals(test) should pluralize the error message when several are introduced'
V1.3.2,1.0.1,1.3.2,'Runner .checkGlobals(test) should pluralize the error message when several are introduced'
V1.3.2,1.0.1,1.3.2,'Runnable(title, fn) .run(fn) when .pending should not invoke the callback'
V1.3.2,1.0.1,1.3.2,'Runnable(title, fn) .run(fn) when sync without error should invoke the callback'
V1.3.2,1.0.1,1.3.2,'Runnable(title, fn) .run(fn) when sync when an exception is thrown should invoke the callback'
V1.3.2,1.0.1,1.3.2,'Runnable(title, fn) .run(fn) when async without error should invoke the callback'
V1.3.2,1.0.1,1.3.2,'Runnable(title, fn) .run(fn) when async when the callback is invoked several times without an error should emit a single "error" event'
V1.3.2,1.0.1,1.3.2,'Runnable(title, fn) .run(fn) when async when the callback is invoked several times with an error should emit a single "error" event'
V1.3.2,1.0.1,1.3.2,'Runnable(title, fn) .run(fn) when async when an exception is thrown should invoke the callback'
V1.3.2,1.0.1,1.3.2,'Runnable(title, fn) .run(fn) when async when an error is passed should invoke the callback'
V1.3.2,1.0.1,1.3.2,'global leaks should pass with wildcard'
V1.3.2,1.0.2,1.3.2,'Runner .grep() should update the runner.total with number of matched tests when inverted'
V1.3.2,1.0.2,1.3.2,'Runner .grepTotal() should return the total number of matched tests when inverted'
V1.3.2,1.0.2,1.3.2,'Runner .checkGlobals(test) should allow variables that match a wildcard'
V1.3.2,1.0.2,1.3.2,'Runner .checkGlobals(test) should allow variables that match a wildcard'
V1.3.2,1.0.2,1.3.2,'Runner .checkGlobals(test) should emit "fail" when a new global is introduced'
V1.3.2,1.0.2,1.3.2,'Runner .checkGlobals(test) should pluralize the error message when several are introduced'
V1.3.2,1.0.2,1.3.2,'Runner .checkGlobals(test) should pluralize the error message when several are introduced'
V1.3.2,1.0.2,1.3.2,'Runnable(title, fn) .run(fn) when .pending should not invoke the callback'
V1.3.2,1.0.2,1.3.2,'Runnable(title, fn) .run(fn) when sync without error should invoke the callback'
V1.3.2,1.0.2,1.3.2,'Runnable(title, fn) .run(fn) when sync when an exception is thrown should invoke the callback'
V1.3.2,1.0.2,1.3.2,'Runnable(title, fn) .run(fn) when async without error should invoke the callback'
V1.3.2,1.0.2,1.3.2,'Runnable(title, fn) .run(fn) when async when the callback is invoked several times without an error should emit a single "error" event'
V1.3.2,1.0.2,1.3.2,'Runnable(title, fn) .run(fn) when async when the callback is invoked several times with an error should emit a single "error" event'
V1.3.2,1.0.2,1.3.2,'Runnable(title, fn) .run(fn) when async when an exception is thrown should invoke the callback'
V1.3.2,1.0.2,1.3.2,'Runnable(title, fn) .run(fn) when async when an error is passed should invoke the callback'
V1.3.2,1.0.2,1.3.2,'global leaks should pass with wildcard'
V1.3.2,1.0.3,1.3.2,'Runner .grep() should update the runner.total with number of matched tests when inverted'
V1.3.2,1.0.3,1.3.2,'Runner .grepTotal() should return the total number of matched tests when inverted'
V1.3.2,1.0.3,1.3.2,'Runner .checkGlobals(test) should allow variables that match a wildcard'
V1.3.2,1.0.3,1.3.2,'Runner .checkGlobals(test) should allow variables that match a wildcard'
V1.3.2,1.0.3,1.3.2,'Runner .checkGlobals(test) should emit "fail" when a new global is introduced'
V1.3.2,1.0.3,1.3.2,'Runner .checkGlobals(test) should pluralize the error message when several are introduced'
V1.3.2,1.0.3,1.3.2,'Runner .checkGlobals(test) should pluralize the error message when several are introduced'
V1.3.2,1.0.3,1.3.2,'Runnable(title, fn) .run(fn) when .pending should not invoke the callback'
V1.3.2,1.0.3,1.3.2,'Runnable(title, fn) .run(fn) when sync without error should invoke the callback'
V1.3.2,1.0.3,1.3.2,'Runnable(title, fn) .run(fn) when sync when an exception is thrown should invoke the callback'
V1.3.2,1.0.3,1.3.2,'Runnable(title, fn) .run(fn) when async without error should invoke the callback'
V1.3.2,1.0.3,1.3.2,'Runnable(title, fn) .run(fn) when async when the callback is invoked several times without an error should emit a single "error" event'
V1.3.2,1.0.3,1.3.2,'Runnable(title, fn) .run(fn) when async when the callback is invoked several times with an error should emit a single "error" event'
V1.3.2,1.0.3,1.3.2,'Runnable(title, fn) .run(fn) when async when an exception is thrown should invoke the callback'
V1.3.2,1.0.3,1.3.2,'Runnable(title, fn) .run(fn) when async when an error is passed should invoke the callback'
V1.3.2,1.0.3,1.3.2,'global leaks should pass with wildcard'
V1.3.2,1.1.0,1.3.2,'Runner .grep() should update the runner.total with number of matched tests when inverted'
V1.3.2,1.1.0,1.3.2,'Runner .grepTotal() should return the total number of matched tests when inverted'
V1.3.2,1.1.0,1.3.2,'Runner .checkGlobals(test) should allow variables that match a wildcard'
V1.3.2,1.1.0,1.3.2,'Runner .checkGlobals(test) should allow variables that match a wildcard'
V1.3.2,1.1.0,1.3.2,'Runner .checkGlobals(test) should emit "fail" when a new global is introduced'
V1.3.2,1.1.0,1.3.2,'Runner .checkGlobals(test) should pluralize the error message when several are introduced'
V1.3.2,1.1.0,1.3.2,'Runner .checkGlobals(test) should pluralize the error message when several are introduced'
V1.3.2,1.1.0,1.3.2,'Runnable(title, fn) .run(fn) when async when the callback is invoked several times with an error should emit a single "error" event'
V1.3.2,1.1.0,1.3.2,'global leaks should pass with wildcard'
V1.3.2,1.2.0,1.3.2,'Runner .grep() should update the runner.total with number of matched tests when inverted'
V1.3.2,1.2.0,1.3.2,'Runner .grepTotal() should return the total number of matched tests when inverted'
V1.3.2,1.2.0,1.3.2,'Runnable(title, fn) .run(fn) when async when the callback is invoked several times with an error should emit a single "error" event'
V1.3.2,1.2.1,1.3.2,'Runner .grep() should update the runner.total with number of matched tests when inverted'
V1.3.2,1.2.1,1.3.2,'Runner .grepTotal() should return the total number of matched tests when inverted'
V1.3.2,1.2.1,1.3.2,'Runnable(title, fn) .run(fn) when async when the callback is invoked several times with an error should emit a single "error" event'
V1.3.2,1.2.2,1.3.2,'Runner .grep() should update the runner.total with number of matched tests when inverted'
V1.3.2,1.2.2,1.3.2,'Runner .grepTotal() should return the total number of matched tests when inverted'
V1.3.2,1.2.2,1.3.2,'Runnable(title, fn) .run(fn) when async when the callback is invoked several times with an error should emit a single "error" event'
V1.4.0,1.0.0,1.4.0,'Suite .eachTest(fn) when there are no nested suites or tests should return 0'
V1.4.0,1.0.0,1.4.0,'Suite .eachTest(fn) when there are several tests in the suite should return the number'
V1.4.0,1.0.0,1.4.0,'Suite .eachTest(fn) when there are several levels of nested suites should return the number'
V1.4.0,1.0.0,1.4.0,'Runner .grep() should update the runner.total with number of matched tests'
V1.4.0,1.0.0,1.4.0,'Runner .grep() should update the runner.total with number of matched tests when inverted'
V1.4.0,1.0.0,1.4.0,'Runner .grepTotal() should return the total number of matched tests'
V1.4.0,1.0.0,1.4.0,'Runner .grepTotal() should return the total number of matched tests when inverted'
V1.4.0,1.0.0,1.4.0,'Runner .checkGlobals(test) should allow variables that match a wildcard'
V1.4.0,1.0.0,1.4.0,'Runner .checkGlobals(test) should allow variables that match a wildcard'
V1.4.0,1.0.0,1.4.0,'Runner .checkGlobals(test) should emit "fail" when a new global is introduced'
V1.4.0,1.0.0,1.4.0,'Runner .checkGlobals(test) should pluralize the error message when several are introduced'
V1.4.0,1.0.0,1.4.0,'Runner .checkGlobals(test) should pluralize the error message when several are introduced'
V1.4.0,1.0.0,1.4.0,'Runnable(title, fn) .run(fn) when .pending should not invoke the callback'
V1.4.0,1.0.0,1.4.0,'Runnable(title, fn) .run(fn) when sync without error should invoke the callback'
V1.4.0,1.0.0,1.4.0,'Runnable(title, fn) .run(fn) when sync when an exception is thrown should invoke the callback'
V1.4.0,1.0.0,1.4.0,'Runnable(title, fn) .run(fn) when async without error should invoke the callback'
V1.4.0,1.0.0,1.4.0,'Runnable(title, fn) .run(fn) when async when the callback is invoked several times without an error should emit a single "error" event'
V1.4.0,1.0.0,1.4.0,'Runnable(title, fn) .run(fn) when async when the callback is invoked several times with an error should emit a single "error" event'
V1.4.0,1.0.0,1.4.0,'Runnable(title, fn) .run(fn) when async when an exception is thrown should invoke the callback'
V1.4.0,1.0.0,1.4.0,'Runnable(title, fn) .run(fn) when async when an error is passed should invoke the callback'
V1.4.0,1.0.0,1.4.0,'global leaks should pass with wildcard'
V1.4.0,1.0.1,1.4.0,'Suite .eachTest(fn) when there are no nested suites or tests should return 0'
V1.4.0,1.0.1,1.4.0,'Suite .eachTest(fn) when there are several tests in the suite should return the number'
V1.4.0,1.0.1,1.4.0,'Suite .eachTest(fn) when there are several levels of nested suites should return the number'
V1.4.0,1.0.1,1.4.0,'Runner .grep() should update the runner.total with number of matched tests'
V1.4.0,1.0.1,1.4.0,'Runner .grep() should update the runner.total with number of matched tests when inverted'
V1.4.0,1.0.1,1.4.0,'Runner .grepTotal() should return the total number of matched tests'
V1.4.0,1.0.1,1.4.0,'Runner .grepTotal() should return the total number of matched tests when inverted'
V1.4.0,1.0.1,1.4.0,'Runner .checkGlobals(test) should allow variables that match a wildcard'
V1.4.0,1.0.1,1.4.0,'Runner .checkGlobals(test) should allow variables that match a wildcard'
V1.4.0,1.0.1,1.4.0,'Runner .checkGlobals(test) should emit "fail" when a new global is introduced'
V1.4.0,1.0.1,1.4.0,'Runner .checkGlobals(test) should pluralize the error message when several are introduced'
V1.4.0,1.0.1,1.4.0,'Runner .checkGlobals(test) should pluralize the error message when several are introduced'
V1.4.0,1.0.1,1.4.0,'Runnable(title, fn) .run(fn) when .pending should not invoke the callback'
V1.4.0,1.0.1,1.4.0,'Runnable(title, fn) .run(fn) when sync without error should invoke the callback'
V1.4.0,1.0.1,1.4.0,'Runnable(title, fn) .run(fn) when sync when an exception is thrown should invoke the callback'
V1.4.0,1.0.1,1.4.0,'Runnable(title, fn) .run(fn) when async without error should invoke the callback'
V1.4.0,1.0.1,1.4.0,'Runnable(title, fn) .run(fn) when async when the callback is invoked several times without an error should emit a single "error" event'
V1.4.0,1.0.1,1.4.0,'Runnable(title, fn) .run(fn) when async when the callback is invoked several times with an error should emit a single "error" event'
V1.4.0,1.0.1,1.4.0,'Runnable(title, fn) .run(fn) when async when an exception is thrown should invoke the callback'
V1.4.0,1.0.1,1.4.0,'Runnable(title, fn) .run(fn) when async when an error is passed should invoke the callback'
V1.4.0,1.0.1,1.4.0,'global leaks should pass with wildcard'
V1.4.0,1.0.2,1.4.0,'Runner .grep() should update the runner.total with number of matched tests when inverted'
V1.4.0,1.0.2,1.4.0,'Runner .grepTotal() should return the total number of matched tests when inverted'
V1.4.0,1.0.2,1.4.0,'Runner .checkGlobals(test) should allow variables that match a wildcard'
V1.4.0,1.0.2,1.4.0,'Runner .checkGlobals(test) should allow variables that match a wildcard'
V1.4.0,1.0.2,1.4.0,'Runner .checkGlobals(test) should emit "fail" when a new global is introduced'
V1.4.0,1.0.2,1.4.0,'Runner .checkGlobals(test) should pluralize the error message when several are introduced'
V1.4.0,1.0.2,1.4.0,'Runner .checkGlobals(test) should pluralize the error message when several are introduced'
V1.4.0,1.0.2,1.4.0,'Runnable(title, fn) .run(fn) when .pending should not invoke the callback'
V1.4.0,1.0.2,1.4.0,'Runnable(title, fn) .run(fn) when sync without error should invoke the callback'
V1.4.0,1.0.2,1.4.0,'Runnable(title, fn) .run(fn) when sync when an exception is thrown should invoke the callback'
V1.4.0,1.0.2,1.4.0,'Runnable(title, fn) .run(fn) when async without error should invoke the callback'
V1.4.0,1.0.2,1.4.0,'Runnable(title, fn) .run(fn) when async when the callback is invoked several times without an error should emit a single "error" event'
V1.4.0,1.0.2,1.4.0,'Runnable(title, fn) .run(fn) when async when the callback is invoked several times with an error should emit a single "error" event'
V1.4.0,1.0.2,1.4.0,'Runnable(title, fn) .run(fn) when async when an exception is thrown should invoke the callback'
V1.4.0,1.0.2,1.4.0,'Runnable(title, fn) .run(fn) when async when an error is passed should invoke the callback'
V1.4.0,1.0.2,1.4.0,'global leaks should pass with wildcard'
V1.4.0,1.0.3,1.4.0,'Runner .grep() should update the runner.total with number of matched tests when inverted'
V1.4.0,1.0.3,1.4.0,'Runner .grepTotal() should return the total number of matched tests when inverted'
V1.4.0,1.0.3,1.4.0,'Runner .checkGlobals(test) should allow variables that match a wildcard'
V1.4.0,1.0.3,1.4.0,'Runner .checkGlobals(test) should allow variables that match a wildcard'
V1.4.0,1.0.3,1.4.0,'Runner .checkGlobals(test) should emit "fail" when a new global is introduced'
V1.4.0,1.0.3,1.4.0,'Runner .checkGlobals(test) should pluralize the error message when several are introduced'
V1.4.0,1.0.3,1.4.0,'Runner .checkGlobals(test) should pluralize the error message when several are introduced'
V1.4.0,1.0.3,1.4.0,'Runnable(title, fn) .run(fn) when .pending should not invoke the callback'
V1.4.0,1.0.3,1.4.0,'Runnable(title, fn) .run(fn) when sync without error should invoke the callback'
V1.4.0,1.0.3,1.4.0,'Runnable(title, fn) .run(fn) when sync when an exception is thrown should invoke the callback'
V1.4.0,1.0.3,1.4.0,'Runnable(title, fn) .run(fn) when async without error should invoke the callback'
V1.4.0,1.0.3,1.4.0,'Runnable(title, fn) .run(fn) when async when the callback is invoked several times without an error should emit a single "error" event'
V1.4.0,1.0.3,1.4.0,'Runnable(title, fn) .run(fn) when async when the callback is invoked several times with an error should emit a single "error" event'
V1.4.0,1.0.3,1.4.0,'Runnable(title, fn) .run(fn) when async when an exception is thrown should invoke the callback'
V1.4.0,1.0.3,1.4.0,'Runnable(title, fn) .run(fn) when async when an error is passed should invoke the callback'
V1.4.0,1.0.3,1.4.0,'global leaks should pass with wildcard'
V1.4.0,1.1.0,1.4.0,'Runner .grep() should update the runner.total with number of matched tests when inverted'
V1.4.0,1.1.0,1.4.0,'Runner .grepTotal() should return the total number of matched tests when inverted'
V1.4.0,1.1.0,1.4.0,'Runner .checkGlobals(test) should allow variables that match a wildcard'
V1.4.0,1.1.0,1.4.0,'Runner .checkGlobals(test) should allow variables that match a wildcard'
V1.4.0,1.1.0,1.4.0,'Runner .checkGlobals(test) should emit "fail" when a new global is introduced'
V1.4.0,1.1.0,1.4.0,'Runner .checkGlobals(test) should pluralize the error message when several are introduced'
V1.4.0,1.1.0,1.4.0,'Runner .checkGlobals(test) should pluralize the error message when several are introduced'
V1.4.0,1.1.0,1.4.0,'Runnable(title, fn) .run(fn) when async when the callback is invoked several times with an error should emit a single "error" event'
V1.4.0,1.1.0,1.4.0,'global leaks should pass with wildcard'
V1.4.0,1.2.0,1.4.0,'Runner .grep() should update the runner.total with number of matched tests when inverted'
V1.4.0,1.2.0,1.4.0,'Runner .grepTotal() should return the total number of matched tests when inverted'
V1.4.0,1.2.0,1.4.0,'Runnable(title, fn) .run(fn) when async when the callback is invoked several times with an error should emit a single "error" event'
V1.4.0,1.2.1,1.4.0,'Runner .grep() should update the runner.total with number of matched tests when inverted'
V1.4.0,1.2.1,1.4.0,'Runner .grepTotal() should return the total number of matched tests when inverted'
V1.4.0,1.2.1,1.4.0,'Runnable(title, fn) .run(fn) when async when the callback is invoked several times with an error should emit a single "error" event'
V1.4.0,1.2.2,1.4.0,'Runner .grep() should update the runner.total with number of matched tests when inverted'
V1.4.0,1.2.2,1.4.0,'Runner .grepTotal() should return the total number of matched tests when inverted'
V1.4.0,1.2.2,1.4.0,'Runnable(title, fn) .run(fn) when async when the callback is invoked several times with an error should emit a single "error" event'
V1.4.1,1.0.0,1.4.1,'Suite .eachTest(fn) when there are no nested suites or tests should return 0'
V1.4.1,1.0.0,1.4.1,'Suite .eachTest(fn) when there are several tests in the suite should return the number'
V1.4.1,1.0.0,1.4.1,'Suite .eachTest(fn) when there are several levels of nested suites should return the number'
V1.4.1,1.0.0,1.4.1,'Runner .grep() should update the runner.total with number of matched tests'
V1.4.1,1.0.0,1.4.1,'Runner .grep() should update the runner.total with number of matched tests when inverted'
V1.4.1,1.0.0,1.4.1,'Runner .grepTotal() should return the total number of matched tests'
V1.4.1,1.0.0,1.4.1,'Runner .grepTotal() should return the total number of matched tests when inverted'
V1.4.1,1.0.0,1.4.1,'Runner .checkGlobals(test) should allow variables that match a wildcard'
V1.4.1,1.0.0,1.4.1,'Runner .checkGlobals(test) should allow variables that match a wildcard'
V1.4.1,1.0.0,1.4.1,'Runner .checkGlobals(test) should emit "fail" when a new global is introduced'
V1.4.1,1.0.0,1.4.1,'Runner .checkGlobals(test) should pluralize the error message when several are introduced'
V1.4.1,1.0.0,1.4.1,'Runner .checkGlobals(test) should pluralize the error message when several are introduced'
V1.4.1,1.0.0,1.4.1,'Runnable(title, fn) .run(fn) when .pending should not invoke the callback'
V1.4.1,1.0.0,1.4.1,'Runnable(title, fn) .run(fn) when sync without error should invoke the callback'
V1.4.1,1.0.0,1.4.1,'Runnable(title, fn) .run(fn) when sync when an exception is thrown should invoke the callback'
V1.4.1,1.0.0,1.4.1,'Runnable(title, fn) .run(fn) when async without error should invoke the callback'
V1.4.1,1.0.0,1.4.1,'Runnable(title, fn) .run(fn) when async when the callback is invoked several times without an error should emit a single "error" event'
V1.4.1,1.0.0,1.4.1,'Runnable(title, fn) .run(fn) when async when the callback is invoked several times with an error should emit a single "error" event'
V1.4.1,1.0.0,1.4.1,'Runnable(title, fn) .run(fn) when async when an exception is thrown should invoke the callback'
V1.4.1,1.0.0,1.4.1,'Runnable(title, fn) .run(fn) when async when an error is passed should invoke the callback'
V1.4.1,1.0.0,1.4.1,'global leaks should pass with wildcard'
V1.4.1,1.0.1,1.4.1,'Suite .eachTest(fn) when there are no nested suites or tests should return 0'
V1.4.1,1.0.1,1.4.1,'Suite .eachTest(fn) when there are several tests in the suite should return the number'
V1.4.1,1.0.1,1.4.1,'Suite .eachTest(fn) when there are several levels of nested suites should return the number'
V1.4.1,1.0.1,1.4.1,'Runner .grep() should update the runner.total with number of matched tests'
V1.4.1,1.0.1,1.4.1,'Runner .grep() should update the runner.total with number of matched tests when inverted'
V1.4.1,1.0.1,1.4.1,'Runner .grepTotal() should return the total number of matched tests'
V1.4.1,1.0.1,1.4.1,'Runner .grepTotal() should return the total number of matched tests when inverted'
V1.4.1,1.0.1,1.4.1,'Runner .checkGlobals(test) should allow variables that match a wildcard'
V1.4.1,1.0.1,1.4.1,'Runner .checkGlobals(test) should allow variables that match a wildcard'
V1.4.1,1.0.1,1.4.1,'Runner .checkGlobals(test) should emit "fail" when a new global is introduced'
V1.4.1,1.0.1,1.4.1,'Runner .checkGlobals(test) should pluralize the error message when several are introduced'
V1.4.1,1.0.1,1.4.1,'Runner .checkGlobals(test) should pluralize the error message when several are introduced'
V1.4.1,1.0.1,1.4.1,'Runnable(title, fn) .run(fn) when .pending should not invoke the callback'
V1.4.1,1.0.1,1.4.1,'Runnable(title, fn) .run(fn) when sync without error should invoke the callback'
V1.4.1,1.0.1,1.4.1,'Runnable(title, fn) .run(fn) when sync when an exception is thrown should invoke the callback'
V1.4.1,1.0.1,1.4.1,'Runnable(title, fn) .run(fn) when async without error should invoke the callback'
V1.4.1,1.0.1,1.4.1,'Runnable(title, fn) .run(fn) when async when the callback is invoked several times without an error should emit a single "error" event'
V1.4.1,1.0.1,1.4.1,'Runnable(title, fn) .run(fn) when async when the callback is invoked several times with an error should emit a single "error" event'
V1.4.1,1.0.1,1.4.1,'Runnable(title, fn) .run(fn) when async when an exception is thrown should invoke the callback'
V1.4.1,1.0.1,1.4.1,'Runnable(title, fn) .run(fn) when async when an error is passed should invoke the callback'
V1.4.1,1.0.1,1.4.1,'global leaks should pass with wildcard'
V1.4.1,1.0.2,1.4.1,'Runner .grep() should update the runner.total with number of matched tests when inverted'
V1.4.1,1.0.2,1.4.1,'Runner .grepTotal() should return the total number of matched tests when inverted'
V1.4.1,1.0.2,1.4.1,'Runner .checkGlobals(test) should allow variables that match a wildcard'
V1.4.1,1.0.2,1.4.1,'Runner .checkGlobals(test) should allow variables that match a wildcard'
V1.4.1,1.0.2,1.4.1,'Runner .checkGlobals(test) should emit "fail" when a new global is introduced'
V1.4.1,1.0.2,1.4.1,'Runner .checkGlobals(test) should pluralize the error message when several are introduced'
V1.4.1,1.0.2,1.4.1,'Runner .checkGlobals(test) should pluralize the error message when several are introduced'
V1.4.1,1.0.2,1.4.1,'Runnable(title, fn) .run(fn) when .pending should not invoke the callback'
V1.4.1,1.0.2,1.4.1,'Runnable(title, fn) .run(fn) when sync without error should invoke the callback'
V1.4.1,1.0.2,1.4.1,'Runnable(title, fn) .run(fn) when sync when an exception is thrown should invoke the callback'
V1.4.1,1.0.2,1.4.1,'Runnable(title, fn) .run(fn) when async without error should invoke the callback'
V1.4.1,1.0.2,1.4.1,'Runnable(title, fn) .run(fn) when async when the callback is invoked several times without an error should emit a single "error" event'
V1.4.1,1.0.2,1.4.1,'Runnable(title, fn) .run(fn) when async when the callback is invoked several times with an error should emit a single "error" event'
V1.4.1,1.0.2,1.4.1,'Runnable(title, fn) .run(fn) when async when an exception is thrown should invoke the callback'
V1.4.1,1.0.2,1.4.1,'Runnable(title, fn) .run(fn) when async when an error is passed should invoke the callback'
V1.4.1,1.0.2,1.4.1,'global leaks should pass with wildcard'
V1.4.1,1.0.3,1.4.1,'Runner .grep() should update the runner.total with number of matched tests when inverted'
V1.4.1,1.0.3,1.4.1,'Runner .grepTotal() should return the total number of matched tests when inverted'
V1.4.1,1.0.3,1.4.1,'Runner .checkGlobals(test) should allow variables that match a wildcard'
V1.4.1,1.0.3,1.4.1,'Runner .checkGlobals(test) should allow variables that match a wildcard'
V1.4.1,1.0.3,1.4.1,'Runner .checkGlobals(test) should emit "fail" when a new global is introduced'
V1.4.1,1.0.3,1.4.1,'Runner .checkGlobals(test) should pluralize the error message when several are introduced'
V1.4.1,1.0.3,1.4.1,'Runner .checkGlobals(test) should pluralize the error message when several are introduced'
V1.4.1,1.0.3,1.4.1,'Runnable(title, fn) .run(fn) when .pending should not invoke the callback'
V1.4.1,1.0.3,1.4.1,'Runnable(title, fn) .run(fn) when sync without error should invoke the callback'
V1.4.1,1.0.3,1.4.1,'Runnable(title, fn) .run(fn) when sync when an exception is thrown should invoke the callback'
V1.4.1,1.0.3,1.4.1,'Runnable(title, fn) .run(fn) when async without error should invoke the callback'
V1.4.1,1.0.3,1.4.1,'Runnable(title, fn) .run(fn) when async when the callback is invoked several times without an error should emit a single "error" event'
V1.4.1,1.0.3,1.4.1,'Runnable(title, fn) .run(fn) when async when the callback is invoked several times with an error should emit a single "error" event'
V1.4.1,1.0.3,1.4.1,'Runnable(title, fn) .run(fn) when async when an exception is thrown should invoke the callback'
V1.4.1,1.0.3,1.4.1,'Runnable(title, fn) .run(fn) when async when an error is passed should invoke the callback'
V1.4.1,1.0.3,1.4.1,'global leaks should pass with wildcard'
V1.4.1,1.1.0,1.4.1,'Runner .grep() should update the runner.total with number of matched tests when inverted'
V1.4.1,1.1.0,1.4.1,'Runner .grepTotal() should return the total number of matched tests when inverted'
V1.4.1,1.1.0,1.4.1,'Runner .checkGlobals(test) should allow variables that match a wildcard'
V1.4.1,1.1.0,1.4.1,'Runner .checkGlobals(test) should allow variables that match a wildcard'
V1.4.1,1.1.0,1.4.1,'Runner .checkGlobals(test) should emit "fail" when a new global is introduced'
V1.4.1,1.1.0,1.4.1,'Runner .checkGlobals(test) should pluralize the error message when several are introduced'
V1.4.1,1.1.0,1.4.1,'Runner .checkGlobals(test) should pluralize the error message when several are introduced'
V1.4.1,1.1.0,1.4.1,'Runnable(title, fn) .run(fn) when async when the callback is invoked several times with an error should emit a single "error" event'
V1.4.1,1.1.0,1.4.1,'global leaks should pass with wildcard'
V1.4.1,1.2.0,1.4.1,'Runner .grep() should update the runner.total with number of matched tests when inverted'
V1.4.1,1.2.0,1.4.1,'Runner .grepTotal() should return the total number of matched tests when inverted'
V1.4.1,1.2.0,1.4.1,'Runnable(title, fn) .run(fn) when async when the callback is invoked several times with an error should emit a single "error" event'
V1.4.1,1.2.1,1.4.1,'Runner .grep() should update the runner.total with number of matched tests when inverted'
V1.4.1,1.2.1,1.4.1,'Runner .grepTotal() should return the total number of matched tests when inverted'
V1.4.1,1.2.1,1.4.1,'Runnable(title, fn) .run(fn) when async when the callback is invoked several times with an error should emit a single "error" event'
V1.4.1,1.2.2,1.4.1,'Runner .grep() should update the runner.total with number of matched tests when inverted'
V1.4.1,1.2.2,1.4.1,'Runner .grepTotal() should return the total number of matched tests when inverted'
V1.4.1,1.2.2,1.4.1,'Runnable(title, fn) .run(fn) when async when the callback is invoked several times with an error should emit a single "error" event'
V1.4.2,1.0.0,1.4.2,'Suite .eachTest(fn) when there are no nested suites or tests should return 0'
V1.4.2,1.0.0,1.4.2,'Suite .eachTest(fn) when there are several tests in the suite should return the number'
V1.4.2,1.0.0,1.4.2,'Suite .eachTest(fn) when there are several levels of nested suites should return the number'
V1.4.2,1.0.0,1.4.2,'Runner .grep() should update the runner.total with number of matched tests'
V1.4.2,1.0.0,1.4.2,'Runner .grep() should update the runner.total with number of matched tests when inverted'
V1.4.2,1.0.0,1.4.2,'Runner .grepTotal() should return the total number of matched tests'
V1.4.2,1.0.0,1.4.2,'Runner .grepTotal() should return the total number of matched tests when inverted'
V1.4.2,1.0.0,1.4.2,'Runner .checkGlobals(test) should allow variables that match a wildcard'
V1.4.2,1.0.0,1.4.2,'Runner .checkGlobals(test) should allow variables that match a wildcard'
V1.4.2,1.0.0,1.4.2,'Runner .checkGlobals(test) should emit "fail" when a new global is introduced'
V1.4.2,1.0.0,1.4.2,'Runner .checkGlobals(test) should pluralize the error message when several are introduced'
V1.4.2,1.0.0,1.4.2,'Runner .checkGlobals(test) should pluralize the error message when several are introduced'
V1.4.2,1.0.0,1.4.2,'Runnable(title, fn) .run(fn) when .pending should not invoke the callback'
V1.4.2,1.0.0,1.4.2,'Runnable(title, fn) .run(fn) when sync without error should invoke the callback'
V1.4.2,1.0.0,1.4.2,'Runnable(title, fn) .run(fn) when sync when an exception is thrown should invoke the callback'
V1.4.2,1.0.0,1.4.2,'Runnable(title, fn) .run(fn) when async without error should invoke the callback'
V1.4.2,1.0.0,1.4.2,'Runnable(title, fn) .run(fn) when async when the callback is invoked several times without an error should emit a single "error" event'
V1.4.2,1.0.0,1.4.2,'Runnable(title, fn) .run(fn) when async when the callback is invoked several times with an error should emit a single "error" event'
V1.4.2,1.0.0,1.4.2,'Runnable(title, fn) .run(fn) when async when an exception is thrown should invoke the callback'
V1.4.2,1.0.0,1.4.2,'Runnable(title, fn) .run(fn) when async when an error is passed should invoke the callback'
V1.4.2,1.0.0,1.4.2,'global leaks should pass with wildcard'
V1.4.2,1.0.1,1.4.2,'Suite .eachTest(fn) when there are no nested suites or tests should return 0'
V1.4.2,1.0.1,1.4.2,'Suite .eachTest(fn) when there are several tests in the suite should return the number'
V1.4.2,1.0.1,1.4.2,'Suite .eachTest(fn) when there are several levels of nested suites should return the number'
V1.4.2,1.0.1,1.4.2,'Runner .grep() should update the runner.total with number of matched tests'
V1.4.2,1.0.1,1.4.2,'Runner .grep() should update the runner.total with number of matched tests when inverted'
V1.4.2,1.0.1,1.4.2,'Runner .grepTotal() should return the total number of matched tests'
V1.4.2,1.0.1,1.4.2,'Runner .grepTotal() should return the total number of matched tests when inverted'
V1.4.2,1.0.1,1.4.2,'Runner .checkGlobals(test) should allow variables that match a wildcard'
V1.4.2,1.0.1,1.4.2,'Runner .checkGlobals(test) should allow variables that match a wildcard'
V1.4.2,1.0.1,1.4.2,'Runner .checkGlobals(test) should emit "fail" when a new global is introduced'
V1.4.2,1.0.1,1.4.2,'Runner .checkGlobals(test) should pluralize the error message when several are introduced'
V1.4.2,1.0.1,1.4.2,'Runner .checkGlobals(test) should pluralize the error message when several are introduced'
V1.4.2,1.0.1,1.4.2,'Runnable(title, fn) .run(fn) when .pending should not invoke the callback'
V1.4.2,1.0.1,1.4.2,'Runnable(title, fn) .run(fn) when sync without error should invoke the callback'
V1.4.2,1.0.1,1.4.2,'Runnable(title, fn) .run(fn) when sync when an exception is thrown should invoke the callback'
V1.4.2,1.0.1,1.4.2,'Runnable(title, fn) .run(fn) when async without error should invoke the callback'
V1.4.2,1.0.1,1.4.2,'Runnable(title, fn) .run(fn) when async when the callback is invoked several times without an error should emit a single "error" event'
V1.4.2,1.0.1,1.4.2,'Runnable(title, fn) .run(fn) when async when the callback is invoked several times with an error should emit a single "error" event'
V1.4.2,1.0.1,1.4.2,'Runnable(title, fn) .run(fn) when async when an exception is thrown should invoke the callback'
V1.4.2,1.0.1,1.4.2,'Runnable(title, fn) .run(fn) when async when an error is passed should invoke the callback'
V1.4.2,1.0.1,1.4.2,'global leaks should pass with wildcard'
V1.4.2,1.0.2,1.4.2,'Runner .grep() should update the runner.total with number of matched tests when inverted'
V1.4.2,1.0.2,1.4.2,'Runner .grepTotal() should return the total number of matched tests when inverted'
V1.4.2,1.0.2,1.4.2,'Runner .checkGlobals(test) should allow variables that match a wildcard'
V1.4.2,1.0.2,1.4.2,'Runner .checkGlobals(test) should allow variables that match a wildcard'
V1.4.2,1.0.2,1.4.2,'Runner .checkGlobals(test) should emit "fail" when a new global is introduced'
V1.4.2,1.0.2,1.4.2,'Runner .checkGlobals(test) should pluralize the error message when several are introduced'
V1.4.2,1.0.2,1.4.2,'Runner .checkGlobals(test) should pluralize the error message when several are introduced'
V1.4.2,1.0.2,1.4.2,'Runnable(title, fn) .run(fn) when .pending should not invoke the callback'
V1.4.2,1.0.2,1.4.2,'Runnable(title, fn) .run(fn) when sync without error should invoke the callback'
V1.4.2,1.0.2,1.4.2,'Runnable(title, fn) .run(fn) when sync when an exception is thrown should invoke the callback'
V1.4.2,1.0.2,1.4.2,'Runnable(title, fn) .run(fn) when async without error should invoke the callback'
V1.4.2,1.0.2,1.4.2,'Runnable(title, fn) .run(fn) when async when the callback is invoked several times without an error should emit a single "error" event'
V1.4.2,1.0.2,1.4.2,'Runnable(title, fn) .run(fn) when async when the callback is invoked several times with an error should emit a single "error" event'
V1.4.2,1.0.2,1.4.2,'Runnable(title, fn) .run(fn) when async when an exception is thrown should invoke the callback'
V1.4.2,1.0.2,1.4.2,'Runnable(title, fn) .run(fn) when async when an error is passed should invoke the callback'
V1.4.2,1.0.2,1.4.2,'global leaks should pass with wildcard'
V1.4.2,1.0.3,1.4.2,'Runner .grep() should update the runner.total with number of matched tests when inverted'
V1.4.2,1.0.3,1.4.2,'Runner .grepTotal() should return the total number of matched tests when inverted'
V1.4.2,1.0.3,1.4.2,'Runner .checkGlobals(test) should allow variables that match a wildcard'
V1.4.2,1.0.3,1.4.2,'Runner .checkGlobals(test) should allow variables that match a wildcard'
V1.4.2,1.0.3,1.4.2,'Runner .checkGlobals(test) should emit "fail" when a new global is introduced'
V1.4.2,1.0.3,1.4.2,'Runner .checkGlobals(test) should pluralize the error message when several are introduced'
V1.4.2,1.0.3,1.4.2,'Runner .checkGlobals(test) should pluralize the error message when several are introduced'
V1.4.2,1.0.3,1.4.2,'Runnable(title, fn) .run(fn) when .pending should not invoke the callback'
V1.4.2,1.0.3,1.4.2,'Runnable(title, fn) .run(fn) when sync without error should invoke the callback'
V1.4.2,1.0.3,1.4.2,'Runnable(title, fn) .run(fn) when sync when an exception is thrown should invoke the callback'
V1.4.2,1.0.3,1.4.2,'Runnable(title, fn) .run(fn) when async without error should invoke the callback'
V1.4.2,1.0.3,1.4.2,'Runnable(title, fn) .run(fn) when async when the callback is invoked several times without an error should emit a single "error" event'
V1.4.2,1.0.3,1.4.2,'Runnable(title, fn) .run(fn) when async when the callback is invoked several times with an error should emit a single "error" event'
V1.4.2,1.0.3,1.4.2,'Runnable(title, fn) .run(fn) when async when an exception is thrown should invoke the callback'
V1.4.2,1.0.3,1.4.2,'Runnable(title, fn) .run(fn) when async when an error is passed should invoke the callback'
V1.4.2,1.0.3,1.4.2,'global leaks should pass with wildcard'
V1.4.2,1.1.0,1.4.2,'Runner .grep() should update the runner.total with number of matched tests when inverted'
V1.4.2,1.1.0,1.4.2,'Runner .grepTotal() should return the total number of matched tests when inverted'
V1.4.2,1.1.0,1.4.2,'Runner .checkGlobals(test) should allow variables that match a wildcard'
V1.4.2,1.1.0,1.4.2,'Runner .checkGlobals(test) should allow variables that match a wildcard'
V1.4.2,1.1.0,1.4.2,'Runner .checkGlobals(test) should emit "fail" when a new global is introduced'
V1.4.2,1.1.0,1.4.2,'Runner .checkGlobals(test) should pluralize the error message when several are introduced'
V1.4.2,1.1.0,1.4.2,'Runner .checkGlobals(test) should pluralize the error message when several are introduced'
V1.4.2,1.1.0,1.4.2,'Runnable(title, fn) .run(fn) when async when the callback is invoked several times with an error should emit a single "error" event'
V1.4.2,1.1.0,1.4.2,'global leaks should pass with wildcard'
V1.4.2,1.2.0,1.4.2,'Runner .grep() should update the runner.total with number of matched tests when inverted'
V1.4.2,1.2.0,1.4.2,'Runner .grepTotal() should return the total number of matched tests when inverted'
V1.4.2,1.2.0,1.4.2,'Runnable(title, fn) .run(fn) when async when the callback is invoked several times with an error should emit a single "error" event'
V1.4.2,1.2.1,1.4.2,'Runner .grep() should update the runner.total with number of matched tests when inverted'
V1.4.2,1.2.1,1.4.2,'Runner .grepTotal() should return the total number of matched tests when inverted'
V1.4.2,1.2.1,1.4.2,'Runnable(title, fn) .run(fn) when async when the callback is invoked several times with an error should emit a single "error" event'
V1.4.2,1.2.2,1.4.2,'Runner .grep() should update the runner.total with number of matched tests when inverted'
V1.4.2,1.2.2,1.4.2,'Runner .grepTotal() should return the total number of matched tests when inverted'
V1.4.2,1.2.2,1.4.2,'Runnable(title, fn) .run(fn) when async when the callback is invoked several times with an error should emit a single "error" event'
V1.5.0,1.0.0,1.5.0,'Suite .clone() should copy the slow value'
V1.5.0,1.0.0,1.5.0,'Suite .slow() when given a string should parse it'
V1.5.0,1.0.0,1.5.0,'Suite .slow() when no argument is passed should return the slow value'
V1.5.0,1.0.0,1.5.0,'Suite .slow() when argument is passed should return the Suite object'
V1.5.0,1.0.0,1.5.0,'Suite .addSuite() "before each" hook'
V1.5.0,1.0.1,1.5.0,'Suite .clone() should copy the slow value'
V1.5.0,1.0.1,1.5.0,'Suite .slow() when given a string should parse it'
V1.5.0,1.0.1,1.5.0,'Suite .slow() when no argument is passed should return the slow value'
V1.5.0,1.0.1,1.5.0,'Suite .slow() when argument is passed should return the Suite object'
V1.5.0,1.0.1,1.5.0,'Suite .addSuite() "before each" hook'
V1.5.0,1.0.2,1.5.0,'Suite .clone() should copy the slow value'
V1.5.0,1.0.2,1.5.0,'Suite .slow() when given a string should parse it'
V1.5.0,1.0.2,1.5.0,'Suite .slow() when no argument is passed should return the slow value'
V1.5.0,1.0.2,1.5.0,'Suite .slow() when argument is passed should return the Suite object'
V1.5.0,1.0.2,1.5.0,'Suite .addSuite() "before each" hook'
V1.5.0,1.0.3,1.5.0,'Suite .clone() should copy the slow value'
V1.5.0,1.0.3,1.5.0,'Suite .slow() when given a string should parse it'
V1.5.0,1.0.3,1.5.0,'Suite .slow() when no argument is passed should return the slow value'
V1.5.0,1.0.3,1.5.0,'Suite .slow() when argument is passed should return the Suite object'
V1.5.0,1.0.3,1.5.0,'Suite .addSuite() "before each" hook'
V1.5.0,1.1.0,1.5.0,'Suite .clone() should copy the slow value'
V1.5.0,1.1.0,1.5.0,'Suite .slow() when given a string should parse it'
V1.5.0,1.1.0,1.5.0,'Suite .slow() when no argument is passed should return the slow value'
V1.5.0,1.1.0,1.5.0,'Suite .slow() when argument is passed should return the Suite object'
V1.5.0,1.1.0,1.5.0,'Suite .addSuite() "before each" hook'
V1.5.0,1.2.0,1.5.0,'Suite .clone() should copy the slow value'
V1.5.0,1.2.0,1.5.0,'Suite .slow() when given a string should parse it'
V1.5.0,1.2.0,1.5.0,'Suite .slow() when no argument is passed should return the slow value'
V1.5.0,1.2.0,1.5.0,'Suite .slow() when argument is passed should return the Suite object'
V1.5.0,1.2.0,1.5.0,'Suite .addSuite() "before each" hook'
V1.5.0,1.2.1,1.5.0,'Suite .clone() should copy the slow value'
V1.5.0,1.2.1,1.5.0,'Suite .slow() when given a string should parse it'
V1.5.0,1.2.1,1.5.0,'Suite .slow() when no argument is passed should return the slow value'
V1.5.0,1.2.1,1.5.0,'Suite .slow() when argument is passed should return the Suite object'
V1.5.0,1.2.1,1.5.0,'Suite .addSuite() "before each" hook'
V1.5.0,1.2.2,1.5.0,'Suite .clone() should copy the slow value'
V1.5.0,1.2.2,1.5.0,'Suite .slow() when given a string should parse it'
V1.5.0,1.2.2,1.5.0,'Suite .slow() when no argument is passed should return the slow value'
V1.5.0,1.2.2,1.5.0,'Suite .slow() when argument is passed should return the Suite object'
V1.5.0,1.2.2,1.5.0,'Suite .addSuite() "before each" hook'
V1.5.0,1.3.0,1.5.0,'Suite .clone() should copy the slow value'
V1.5.0,1.3.0,1.5.0,'Suite .slow() when given a string should parse it'
V1.5.0,1.3.0,1.5.0,'Suite .slow() when no argument is passed should return the slow value'
V1.5.0,1.3.0,1.5.0,'Suite .slow() when argument is passed should return the Suite object'
V1.5.0,1.3.0,1.5.0,'Suite .addSuite() "before each" hook'
V1.5.0,1.3.1,1.5.0,'Suite .clone() should copy the slow value'
V1.5.0,1.3.1,1.5.0,'Suite .slow() when given a string should parse it'
V1.5.0,1.3.1,1.5.0,'Suite .slow() when no argument is passed should return the slow value'
V1.5.0,1.3.1,1.5.0,'Suite .slow() when argument is passed should return the Suite object'
V1.5.0,1.3.1,1.5.0,'Suite .addSuite() "before each" hook'
V1.5.0,1.3.2,1.5.0,'Suite .clone() should copy the slow value'
V1.5.0,1.3.2,1.5.0,'Suite .slow() when given a string should parse it'
V1.5.0,1.3.2,1.5.0,'Suite .slow() when no argument is passed should return the slow value'
V1.5.0,1.3.2,1.5.0,'Suite .slow() when argument is passed should return the Suite object'
V1.5.0,1.3.2,1.5.0,'Suite .addSuite() "before each" hook'
V1.5.0,1.4.0,1.5.0,'Suite .clone() should copy the slow value'
V1.5.0,1.4.0,1.5.0,'Suite .slow() when given a string should parse it'
V1.5.0,1.4.0,1.5.0,'Suite .slow() when no argument is passed should return the slow value'
V1.5.0,1.4.0,1.5.0,'Suite .slow() when argument is passed should return the Suite object'
V1.5.0,1.4.0,1.5.0,'Suite .addSuite() "before each" hook'
V1.5.0,1.4.1,1.5.0,'Suite .clone() should copy the slow value'
V1.5.0,1.4.1,1.5.0,'Suite .slow() when given a string should parse it'
V1.5.0,1.4.1,1.5.0,'Suite .slow() when no argument is passed should return the slow value'
V1.5.0,1.4.1,1.5.0,'Suite .slow() when argument is passed should return the Suite object'
V1.5.0,1.4.1,1.5.0,'Suite .addSuite() "before each" hook'
V1.5.0,1.4.2,1.5.0,'Suite .clone() should copy the slow value'
V1.5.0,1.4.2,1.5.0,'Suite .slow() when given a string should parse it'
V1.5.0,1.4.2,1.5.0,'Suite .slow() when no argument is passed should return the slow value'
V1.5.0,1.4.2,1.5.0,'Suite .slow() when argument is passed should return the Suite object'
V1.5.0,1.4.2,1.5.0,'Suite .addSuite() "before each" hook'
V1.6.0,1.0.0,1.6.0,'Suite .clone() should copy the slow value'
V1.6.0,1.0.0,1.6.0,'Suite .slow() when given a string should parse it'
V1.6.0,1.0.0,1.6.0,'Suite .slow() when no argument is passed should return the slow value'
V1.6.0,1.0.0,1.6.0,'Suite .slow() when argument is passed should return the Suite object'
V1.6.0,1.0.0,1.6.0,'Suite .addSuite() "before each" hook'
V1.6.0,1.0.1,1.6.0,'Suite .clone() should copy the slow value'
V1.6.0,1.0.1,1.6.0,'Suite .slow() when given a string should parse it'
V1.6.0,1.0.1,1.6.0,'Suite .slow() when no argument is passed should return the slow value'
V1.6.0,1.0.1,1.6.0,'Suite .slow() when argument is passed should return the Suite object'
V1.6.0,1.0.1,1.6.0,'Suite .addSuite() "before each" hook'
V1.6.0,1.0.2,1.6.0,'Suite .clone() should copy the slow value'
V1.6.0,1.0.2,1.6.0,'Suite .slow() when given a string should parse it'
V1.6.0,1.0.2,1.6.0,'Suite .slow() when no argument is passed should return the slow value'
V1.6.0,1.0.2,1.6.0,'Suite .slow() when argument is passed should return the Suite object'
V1.6.0,1.0.2,1.6.0,'Suite .addSuite() "before each" hook'
V1.6.0,1.0.3,1.6.0,'Suite .clone() should copy the slow value'
V1.6.0,1.0.3,1.6.0,'Suite .slow() when given a string should parse it'
V1.6.0,1.0.3,1.6.0,'Suite .slow() when no argument is passed should return the slow value'
V1.6.0,1.0.3,1.6.0,'Suite .slow() when argument is passed should return the Suite object'
V1.6.0,1.0.3,1.6.0,'Suite .addSuite() "before each" hook'
V1.6.0,1.1.0,1.6.0,'Suite .clone() should copy the slow value'
V1.6.0,1.1.0,1.6.0,'Suite .slow() when given a string should parse it'
V1.6.0,1.1.0,1.6.0,'Suite .slow() when no argument is passed should return the slow value'
V1.6.0,1.1.0,1.6.0,'Suite .slow() when argument is passed should return the Suite object'
V1.6.0,1.1.0,1.6.0,'Suite .addSuite() "before each" hook'
V1.6.0,1.2.0,1.6.0,'Suite .clone() should copy the slow value'
V1.6.0,1.2.0,1.6.0,'Suite .slow() when given a string should parse it'
V1.6.0,1.2.0,1.6.0,'Suite .slow() when no argument is passed should return the slow value'
V1.6.0,1.2.0,1.6.0,'Suite .slow() when argument is passed should return the Suite object'
V1.6.0,1.2.0,1.6.0,'Suite .addSuite() "before each" hook'
V1.6.0,1.2.1,1.6.0,'Suite .clone() should copy the slow value'
V1.6.0,1.2.1,1.6.0,'Suite .slow() when given a string should parse it'
V1.6.0,1.2.1,1.6.0,'Suite .slow() when no argument is passed should return the slow value'
V1.6.0,1.2.1,1.6.0,'Suite .slow() when argument is passed should return the Suite object'
V1.6.0,1.2.1,1.6.0,'Suite .addSuite() "before each" hook'
V1.6.0,1.2.2,1.6.0,'Suite .clone() should copy the slow value'
V1.6.0,1.2.2,1.6.0,'Suite .slow() when given a string should parse it'
V1.6.0,1.2.2,1.6.0,'Suite .slow() when no argument is passed should return the slow value'
V1.6.0,1.2.2,1.6.0,'Suite .slow() when argument is passed should return the Suite object'
V1.6.0,1.2.2,1.6.0,'Suite .addSuite() "before each" hook'
V1.6.0,1.3.0,1.6.0,'Suite .clone() should copy the slow value'
V1.6.0,1.3.0,1.6.0,'Suite .slow() when given a string should parse it'
V1.6.0,1.3.0,1.6.0,'Suite .slow() when no argument is passed should return the slow value'
V1.6.0,1.3.0,1.6.0,'Suite .slow() when argument is passed should return the Suite object'
V1.6.0,1.3.0,1.6.0,'Suite .addSuite() "before each" hook'
V1.6.0,1.3.1,1.6.0,'Suite .clone() should copy the slow value'
V1.6.0,1.3.1,1.6.0,'Suite .slow() when given a string should parse it'
V1.6.0,1.3.1,1.6.0,'Suite .slow() when no argument is passed should return the slow value'
V1.6.0,1.3.1,1.6.0,'Suite .slow() when argument is passed should return the Suite object'
V1.6.0,1.3.1,1.6.0,'Suite .addSuite() "before each" hook'
V1.6.0,1.3.2,1.6.0,'Suite .clone() should copy the slow value'
V1.6.0,1.3.2,1.6.0,'Suite .slow() when given a string should parse it'
V1.6.0,1.3.2,1.6.0,'Suite .slow() when no argument is passed should return the slow value'
V1.6.0,1.3.2,1.6.0,'Suite .slow() when argument is passed should return the Suite object'
V1.6.0,1.3.2,1.6.0,'Suite .addSuite() "before each" hook'
V1.6.0,1.4.0,1.6.0,'Suite .clone() should copy the slow value'
V1.6.0,1.4.0,1.6.0,'Suite .slow() when given a string should parse it'
V1.6.0,1.4.0,1.6.0,'Suite .slow() when no argument is passed should return the slow value'
V1.6.0,1.4.0,1.6.0,'Suite .slow() when argument is passed should return the Suite object'
V1.6.0,1.4.0,1.6.0,'Suite .addSuite() "before each" hook'
V1.6.0,1.4.1,1.6.0,'Suite .clone() should copy the slow value'
V1.6.0,1.4.1,1.6.0,'Suite .slow() when given a string should parse it'
V1.6.0,1.4.1,1.6.0,'Suite .slow() when no argument is passed should return the slow value'
V1.6.0,1.4.1,1.6.0,'Suite .slow() when argument is passed should return the Suite object'
V1.6.0,1.4.1,1.6.0,'Suite .addSuite() "before each" hook'
V1.6.0,1.4.2,1.6.0,'Suite .clone() should copy the slow value'
V1.6.0,1.4.2,1.6.0,'Suite .slow() when given a string should parse it'
V1.6.0,1.4.2,1.6.0,'Suite .slow() when no argument is passed should return the slow value'
V1.6.0,1.4.2,1.6.0,'Suite .slow() when argument is passed should return the Suite object'
V1.6.0,1.4.2,1.6.0,'Suite .addSuite() "before each" hook'
V1.7.0,1.0.0,1.7.0,'Suite .clone() should copy the slow value'
V1.7.0,1.0.0,1.7.0,'Suite .slow() when given a string should parse it'
V1.7.0,1.0.0,1.7.0,'Suite .slow() when no argument is passed should return the slow value'
V1.7.0,1.0.0,1.7.0,'Suite .slow() when argument is passed should return the Suite object'
V1.7.0,1.0.0,1.7.0,'Suite .addSuite() "before each" hook'
V1.7.0,1.0.1,1.7.0,'Suite .clone() should copy the slow value'
V1.7.0,1.0.1,1.7.0,'Suite .slow() when given a string should parse it'
V1.7.0,1.0.1,1.7.0,'Suite .slow() when no argument is passed should return the slow value'
V1.7.0,1.0.1,1.7.0,'Suite .slow() when argument is passed should return the Suite object'
V1.7.0,1.0.1,1.7.0,'Suite .addSuite() "before each" hook'
V1.7.0,1.0.2,1.7.0,'Suite .clone() should copy the slow value'
V1.7.0,1.0.2,1.7.0,'Suite .slow() when given a string should parse it'
V1.7.0,1.0.2,1.7.0,'Suite .slow() when no argument is passed should return the slow value'
V1.7.0,1.0.2,1.7.0,'Suite .slow() when argument is passed should return the Suite object'
V1.7.0,1.0.2,1.7.0,'Suite .addSuite() "before each" hook'
V1.7.0,1.0.3,1.7.0,'Suite .clone() should copy the slow value'
V1.7.0,1.0.3,1.7.0,'Suite .slow() when given a string should parse it'
V1.7.0,1.0.3,1.7.0,'Suite .slow() when no argument is passed should return the slow value'
V1.7.0,1.0.3,1.7.0,'Suite .slow() when argument is passed should return the Suite object'
V1.7.0,1.0.3,1.7.0,'Suite .addSuite() "before each" hook'
V1.7.0,1.1.0,1.7.0,'Suite .clone() should copy the slow value'
V1.7.0,1.1.0,1.7.0,'Suite .slow() when given a string should parse it'
V1.7.0,1.1.0,1.7.0,'Suite .slow() when no argument is passed should return the slow value'
V1.7.0,1.1.0,1.7.0,'Suite .slow() when argument is passed should return the Suite object'
V1.7.0,1.1.0,1.7.0,'Suite .addSuite() "before each" hook'
V1.7.0,1.2.0,1.7.0,'Suite .clone() should copy the slow value'
V1.7.0,1.2.0,1.7.0,'Suite .slow() when given a string should parse it'
V1.7.0,1.2.0,1.7.0,'Suite .slow() when no argument is passed should return the slow value'
V1.7.0,1.2.0,1.7.0,'Suite .slow() when argument is passed should return the Suite object'
V1.7.0,1.2.0,1.7.0,'Suite .addSuite() "before each" hook'
V1.7.0,1.2.1,1.7.0,'Suite .clone() should copy the slow value'
V1.7.0,1.2.1,1.7.0,'Suite .slow() when given a string should parse it'
V1.7.0,1.2.1,1.7.0,'Suite .slow() when no argument is passed should return the slow value'
V1.7.0,1.2.1,1.7.0,'Suite .slow() when argument is passed should return the Suite object'
V1.7.0,1.2.1,1.7.0,'Suite .addSuite() "before each" hook'
V1.7.0,1.2.2,1.7.0,'Suite .clone() should copy the slow value'
V1.7.0,1.2.2,1.7.0,'Suite .slow() when given a string should parse it'
V1.7.0,1.2.2,1.7.0,'Suite .slow() when no argument is passed should return the slow value'
V1.7.0,1.2.2,1.7.0,'Suite .slow() when argument is passed should return the Suite object'
V1.7.0,1.2.2,1.7.0,'Suite .addSuite() "before each" hook'
V1.7.0,1.3.0,1.7.0,'Suite .clone() should copy the slow value'
V1.7.0,1.3.0,1.7.0,'Suite .slow() when given a string should parse it'
V1.7.0,1.3.0,1.7.0,'Suite .slow() when no argument is passed should return the slow value'
V1.7.0,1.3.0,1.7.0,'Suite .slow() when argument is passed should return the Suite object'
V1.7.0,1.3.0,1.7.0,'Suite .addSuite() "before each" hook'
V1.7.0,1.3.1,1.7.0,'Suite .clone() should copy the slow value'
V1.7.0,1.3.1,1.7.0,'Suite .slow() when given a string should parse it'
V1.7.0,1.3.1,1.7.0,'Suite .slow() when no argument is passed should return the slow value'
V1.7.0,1.3.1,1.7.0,'Suite .slow() when argument is passed should return the Suite object'
V1.7.0,1.3.1,1.7.0,'Suite .addSuite() "before each" hook'
V1.7.0,1.3.2,1.7.0,'Suite .clone() should copy the slow value'
V1.7.0,1.3.2,1.7.0,'Suite .slow() when given a string should parse it'
V1.7.0,1.3.2,1.7.0,'Suite .slow() when no argument is passed should return the slow value'
V1.7.0,1.3.2,1.7.0,'Suite .slow() when argument is passed should return the Suite object'
V1.7.0,1.3.2,1.7.0,'Suite .addSuite() "before each" hook'
V1.7.0,1.4.0,1.7.0,'Suite .clone() should copy the slow value'
V1.7.0,1.4.0,1.7.0,'Suite .slow() when given a string should parse it'
V1.7.0,1.4.0,1.7.0,'Suite .slow() when no argument is passed should return the slow value'
V1.7.0,1.4.0,1.7.0,'Suite .slow() when argument is passed should return the Suite object'
V1.7.0,1.4.0,1.7.0,'Suite .addSuite() "before each" hook'
V1.7.0,1.4.1,1.7.0,'Suite .clone() should copy the slow value'
V1.7.0,1.4.1,1.7.0,'Suite .slow() when given a string should parse it'
V1.7.0,1.4.1,1.7.0,'Suite .slow() when no argument is passed should return the slow value'
V1.7.0,1.4.1,1.7.0,'Suite .slow() when argument is passed should return the Suite object'
V1.7.0,1.4.1,1.7.0,'Suite .addSuite() "before each" hook'
V1.7.0,1.4.2,1.7.0,'Suite .clone() should copy the slow value'
V1.7.0,1.4.2,1.7.0,'Suite .slow() when given a string should parse it'
V1.7.0,1.4.2,1.7.0,'Suite .slow() when no argument is passed should return the slow value'
V1.7.0,1.4.2,1.7.0,'Suite .slow() when argument is passed should return the Suite object'
V1.7.0,1.4.2,1.7.0,'Suite .addSuite() "before each" hook'
V1.7.0,1.5.0,1.7.0,'Runner .globalProps() should include common non enumerable globals'
V1.7.0,1.5.0,1.7.0,'global leaks should pass when prefixed "mocha-"'
V1.7.0,1.6.0,1.7.0,'Runner .globalProps() should include common non enumerable globals'
V1.7.0,1.6.0,1.7.0,'global leaks should pass when prefixed "mocha-"'
V1.7.1,1.0.0,1.7.1,'Suite .clone() should copy the slow value'
V1.7.1,1.0.0,1.7.1,'Suite .slow() when given a string should parse it'
V1.7.1,1.0.0,1.7.1,'Suite .slow() when no argument is passed should return the slow value'
V1.7.1,1.0.0,1.7.1,'Suite .slow() when argument is passed should return the Suite object'
V1.7.1,1.0.0,1.7.1,'Suite .addSuite() "before each" hook'
V1.7.1,1.0.1,1.7.1,'Suite .clone() should copy the slow value'
V1.7.1,1.0.1,1.7.1,'Suite .slow() when given a string should parse it'
V1.7.1,1.0.1,1.7.1,'Suite .slow() when no argument is passed should return the slow value'
V1.7.1,1.0.1,1.7.1,'Suite .slow() when argument is passed should return the Suite object'
V1.7.1,1.0.1,1.7.1,'Suite .addSuite() "before each" hook'
V1.7.1,1.0.2,1.7.1,'Suite .clone() should copy the slow value'
V1.7.1,1.0.2,1.7.1,'Suite .slow() when given a string should parse it'
V1.7.1,1.0.2,1.7.1,'Suite .slow() when no argument is passed should return the slow value'
V1.7.1,1.0.2,1.7.1,'Suite .slow() when argument is passed should return the Suite object'
V1.7.1,1.0.2,1.7.1,'Suite .addSuite() "before each" hook'
V1.7.1,1.0.3,1.7.1,'Suite .clone() should copy the slow value'
V1.7.1,1.0.3,1.7.1,'Suite .slow() when given a string should parse it'
V1.7.1,1.0.3,1.7.1,'Suite .slow() when no argument is passed should return the slow value'
V1.7.1,1.0.3,1.7.1,'Suite .slow() when argument is passed should return the Suite object'
V1.7.1,1.0.3,1.7.1,'Suite .addSuite() "before each" hook'
V1.7.1,1.1.0,1.7.1,'Suite .clone() should copy the slow value'
V1.7.1,1.1.0,1.7.1,'Suite .slow() when given a string should parse it'
V1.7.1,1.1.0,1.7.1,'Suite .slow() when no argument is passed should return the slow value'
V1.7.1,1.1.0,1.7.1,'Suite .slow() when argument is passed should return the Suite object'
V1.7.1,1.1.0,1.7.1,'Suite .addSuite() "before each" hook'
V1.7.1,1.2.0,1.7.1,'Suite .clone() should copy the slow value'
V1.7.1,1.2.0,1.7.1,'Suite .slow() when given a string should parse it'
V1.7.1,1.2.0,1.7.1,'Suite .slow() when no argument is passed should return the slow value'
V1.7.1,1.2.0,1.7.1,'Suite .slow() when argument is passed should return the Suite object'
V1.7.1,1.2.0,1.7.1,'Suite .addSuite() "before each" hook'
V1.7.1,1.2.1,1.7.1,'Suite .clone() should copy the slow value'
V1.7.1,1.2.1,1.7.1,'Suite .slow() when given a string should parse it'
V1.7.1,1.2.1,1.7.1,'Suite .slow() when no argument is passed should return the slow value'
V1.7.1,1.2.1,1.7.1,'Suite .slow() when argument is passed should return the Suite object'
V1.7.1,1.2.1,1.7.1,'Suite .addSuite() "before each" hook'
V1.7.1,1.2.2,1.7.1,'Suite .clone() should copy the slow value'
V1.7.1,1.2.2,1.7.1,'Suite .slow() when given a string should parse it'
V1.7.1,1.2.2,1.7.1,'Suite .slow() when no argument is passed should return the slow value'
V1.7.1,1.2.2,1.7.1,'Suite .slow() when argument is passed should return the Suite object'
V1.7.1,1.2.2,1.7.1,'Suite .addSuite() "before each" hook'
V1.7.1,1.3.0,1.7.1,'Suite .clone() should copy the slow value'
V1.7.1,1.3.0,1.7.1,'Suite .slow() when given a string should parse it'
V1.7.1,1.3.0,1.7.1,'Suite .slow() when no argument is passed should return the slow value'
V1.7.1,1.3.0,1.7.1,'Suite .slow() when argument is passed should return the Suite object'
V1.7.1,1.3.0,1.7.1,'Suite .addSuite() "before each" hook'
V1.7.1,1.3.1,1.7.1,'Suite .clone() should copy the slow value'
V1.7.1,1.3.1,1.7.1,'Suite .slow() when given a string should parse it'
V1.7.1,1.3.1,1.7.1,'Suite .slow() when no argument is passed should return the slow value'
V1.7.1,1.3.1,1.7.1,'Suite .slow() when argument is passed should return the Suite object'
V1.7.1,1.3.1,1.7.1,'Suite .addSuite() "before each" hook'
V1.7.1,1.3.2,1.7.1,'Suite .clone() should copy the slow value'
V1.7.1,1.3.2,1.7.1,'Suite .slow() when given a string should parse it'
V1.7.1,1.3.2,1.7.1,'Suite .slow() when no argument is passed should return the slow value'
V1.7.1,1.3.2,1.7.1,'Suite .slow() when argument is passed should return the Suite object'
V1.7.1,1.3.2,1.7.1,'Suite .addSuite() "before each" hook'
V1.7.1,1.4.0,1.7.1,'Suite .clone() should copy the slow value'
V1.7.1,1.4.0,1.7.1,'Suite .slow() when given a string should parse it'
V1.7.1,1.4.0,1.7.1,'Suite .slow() when no argument is passed should return the slow value'
V1.7.1,1.4.0,1.7.1,'Suite .slow() when argument is passed should return the Suite object'
V1.7.1,1.4.0,1.7.1,'Suite .addSuite() "before each" hook'
V1.7.1,1.4.1,1.7.1,'Suite .clone() should copy the slow value'
V1.7.1,1.4.1,1.7.1,'Suite .slow() when given a string should parse it'
V1.7.1,1.4.1,1.7.1,'Suite .slow() when no argument is passed should return the slow value'
V1.7.1,1.4.1,1.7.1,'Suite .slow() when argument is passed should return the Suite object'
V1.7.1,1.4.1,1.7.1,'Suite .addSuite() "before each" hook'
V1.7.1,1.4.2,1.7.1,'Suite .clone() should copy the slow value'
V1.7.1,1.4.2,1.7.1,'Suite .slow() when given a string should parse it'
V1.7.1,1.4.2,1.7.1,'Suite .slow() when no argument is passed should return the slow value'
V1.7.1,1.4.2,1.7.1,'Suite .slow() when argument is passed should return the Suite object'
V1.7.1,1.4.2,1.7.1,'Suite .addSuite() "before each" hook'
V1.7.1,1.5.0,1.7.1,'Runner .globalProps() should include common non enumerable globals'
V1.7.1,1.5.0,1.7.1,'global leaks should pass when prefixed "mocha-"'
V1.7.1,1.6.0,1.7.1,'Runner .globalProps() should include common non enumerable globals'
V1.7.1,1.6.0,1.7.1,'global leaks should pass when prefixed "mocha-"'
V1.7.2,1.0.0,1.7.2,'Suite .clone() should copy the slow value'
V1.7.2,1.0.0,1.7.2,'Suite .slow() when given a string should parse it'
V1.7.2,1.0.0,1.7.2,'Suite .slow() when no argument is passed should return the slow value'
V1.7.2,1.0.0,1.7.2,'Suite .slow() when argument is passed should return the Suite object'
V1.7.2,1.0.0,1.7.2,'Suite .addSuite() "before each" hook'
V1.7.2,1.0.1,1.7.2,'Suite .clone() should copy the slow value'
V1.7.2,1.0.1,1.7.2,'Suite .slow() when given a string should parse it'
V1.7.2,1.0.1,1.7.2,'Suite .slow() when no argument is passed should return the slow value'
V1.7.2,1.0.1,1.7.2,'Suite .slow() when argument is passed should return the Suite object'
V1.7.2,1.0.1,1.7.2,'Suite .addSuite() "before each" hook'
V1.7.2,1.0.2,1.7.2,'Suite .clone() should copy the slow value'
V1.7.2,1.0.2,1.7.2,'Suite .slow() when given a string should parse it'
V1.7.2,1.0.2,1.7.2,'Suite .slow() when no argument is passed should return the slow value'
V1.7.2,1.0.2,1.7.2,'Suite .slow() when argument is passed should return the Suite object'
V1.7.2,1.0.2,1.7.2,'Suite .addSuite() "before each" hook'
V1.7.2,1.0.3,1.7.2,'Suite .clone() should copy the slow value'
V1.7.2,1.0.3,1.7.2,'Suite .slow() when given a string should parse it'
V1.7.2,1.0.3,1.7.2,'Suite .slow() when no argument is passed should return the slow value'
V1.7.2,1.0.3,1.7.2,'Suite .slow() when argument is passed should return the Suite object'
V1.7.2,1.0.3,1.7.2,'Suite .addSuite() "before each" hook'
V1.7.2,1.1.0,1.7.2,'Suite .clone() should copy the slow value'
V1.7.2,1.1.0,1.7.2,'Suite .slow() when given a string should parse it'
V1.7.2,1.1.0,1.7.2,'Suite .slow() when no argument is passed should return the slow value'
V1.7.2,1.1.0,1.7.2,'Suite .slow() when argument is passed should return the Suite object'
V1.7.2,1.1.0,1.7.2,'Suite .addSuite() "before each" hook'
V1.7.2,1.2.0,1.7.2,'Suite .clone() should copy the slow value'
V1.7.2,1.2.0,1.7.2,'Suite .slow() when given a string should parse it'
V1.7.2,1.2.0,1.7.2,'Suite .slow() when no argument is passed should return the slow value'
V1.7.2,1.2.0,1.7.2,'Suite .slow() when argument is passed should return the Suite object'
V1.7.2,1.2.0,1.7.2,'Suite .addSuite() "before each" hook'
V1.7.2,1.2.1,1.7.2,'Suite .clone() should copy the slow value'
V1.7.2,1.2.1,1.7.2,'Suite .slow() when given a string should parse it'
V1.7.2,1.2.1,1.7.2,'Suite .slow() when no argument is passed should return the slow value'
V1.7.2,1.2.1,1.7.2,'Suite .slow() when argument is passed should return the Suite object'
V1.7.2,1.2.1,1.7.2,'Suite .addSuite() "before each" hook'
V1.7.2,1.2.2,1.7.2,'Suite .clone() should copy the slow value'
V1.7.2,1.2.2,1.7.2,'Suite .slow() when given a string should parse it'
V1.7.2,1.2.2,1.7.2,'Suite .slow() when no argument is passed should return the slow value'
V1.7.2,1.2.2,1.7.2,'Suite .slow() when argument is passed should return the Suite object'
V1.7.2,1.2.2,1.7.2,'Suite .addSuite() "before each" hook'
V1.7.2,1.3.0,1.7.2,'Suite .clone() should copy the slow value'
V1.7.2,1.3.0,1.7.2,'Suite .slow() when given a string should parse it'
V1.7.2,1.3.0,1.7.2,'Suite .slow() when no argument is passed should return the slow value'
V1.7.2,1.3.0,1.7.2,'Suite .slow() when argument is passed should return the Suite object'
V1.7.2,1.3.0,1.7.2,'Suite .addSuite() "before each" hook'
V1.7.2,1.3.1,1.7.2,'Suite .clone() should copy the slow value'
V1.7.2,1.3.1,1.7.2,'Suite .slow() when given a string should parse it'
V1.7.2,1.3.1,1.7.2,'Suite .slow() when no argument is passed should return the slow value'
V1.7.2,1.3.1,1.7.2,'Suite .slow() when argument is passed should return the Suite object'
V1.7.2,1.3.1,1.7.2,'Suite .addSuite() "before each" hook'
V1.7.2,1.3.2,1.7.2,'Suite .clone() should copy the slow value'
V1.7.2,1.3.2,1.7.2,'Suite .slow() when given a string should parse it'
V1.7.2,1.3.2,1.7.2,'Suite .slow() when no argument is passed should return the slow value'
V1.7.2,1.3.2,1.7.2,'Suite .slow() when argument is passed should return the Suite object'
V1.7.2,1.3.2,1.7.2,'Suite .addSuite() "before each" hook'
V1.7.2,1.4.0,1.7.2,'Suite .clone() should copy the slow value'
V1.7.2,1.4.0,1.7.2,'Suite .slow() when given a string should parse it'
V1.7.2,1.4.0,1.7.2,'Suite .slow() when no argument is passed should return the slow value'
V1.7.2,1.4.0,1.7.2,'Suite .slow() when argument is passed should return the Suite object'
V1.7.2,1.4.0,1.7.2,'Suite .addSuite() "before each" hook'
V1.7.2,1.4.1,1.7.2,'Suite .clone() should copy the slow value'
V1.7.2,1.4.1,1.7.2,'Suite .slow() when given a string should parse it'
V1.7.2,1.4.1,1.7.2,'Suite .slow() when no argument is passed should return the slow value'
V1.7.2,1.4.1,1.7.2,'Suite .slow() when argument is passed should return the Suite object'
V1.7.2,1.4.1,1.7.2,'Suite .addSuite() "before each" hook'
V1.7.2,1.4.2,1.7.2,'Suite .clone() should copy the slow value'
V1.7.2,1.4.2,1.7.2,'Suite .slow() when given a string should parse it'
V1.7.2,1.4.2,1.7.2,'Suite .slow() when no argument is passed should return the slow value'
V1.7.2,1.4.2,1.7.2,'Suite .slow() when argument is passed should return the Suite object'
V1.7.2,1.4.2,1.7.2,'Suite .addSuite() "before each" hook'
V1.7.2,1.5.0,1.7.2,'Runner .globalProps() should include common non enumerable globals'
V1.7.2,1.5.0,1.7.2,'global leaks should pass when prefixed "mocha-"'
V1.7.2,1.6.0,1.7.2,'Runner .globalProps() should include common non enumerable globals'
V1.7.2,1.6.0,1.7.2,'global leaks should pass when prefixed "mocha-"'
V1.7.3,1.0.0,1.7.3,'Suite .clone() should copy the slow value'
V1.7.3,1.0.0,1.7.3,'Suite .slow() when given a string should parse it'
V1.7.3,1.0.0,1.7.3,'Suite .slow() when no argument is passed should return the slow value'
V1.7.3,1.0.0,1.7.3,'Suite .slow() when argument is passed should return the Suite object'
V1.7.3,1.0.0,1.7.3,'Suite .addSuite() "before each" hook'
V1.7.3,1.0.1,1.7.3,'Suite .clone() should copy the slow value'
V1.7.3,1.0.1,1.7.3,'Suite .slow() when given a string should parse it'
V1.7.3,1.0.1,1.7.3,'Suite .slow() when no argument is passed should return the slow value'
V1.7.3,1.0.1,1.7.3,'Suite .slow() when argument is passed should return the Suite object'
V1.7.3,1.0.1,1.7.3,'Suite .addSuite() "before each" hook'
V1.7.3,1.0.2,1.7.3,'Suite .clone() should copy the slow value'
V1.7.3,1.0.2,1.7.3,'Suite .slow() when given a string should parse it'
V1.7.3,1.0.2,1.7.3,'Suite .slow() when no argument is passed should return the slow value'
V1.7.3,1.0.2,1.7.3,'Suite .slow() when argument is passed should return the Suite object'
V1.7.3,1.0.2,1.7.3,'Suite .addSuite() "before each" hook'
V1.7.3,1.0.3,1.7.3,'Suite .clone() should copy the slow value'
V1.7.3,1.0.3,1.7.3,'Suite .slow() when given a string should parse it'
V1.7.3,1.0.3,1.7.3,'Suite .slow() when no argument is passed should return the slow value'
V1.7.3,1.0.3,1.7.3,'Suite .slow() when argument is passed should return the Suite object'
V1.7.3,1.0.3,1.7.3,'Suite .addSuite() "before each" hook'
V1.7.3,1.1.0,1.7.3,'Suite .clone() should copy the slow value'
V1.7.3,1.1.0,1.7.3,'Suite .slow() when given a string should parse it'
V1.7.3,1.1.0,1.7.3,'Suite .slow() when no argument is passed should return the slow value'
V1.7.3,1.1.0,1.7.3,'Suite .slow() when argument is passed should return the Suite object'
V1.7.3,1.1.0,1.7.3,'Suite .addSuite() "before each" hook'
V1.7.3,1.2.0,1.7.3,'Suite .clone() should copy the slow value'
V1.7.3,1.2.0,1.7.3,'Suite .slow() when given a string should parse it'
V1.7.3,1.2.0,1.7.3,'Suite .slow() when no argument is passed should return the slow value'
V1.7.3,1.2.0,1.7.3,'Suite .slow() when argument is passed should return the Suite object'
V1.7.3,1.2.0,1.7.3,'Suite .addSuite() "before each" hook'
V1.7.3,1.2.1,1.7.3,'Suite .clone() should copy the slow value'
V1.7.3,1.2.1,1.7.3,'Suite .slow() when given a string should parse it'
V1.7.3,1.2.1,1.7.3,'Suite .slow() when no argument is passed should return the slow value'
V1.7.3,1.2.1,1.7.3,'Suite .slow() when argument is passed should return the Suite object'
V1.7.3,1.2.1,1.7.3,'Suite .addSuite() "before each" hook'
V1.7.3,1.2.2,1.7.3,'Suite .clone() should copy the slow value'
V1.7.3,1.2.2,1.7.3,'Suite .slow() when given a string should parse it'
V1.7.3,1.2.2,1.7.3,'Suite .slow() when no argument is passed should return the slow value'
V1.7.3,1.2.2,1.7.3,'Suite .slow() when argument is passed should return the Suite object'
V1.7.3,1.2.2,1.7.3,'Suite .addSuite() "before each" hook'
V1.7.3,1.3.0,1.7.3,'Suite .clone() should copy the slow value'
V1.7.3,1.3.0,1.7.3,'Suite .slow() when given a string should parse it'
V1.7.3,1.3.0,1.7.3,'Suite .slow() when no argument is passed should return the slow value'
V1.7.3,1.3.0,1.7.3,'Suite .slow() when argument is passed should return the Suite object'
V1.7.3,1.3.0,1.7.3,'Suite .addSuite() "before each" hook'
V1.7.3,1.3.1,1.7.3,'Suite .clone() should copy the slow value'
V1.7.3,1.3.1,1.7.3,'Suite .slow() when given a string should parse it'
V1.7.3,1.3.1,1.7.3,'Suite .slow() when no argument is passed should return the slow value'
V1.7.3,1.3.1,1.7.3,'Suite .slow() when argument is passed should return the Suite object'
V1.7.3,1.3.1,1.7.3,'Suite .addSuite() "before each" hook'
V1.7.3,1.3.2,1.7.3,'Suite .clone() should copy the slow value'
V1.7.3,1.3.2,1.7.3,'Suite .slow() when given a string should parse it'
V1.7.3,1.3.2,1.7.3,'Suite .slow() when no argument is passed should return the slow value'
V1.7.3,1.3.2,1.7.3,'Suite .slow() when argument is passed should return the Suite object'
V1.7.3,1.3.2,1.7.3,'Suite .addSuite() "before each" hook'
V1.7.3,1.4.0,1.7.3,'Suite .clone() should copy the slow value'
V1.7.3,1.4.0,1.7.3,'Suite .slow() when given a string should parse it'
V1.7.3,1.4.0,1.7.3,'Suite .slow() when no argument is passed should return the slow value'
V1.7.3,1.4.0,1.7.3,'Suite .slow() when argument is passed should return the Suite object'
V1.7.3,1.4.0,1.7.3,'Suite .addSuite() "before each" hook'
V1.7.3,1.4.1,1.7.3,'Suite .clone() should copy the slow value'
V1.7.3,1.4.1,1.7.3,'Suite .slow() when given a string should parse it'
V1.7.3,1.4.1,1.7.3,'Suite .slow() when no argument is passed should return the slow value'
V1.7.3,1.4.1,1.7.3,'Suite .slow() when argument is passed should return the Suite object'
V1.7.3,1.4.1,1.7.3,'Suite .addSuite() "before each" hook'
V1.7.3,1.4.2,1.7.3,'Suite .clone() should copy the slow value'
V1.7.3,1.4.2,1.7.3,'Suite .slow() when given a string should parse it'
V1.7.3,1.4.2,1.7.3,'Suite .slow() when no argument is passed should return the slow value'
V1.7.3,1.4.2,1.7.3,'Suite .slow() when argument is passed should return the Suite object'
V1.7.3,1.4.2,1.7.3,'Suite .addSuite() "before each" hook'
V1.7.3,1.5.0,1.7.3,'Runner .globalProps() should include common non enumerable globals'
V1.7.3,1.5.0,1.7.3,'global leaks should pass when prefixed "mocha-"'
V1.7.3,1.6.0,1.7.3,'Runner .globalProps() should include common non enumerable globals'
V1.7.3,1.6.0,1.7.3,'global leaks should pass when prefixed "mocha-"'
V1.7.4,1.0.0,1.7.4,'Suite .clone() should copy the slow value'
V1.7.4,1.0.0,1.7.4,'Suite .slow() when given a string should parse it'
V1.7.4,1.0.0,1.7.4,'Suite .slow() when no argument is passed should return the slow value'
V1.7.4,1.0.0,1.7.4,'Suite .slow() when argument is passed should return the Suite object'
V1.7.4,1.0.0,1.7.4,'Suite .addSuite() "before each" hook'
V1.7.4,1.0.1,1.7.4,'Suite .clone() should copy the slow value'
V1.7.4,1.0.1,1.7.4,'Suite .slow() when given a string should parse it'
V1.7.4,1.0.1,1.7.4,'Suite .slow() when no argument is passed should return the slow value'
V1.7.4,1.0.1,1.7.4,'Suite .slow() when argument is passed should return the Suite object'
V1.7.4,1.0.1,1.7.4,'Suite .addSuite() "before each" hook'
V1.7.4,1.0.2,1.7.4,'Suite .clone() should copy the slow value'
V1.7.4,1.0.2,1.7.4,'Suite .slow() when given a string should parse it'
V1.7.4,1.0.2,1.7.4,'Suite .slow() when no argument is passed should return the slow value'
V1.7.4,1.0.2,1.7.4,'Suite .slow() when argument is passed should return the Suite object'
V1.7.4,1.0.2,1.7.4,'Suite .addSuite() "before each" hook'
V1.7.4,1.0.3,1.7.4,'Suite .clone() should copy the slow value'
V1.7.4,1.0.3,1.7.4,'Suite .slow() when given a string should parse it'
V1.7.4,1.0.3,1.7.4,'Suite .slow() when no argument is passed should return the slow value'
V1.7.4,1.0.3,1.7.4,'Suite .slow() when argument is passed should return the Suite object'
V1.7.4,1.0.3,1.7.4,'Suite .addSuite() "before each" hook'
V1.7.4,1.1.0,1.7.4,'Suite .clone() should copy the slow value'
V1.7.4,1.1.0,1.7.4,'Suite .slow() when given a string should parse it'
V1.7.4,1.1.0,1.7.4,'Suite .slow() when no argument is passed should return the slow value'
V1.7.4,1.1.0,1.7.4,'Suite .slow() when argument is passed should return the Suite object'
V1.7.4,1.1.0,1.7.4,'Suite .addSuite() "before each" hook'
V1.7.4,1.2.0,1.7.4,'Suite .clone() should copy the slow value'
V1.7.4,1.2.0,1.7.4,'Suite .slow() when given a string should parse it'
V1.7.4,1.2.0,1.7.4,'Suite .slow() when no argument is passed should return the slow value'
V1.7.4,1.2.0,1.7.4,'Suite .slow() when argument is passed should return the Suite object'
V1.7.4,1.2.0,1.7.4,'Suite .addSuite() "before each" hook'
V1.7.4,1.2.1,1.7.4,'Suite .clone() should copy the slow value'
V1.7.4,1.2.1,1.7.4,'Suite .slow() when given a string should parse it'
V1.7.4,1.2.1,1.7.4,'Suite .slow() when no argument is passed should return the slow value'
V1.7.4,1.2.1,1.7.4,'Suite .slow() when argument is passed should return the Suite object'
V1.7.4,1.2.1,1.7.4,'Suite .addSuite() "before each" hook'
V1.7.4,1.2.2,1.7.4,'Suite .clone() should copy the slow value'
V1.7.4,1.2.2,1.7.4,'Suite .slow() when given a string should parse it'
V1.7.4,1.2.2,1.7.4,'Suite .slow() when no argument is passed should return the slow value'
V1.7.4,1.2.2,1.7.4,'Suite .slow() when argument is passed should return the Suite object'
V1.7.4,1.2.2,1.7.4,'Suite .addSuite() "before each" hook'
V1.7.4,1.3.0,1.7.4,'Suite .clone() should copy the slow value'
V1.7.4,1.3.0,1.7.4,'Suite .slow() when given a string should parse it'
V1.7.4,1.3.0,1.7.4,'Suite .slow() when no argument is passed should return the slow value'
V1.7.4,1.3.0,1.7.4,'Suite .slow() when argument is passed should return the Suite object'
V1.7.4,1.3.0,1.7.4,'Suite .addSuite() "before each" hook'
V1.7.4,1.3.1,1.7.4,'Suite .clone() should copy the slow value'
V1.7.4,1.3.1,1.7.4,'Suite .slow() when given a string should parse it'
V1.7.4,1.3.1,1.7.4,'Suite .slow() when no argument is passed should return the slow value'
V1.7.4,1.3.1,1.7.4,'Suite .slow() when argument is passed should return the Suite object'
V1.7.4,1.3.1,1.7.4,'Suite .addSuite() "before each" hook'
V1.7.4,1.3.2,1.7.4,'Suite .clone() should copy the slow value'
V1.7.4,1.3.2,1.7.4,'Suite .slow() when given a string should parse it'
V1.7.4,1.3.2,1.7.4,'Suite .slow() when no argument is passed should return the slow value'
V1.7.4,1.3.2,1.7.4,'Suite .slow() when argument is passed should return the Suite object'
V1.7.4,1.3.2,1.7.4,'Suite .addSuite() "before each" hook'
V1.7.4,1.4.0,1.7.4,'Suite .clone() should copy the slow value'
V1.7.4,1.4.0,1.7.4,'Suite .slow() when given a string should parse it'
V1.7.4,1.4.0,1.7.4,'Suite .slow() when no argument is passed should return the slow value'
V1.7.4,1.4.0,1.7.4,'Suite .slow() when argument is passed should return the Suite object'
V1.7.4,1.4.0,1.7.4,'Suite .addSuite() "before each" hook'
V1.7.4,1.4.1,1.7.4,'Suite .clone() should copy the slow value'
V1.7.4,1.4.1,1.7.4,'Suite .slow() when given a string should parse it'
V1.7.4,1.4.1,1.7.4,'Suite .slow() when no argument is passed should return the slow value'
V1.7.4,1.4.1,1.7.4,'Suite .slow() when argument is passed should return the Suite object'
V1.7.4,1.4.1,1.7.4,'Suite .addSuite() "before each" hook'
V1.7.4,1.4.2,1.7.4,'Suite .clone() should copy the slow value'
V1.7.4,1.4.2,1.7.4,'Suite .slow() when given a string should parse it'
V1.7.4,1.4.2,1.7.4,'Suite .slow() when no argument is passed should return the slow value'
V1.7.4,1.4.2,1.7.4,'Suite .slow() when argument is passed should return the Suite object'
V1.7.4,1.4.2,1.7.4,'Suite .addSuite() "before each" hook'
V1.7.4,1.5.0,1.7.4,'Runner .globalProps() should include common non enumerable globals'
V1.7.4,1.5.0,1.7.4,'global leaks should pass when prefixed "mocha-"'
V1.7.4,1.6.0,1.7.4,'Runner .globalProps() should include common non enumerable globals'
V1.7.4,1.6.0,1.7.4,'global leaks should pass when prefixed "mocha-"'
V1.8.0,1.0.0,1.8.0,'Suite .clone() should copy the slow value'
V1.8.0,1.0.0,1.8.0,'Suite .slow() when given a string should parse it'
V1.8.0,1.0.0,1.8.0,'Suite .slow() when no argument is passed should return the slow value'
V1.8.0,1.0.0,1.8.0,'Suite .slow() when argument is passed should return the Suite object'
V1.8.0,1.0.0,1.8.0,'Suite .addSuite() "before each" hook'
V1.8.0,1.0.1,1.8.0,'Suite .clone() should copy the slow value'
V1.8.0,1.0.1,1.8.0,'Suite .slow() when given a string should parse it'
V1.8.0,1.0.1,1.8.0,'Suite .slow() when no argument is passed should return the slow value'
V1.8.0,1.0.1,1.8.0,'Suite .slow() when argument is passed should return the Suite object'
V1.8.0,1.0.1,1.8.0,'Suite .addSuite() "before each" hook'
V1.8.0,1.0.2,1.8.0,'Suite .clone() should copy the slow value'
V1.8.0,1.0.2,1.8.0,'Suite .slow() when given a string should parse it'
V1.8.0,1.0.2,1.8.0,'Suite .slow() when no argument is passed should return the slow value'
V1.8.0,1.0.2,1.8.0,'Suite .slow() when argument is passed should return the Suite object'
V1.8.0,1.0.2,1.8.0,'Suite .addSuite() "before each" hook'
V1.8.0,1.0.3,1.8.0,'Suite .clone() should copy the slow value'
V1.8.0,1.0.3,1.8.0,'Suite .slow() when given a string should parse it'
V1.8.0,1.0.3,1.8.0,'Suite .slow() when no argument is passed should return the slow value'
V1.8.0,1.0.3,1.8.0,'Suite .slow() when argument is passed should return the Suite object'
V1.8.0,1.0.3,1.8.0,'Suite .addSuite() "before each" hook'
V1.8.0,1.1.0,1.8.0,'Suite .clone() should copy the slow value'
V1.8.0,1.1.0,1.8.0,'Suite .slow() when given a string should parse it'
V1.8.0,1.1.0,1.8.0,'Suite .slow() when no argument is passed should return the slow value'
V1.8.0,1.1.0,1.8.0,'Suite .slow() when argument is passed should return the Suite object'
V1.8.0,1.1.0,1.8.0,'Suite .addSuite() "before each" hook'
V1.8.0,1.2.0,1.8.0,'Suite .clone() should copy the slow value'
V1.8.0,1.2.0,1.8.0,'Suite .slow() when given a string should parse it'
V1.8.0,1.2.0,1.8.0,'Suite .slow() when no argument is passed should return the slow value'
V1.8.0,1.2.0,1.8.0,'Suite .slow() when argument is passed should return the Suite object'
V1.8.0,1.2.0,1.8.0,'Suite .addSuite() "before each" hook'
V1.8.0,1.2.1,1.8.0,'Suite .clone() should copy the slow value'
V1.8.0,1.2.1,1.8.0,'Suite .slow() when given a string should parse it'
V1.8.0,1.2.1,1.8.0,'Suite .slow() when no argument is passed should return the slow value'
V1.8.0,1.2.1,1.8.0,'Suite .slow() when argument is passed should return the Suite object'
V1.8.0,1.2.1,1.8.0,'Suite .addSuite() "before each" hook'
V1.8.0,1.2.2,1.8.0,'Suite .clone() should copy the slow value'
V1.8.0,1.2.2,1.8.0,'Suite .slow() when given a string should parse it'
V1.8.0,1.2.2,1.8.0,'Suite .slow() when no argument is passed should return the slow value'
V1.8.0,1.2.2,1.8.0,'Suite .slow() when argument is passed should return the Suite object'
V1.8.0,1.2.2,1.8.0,'Suite .addSuite() "before each" hook'
V1.8.0,1.3.0,1.8.0,'Suite .clone() should copy the slow value'
V1.8.0,1.3.0,1.8.0,'Suite .slow() when given a string should parse it'
V1.8.0,1.3.0,1.8.0,'Suite .slow() when no argument is passed should return the slow value'
V1.8.0,1.3.0,1.8.0,'Suite .slow() when argument is passed should return the Suite object'
V1.8.0,1.3.0,1.8.0,'Suite .addSuite() "before each" hook'
V1.8.0,1.3.1,1.8.0,'Suite .clone() should copy the slow value'
V1.8.0,1.3.1,1.8.0,'Suite .slow() when given a string should parse it'
V1.8.0,1.3.1,1.8.0,'Suite .slow() when no argument is passed should return the slow value'
V1.8.0,1.3.1,1.8.0,'Suite .slow() when argument is passed should return the Suite object'
V1.8.0,1.3.1,1.8.0,'Suite .addSuite() "before each" hook'
V1.8.0,1.3.2,1.8.0,'Suite .clone() should copy the slow value'
V1.8.0,1.3.2,1.8.0,'Suite .slow() when given a string should parse it'
V1.8.0,1.3.2,1.8.0,'Suite .slow() when no argument is passed should return the slow value'
V1.8.0,1.3.2,1.8.0,'Suite .slow() when argument is passed should return the Suite object'
V1.8.0,1.3.2,1.8.0,'Suite .addSuite() "before each" hook'
V1.8.0,1.4.0,1.8.0,'Suite .clone() should copy the slow value'
V1.8.0,1.4.0,1.8.0,'Suite .slow() when given a string should parse it'
V1.8.0,1.4.0,1.8.0,'Suite .slow() when no argument is passed should return the slow value'
V1.8.0,1.4.0,1.8.0,'Suite .slow() when argument is passed should return the Suite object'
V1.8.0,1.4.0,1.8.0,'Suite .addSuite() "before each" hook'
V1.8.0,1.4.1,1.8.0,'Suite .clone() should copy the slow value'
V1.8.0,1.4.1,1.8.0,'Suite .slow() when given a string should parse it'
V1.8.0,1.4.1,1.8.0,'Suite .slow() when no argument is passed should return the slow value'
V1.8.0,1.4.1,1.8.0,'Suite .slow() when argument is passed should return the Suite object'
V1.8.0,1.4.1,1.8.0,'Suite .addSuite() "before each" hook'
V1.8.0,1.4.2,1.8.0,'Suite .clone() should copy the slow value'
V1.8.0,1.4.2,1.8.0,'Suite .slow() when given a string should parse it'
V1.8.0,1.4.2,1.8.0,'Suite .slow() when no argument is passed should return the slow value'
V1.8.0,1.4.2,1.8.0,'Suite .slow() when argument is passed should return the Suite object'
V1.8.0,1.4.2,1.8.0,'Suite .addSuite() "before each" hook'
V1.8.0,1.5.0,1.8.0,'Runner .globalProps() should include common non enumerable globals'
V1.8.0,1.5.0,1.8.0,'global leaks should pass when prefixed "mocha-"'
V1.8.0,1.6.0,1.8.0,'Runner .globalProps() should include common non enumerable globals'
V1.8.0,1.6.0,1.8.0,'global leaks should pass when prefixed "mocha-"'
V1.8.1,1.0.0,1.8.1,'Suite .clone() should copy the slow value'
V1.8.1,1.0.0,1.8.1,'Suite .slow() when given a string should parse it'
V1.8.1,1.0.0,1.8.1,'Suite .slow() when no argument is passed should return the slow value'
V1.8.1,1.0.0,1.8.1,'Suite .slow() when argument is passed should return the Suite object'
V1.8.1,1.0.0,1.8.1,'Suite .addSuite() "before each" hook'
V1.8.1,1.0.1,1.8.1,'Suite .clone() should copy the slow value'
V1.8.1,1.0.1,1.8.1,'Suite .slow() when given a string should parse it'
V1.8.1,1.0.1,1.8.1,'Suite .slow() when no argument is passed should return the slow value'
V1.8.1,1.0.1,1.8.1,'Suite .slow() when argument is passed should return the Suite object'
V1.8.1,1.0.1,1.8.1,'Suite .addSuite() "before each" hook'
V1.8.1,1.0.2,1.8.1,'Suite .clone() should copy the slow value'
V1.8.1,1.0.2,1.8.1,'Suite .slow() when given a string should parse it'
V1.8.1,1.0.2,1.8.1,'Suite .slow() when no argument is passed should return the slow value'
V1.8.1,1.0.2,1.8.1,'Suite .slow() when argument is passed should return the Suite object'
V1.8.1,1.0.2,1.8.1,'Suite .addSuite() "before each" hook'
V1.8.1,1.0.3,1.8.1,'Suite .clone() should copy the slow value'
V1.8.1,1.0.3,1.8.1,'Suite .slow() when given a string should parse it'
V1.8.1,1.0.3,1.8.1,'Suite .slow() when no argument is passed should return the slow value'
V1.8.1,1.0.3,1.8.1,'Suite .slow() when argument is passed should return the Suite object'
V1.8.1,1.0.3,1.8.1,'Suite .addSuite() "before each" hook'
V1.8.1,1.1.0,1.8.1,'Suite .clone() should copy the slow value'
V1.8.1,1.1.0,1.8.1,'Suite .slow() when given a string should parse it'
V1.8.1,1.1.0,1.8.1,'Suite .slow() when no argument is passed should return the slow value'
V1.8.1,1.1.0,1.8.1,'Suite .slow() when argument is passed should return the Suite object'
V1.8.1,1.1.0,1.8.1,'Suite .addSuite() "before each" hook'
V1.8.1,1.2.0,1.8.1,'Suite .clone() should copy the slow value'
V1.8.1,1.2.0,1.8.1,'Suite .slow() when given a string should parse it'
V1.8.1,1.2.0,1.8.1,'Suite .slow() when no argument is passed should return the slow value'
V1.8.1,1.2.0,1.8.1,'Suite .slow() when argument is passed should return the Suite object'
V1.8.1,1.2.0,1.8.1,'Suite .addSuite() "before each" hook'
V1.8.1,1.2.1,1.8.1,'Suite .clone() should copy the slow value'
V1.8.1,1.2.1,1.8.1,'Suite .slow() when given a string should parse it'
V1.8.1,1.2.1,1.8.1,'Suite .slow() when no argument is passed should return the slow value'
V1.8.1,1.2.1,1.8.1,'Suite .slow() when argument is passed should return the Suite object'
V1.8.1,1.2.1,1.8.1,'Suite .addSuite() "before each" hook'
V1.8.1,1.2.2,1.8.1,'Suite .clone() should copy the slow value'
V1.8.1,1.2.2,1.8.1,'Suite .slow() when given a string should parse it'
V1.8.1,1.2.2,1.8.1,'Suite .slow() when no argument is passed should return the slow value'
V1.8.1,1.2.2,1.8.1,'Suite .slow() when argument is passed should return the Suite object'
V1.8.1,1.2.2,1.8.1,'Suite .addSuite() "before each" hook'
V1.8.1,1.3.0,1.8.1,'Suite .clone() should copy the slow value'
V1.8.1,1.3.0,1.8.1,'Suite .slow() when given a string should parse it'
V1.8.1,1.3.0,1.8.1,'Suite .slow() when no argument is passed should return the slow value'
V1.8.1,1.3.0,1.8.1,'Suite .slow() when argument is passed should return the Suite object'
V1.8.1,1.3.0,1.8.1,'Suite .addSuite() "before each" hook'
V1.8.1,1.3.1,1.8.1,'Suite .clone() should copy the slow value'
V1.8.1,1.3.1,1.8.1,'Suite .slow() when given a string should parse it'
V1.8.1,1.3.1,1.8.1,'Suite .slow() when no argument is passed should return the slow value'
V1.8.1,1.3.1,1.8.1,'Suite .slow() when argument is passed should return the Suite object'
V1.8.1,1.3.1,1.8.1,'Suite .addSuite() "before each" hook'
V1.8.1,1.3.2,1.8.1,'Suite .clone() should copy the slow value'
V1.8.1,1.3.2,1.8.1,'Suite .slow() when given a string should parse it'
V1.8.1,1.3.2,1.8.1,'Suite .slow() when no argument is passed should return the slow value'
V1.8.1,1.3.2,1.8.1,'Suite .slow() when argument is passed should return the Suite object'
V1.8.1,1.3.2,1.8.1,'Suite .addSuite() "before each" hook'
V1.8.1,1.4.0,1.8.1,'Suite .clone() should copy the slow value'
V1.8.1,1.4.0,1.8.1,'Suite .slow() when given a string should parse it'
V1.8.1,1.4.0,1.8.1,'Suite .slow() when no argument is passed should return the slow value'
V1.8.1,1.4.0,1.8.1,'Suite .slow() when argument is passed should return the Suite object'
V1.8.1,1.4.0,1.8.1,'Suite .addSuite() "before each" hook'
V1.8.1,1.4.1,1.8.1,'Suite .clone() should copy the slow value'
V1.8.1,1.4.1,1.8.1,'Suite .slow() when given a string should parse it'
V1.8.1,1.4.1,1.8.1,'Suite .slow() when no argument is passed should return the slow value'
V1.8.1,1.4.1,1.8.1,'Suite .slow() when argument is passed should return the Suite object'
V1.8.1,1.4.1,1.8.1,'Suite .addSuite() "before each" hook'
V1.8.1,1.4.2,1.8.1,'Suite .clone() should copy the slow value'
V1.8.1,1.4.2,1.8.1,'Suite .slow() when given a string should parse it'
V1.8.1,1.4.2,1.8.1,'Suite .slow() when no argument is passed should return the slow value'
V1.8.1,1.4.2,1.8.1,'Suite .slow() when argument is passed should return the Suite object'
V1.8.1,1.4.2,1.8.1,'Suite .addSuite() "before each" hook'
V1.8.1,1.5.0,1.8.1,'Runner .globalProps() should include common non enumerable globals'
V1.8.1,1.5.0,1.8.1,'global leaks should pass when prefixed "mocha-"'
V1.8.1,1.6.0,1.8.1,'Runner .globalProps() should include common non enumerable globals'
V1.8.1,1.6.0,1.8.1,'global leaks should pass when prefixed "mocha-"'
V1.8.2,1.0.0,1.8.2,'Suite .clone() should copy the slow value'
V1.8.2,1.0.0,1.8.2,'Suite .slow() when given a string should parse it'
V1.8.2,1.0.0,1.8.2,'Suite .slow() when no argument is passed should return the slow value'
V1.8.2,1.0.0,1.8.2,'Suite .slow() when argument is passed should return the Suite object'
V1.8.2,1.0.0,1.8.2,'Suite .addSuite() "before each" hook'
V1.8.2,1.0.1,1.8.2,'Suite .clone() should copy the slow value'
V1.8.2,1.0.1,1.8.2,'Suite .slow() when given a string should parse it'
V1.8.2,1.0.1,1.8.2,'Suite .slow() when no argument is passed should return the slow value'
V1.8.2,1.0.1,1.8.2,'Suite .slow() when argument is passed should return the Suite object'
V1.8.2,1.0.1,1.8.2,'Suite .addSuite() "before each" hook'
V1.8.2,1.0.2,1.8.2,'Suite .clone() should copy the slow value'
V1.8.2,1.0.2,1.8.2,'Suite .slow() when given a string should parse it'
V1.8.2,1.0.2,1.8.2,'Suite .slow() when no argument is passed should return the slow value'
V1.8.2,1.0.2,1.8.2,'Suite .slow() when argument is passed should return the Suite object'
V1.8.2,1.0.2,1.8.2,'Suite .addSuite() "before each" hook'
V1.8.2,1.0.3,1.8.2,'Suite .clone() should copy the slow value'
V1.8.2,1.0.3,1.8.2,'Suite .slow() when given a string should parse it'
V1.8.2,1.0.3,1.8.2,'Suite .slow() when no argument is passed should return the slow value'
V1.8.2,1.0.3,1.8.2,'Suite .slow() when argument is passed should return the Suite object'
V1.8.2,1.0.3,1.8.2,'Suite .addSuite() "before each" hook'
V1.8.2,1.1.0,1.8.2,'Suite .clone() should copy the slow value'
V1.8.2,1.1.0,1.8.2,'Suite .slow() when given a string should parse it'
V1.8.2,1.1.0,1.8.2,'Suite .slow() when no argument is passed should return the slow value'
V1.8.2,1.1.0,1.8.2,'Suite .slow() when argument is passed should return the Suite object'
V1.8.2,1.1.0,1.8.2,'Suite .addSuite() "before each" hook'
V1.8.2,1.2.0,1.8.2,'Suite .clone() should copy the slow value'
V1.8.2,1.2.0,1.8.2,'Suite .slow() when given a string should parse it'
V1.8.2,1.2.0,1.8.2,'Suite .slow() when no argument is passed should return the slow value'
V1.8.2,1.2.0,1.8.2,'Suite .slow() when argument is passed should return the Suite object'
V1.8.2,1.2.0,1.8.2,'Suite .addSuite() "before each" hook'
V1.8.2,1.2.1,1.8.2,'Suite .clone() should copy the slow value'
V1.8.2,1.2.1,1.8.2,'Suite .slow() when given a string should parse it'
V1.8.2,1.2.1,1.8.2,'Suite .slow() when no argument is passed should return the slow value'
V1.8.2,1.2.1,1.8.2,'Suite .slow() when argument is passed should return the Suite object'
V1.8.2,1.2.1,1.8.2,'Suite .addSuite() "before each" hook'
V1.8.2,1.2.2,1.8.2,'Suite .clone() should copy the slow value'
V1.8.2,1.2.2,1.8.2,'Suite .slow() when given a string should parse it'
V1.8.2,1.2.2,1.8.2,'Suite .slow() when no argument is passed should return the slow value'
V1.8.2,1.2.2,1.8.2,'Suite .slow() when argument is passed should return the Suite object'
V1.8.2,1.2.2,1.8.2,'Suite .addSuite() "before each" hook'
V1.8.2,1.3.0,1.8.2,'Suite .clone() should copy the slow value'
V1.8.2,1.3.0,1.8.2,'Suite .slow() when given a string should parse it'
V1.8.2,1.3.0,1.8.2,'Suite .slow() when no argument is passed should return the slow value'
V1.8.2,1.3.0,1.8.2,'Suite .slow() when argument is passed should return the Suite object'
V1.8.2,1.3.0,1.8.2,'Suite .addSuite() "before each" hook'
V1.8.2,1.3.1,1.8.2,'Suite .clone() should copy the slow value'
V1.8.2,1.3.1,1.8.2,'Suite .slow() when given a string should parse it'
V1.8.2,1.3.1,1.8.2,'Suite .slow() when no argument is passed should return the slow value'
V1.8.2,1.3.1,1.8.2,'Suite .slow() when argument is passed should return the Suite object'
V1.8.2,1.3.1,1.8.2,'Suite .addSuite() "before each" hook'
V1.8.2,1.3.2,1.8.2,'Suite .clone() should copy the slow value'
V1.8.2,1.3.2,1.8.2,'Suite .slow() when given a string should parse it'
V1.8.2,1.3.2,1.8.2,'Suite .slow() when no argument is passed should return the slow value'
V1.8.2,1.3.2,1.8.2,'Suite .slow() when argument is passed should return the Suite object'
V1.8.2,1.3.2,1.8.2,'Suite .addSuite() "before each" hook'
V1.8.2,1.4.0,1.8.2,'Suite .clone() should copy the slow value'
V1.8.2,1.4.0,1.8.2,'Suite .slow() when given a string should parse it'
V1.8.2,1.4.0,1.8.2,'Suite .slow() when no argument is passed should return the slow value'
V1.8.2,1.4.0,1.8.2,'Suite .slow() when argument is passed should return the Suite object'
V1.8.2,1.4.0,1.8.2,'Suite .addSuite() "before each" hook'
V1.8.2,1.4.1,1.8.2,'Suite .clone() should copy the slow value'
V1.8.2,1.4.1,1.8.2,'Suite .slow() when given a string should parse it'
V1.8.2,1.4.1,1.8.2,'Suite .slow() when no argument is passed should return the slow value'
V1.8.2,1.4.1,1.8.2,'Suite .slow() when argument is passed should return the Suite object'
V1.8.2,1.4.1,1.8.2,'Suite .addSuite() "before each" hook'
V1.8.2,1.4.2,1.8.2,'Suite .clone() should copy the slow value'
V1.8.2,1.4.2,1.8.2,'Suite .slow() when given a string should parse it'
V1.8.2,1.4.2,1.8.2,'Suite .slow() when no argument is passed should return the slow value'
V1.8.2,1.4.2,1.8.2,'Suite .slow() when argument is passed should return the Suite object'
V1.8.2,1.4.2,1.8.2,'Suite .addSuite() "before each" hook'
V1.8.2,1.5.0,1.8.2,'Runner .globalProps() should include common non enumerable globals'
V1.8.2,1.5.0,1.8.2,'global leaks should pass when prefixed "mocha-"'
V1.8.2,1.6.0,1.8.2,'Runner .globalProps() should include common non enumerable globals'
V1.8.2,1.6.0,1.8.2,'global leaks should pass when prefixed "mocha-"'
V1.9.0,1.0.0,1.9.0,'Suite .clone() should copy the slow value'
V1.9.0,1.0.0,1.9.0,'Suite .slow() when given a string should parse it'
V1.9.0,1.0.0,1.9.0,'Suite .slow() when no argument is passed should return the slow value'
V1.9.0,1.0.0,1.9.0,'Suite .slow() when argument is passed should return the Suite object'
V1.9.0,1.0.0,1.9.0,'Suite .addSuite() "before each" hook'
V1.9.0,1.0.1,1.9.0,'Suite .clone() should copy the slow value'
V1.9.0,1.0.1,1.9.0,'Suite .slow() when given a string should parse it'
V1.9.0,1.0.1,1.9.0,'Suite .slow() when no argument is passed should return the slow value'
V1.9.0,1.0.1,1.9.0,'Suite .slow() when argument is passed should return the Suite object'
V1.9.0,1.0.1,1.9.0,'Suite .addSuite() "before each" hook'
V1.9.0,1.0.2,1.9.0,'Suite .clone() should copy the slow value'
V1.9.0,1.0.2,1.9.0,'Suite .slow() when given a string should parse it'
V1.9.0,1.0.2,1.9.0,'Suite .slow() when no argument is passed should return the slow value'
V1.9.0,1.0.2,1.9.0,'Suite .slow() when argument is passed should return the Suite object'
V1.9.0,1.0.2,1.9.0,'Suite .addSuite() "before each" hook'
V1.9.0,1.0.3,1.9.0,'Suite .clone() should copy the slow value'
V1.9.0,1.0.3,1.9.0,'Suite .slow() when given a string should parse it'
V1.9.0,1.0.3,1.9.0,'Suite .slow() when no argument is passed should return the slow value'
V1.9.0,1.0.3,1.9.0,'Suite .slow() when argument is passed should return the Suite object'
V1.9.0,1.0.3,1.9.0,'Suite .addSuite() "before each" hook'
V1.9.0,1.1.0,1.9.0,'Suite .clone() should copy the slow value'
V1.9.0,1.1.0,1.9.0,'Suite .slow() when given a string should parse it'
V1.9.0,1.1.0,1.9.0,'Suite .slow() when no argument is passed should return the slow value'
V1.9.0,1.1.0,1.9.0,'Suite .slow() when argument is passed should return the Suite object'
V1.9.0,1.1.0,1.9.0,'Suite .addSuite() "before each" hook'
V1.9.0,1.2.0,1.9.0,'Suite .clone() should copy the slow value'
V1.9.0,1.2.0,1.9.0,'Suite .slow() when given a string should parse it'
V1.9.0,1.2.0,1.9.0,'Suite .slow() when no argument is passed should return the slow value'
V1.9.0,1.2.0,1.9.0,'Suite .slow() when argument is passed should return the Suite object'
V1.9.0,1.2.0,1.9.0,'Suite .addSuite() "before each" hook'
V1.9.0,1.2.1,1.9.0,'Suite .clone() should copy the slow value'
V1.9.0,1.2.1,1.9.0,'Suite .slow() when given a string should parse it'
V1.9.0,1.2.1,1.9.0,'Suite .slow() when no argument is passed should return the slow value'
V1.9.0,1.2.1,1.9.0,'Suite .slow() when argument is passed should return the Suite object'
V1.9.0,1.2.1,1.9.0,'Suite .addSuite() "before each" hook'
V1.9.0,1.2.2,1.9.0,'Suite .clone() should copy the slow value'
V1.9.0,1.2.2,1.9.0,'Suite .slow() when given a string should parse it'
V1.9.0,1.2.2,1.9.0,'Suite .slow() when no argument is passed should return the slow value'
V1.9.0,1.2.2,1.9.0,'Suite .slow() when argument is passed should return the Suite object'
V1.9.0,1.2.2,1.9.0,'Suite .addSuite() "before each" hook'
V1.9.0,1.3.0,1.9.0,'Suite .clone() should copy the slow value'
V1.9.0,1.3.0,1.9.0,'Suite .slow() when given a string should parse it'
V1.9.0,1.3.0,1.9.0,'Suite .slow() when no argument is passed should return the slow value'
V1.9.0,1.3.0,1.9.0,'Suite .slow() when argument is passed should return the Suite object'
V1.9.0,1.3.0,1.9.0,'Suite .addSuite() "before each" hook'
V1.9.0,1.3.1,1.9.0,'Suite .clone() should copy the slow value'
V1.9.0,1.3.1,1.9.0,'Suite .slow() when given a string should parse it'
V1.9.0,1.3.1,1.9.0,'Suite .slow() when no argument is passed should return the slow value'
V1.9.0,1.3.1,1.9.0,'Suite .slow() when argument is passed should return the Suite object'
V1.9.0,1.3.1,1.9.0,'Suite .addSuite() "before each" hook'
V1.9.0,1.3.2,1.9.0,'Suite .clone() should copy the slow value'
V1.9.0,1.3.2,1.9.0,'Suite .slow() when given a string should parse it'
V1.9.0,1.3.2,1.9.0,'Suite .slow() when no argument is passed should return the slow value'
V1.9.0,1.3.2,1.9.0,'Suite .slow() when argument is passed should return the Suite object'
V1.9.0,1.3.2,1.9.0,'Suite .addSuite() "before each" hook'
V1.9.0,1.4.0,1.9.0,'Suite .clone() should copy the slow value'
V1.9.0,1.4.0,1.9.0,'Suite .slow() when given a string should parse it'
V1.9.0,1.4.0,1.9.0,'Suite .slow() when no argument is passed should return the slow value'
V1.9.0,1.4.0,1.9.0,'Suite .slow() when argument is passed should return the Suite object'
V1.9.0,1.4.0,1.9.0,'Suite .addSuite() "before each" hook'
V1.9.0,1.4.1,1.9.0,'Suite .clone() should copy the slow value'
V1.9.0,1.4.1,1.9.0,'Suite .slow() when given a string should parse it'
V1.9.0,1.4.1,1.9.0,'Suite .slow() when no argument is passed should return the slow value'
V1.9.0,1.4.1,1.9.0,'Suite .slow() when argument is passed should return the Suite object'
V1.9.0,1.4.1,1.9.0,'Suite .addSuite() "before each" hook'
V1.9.0,1.4.2,1.9.0,'Suite .clone() should copy the slow value'
V1.9.0,1.4.2,1.9.0,'Suite .slow() when given a string should parse it'
V1.9.0,1.4.2,1.9.0,'Suite .slow() when no argument is passed should return the slow value'
V1.9.0,1.4.2,1.9.0,'Suite .slow() when argument is passed should return the Suite object'
V1.9.0,1.4.2,1.9.0,'Suite .addSuite() "before each" hook'
V1.9.0,1.5.0,1.9.0,'Runner .globalProps() should include common non enumerable globals'
V1.9.0,1.5.0,1.9.0,'global leaks should pass when prefixed "mocha-"'
V1.9.0,1.6.0,1.9.0,'Runner .globalProps() should include common non enumerable globals'
V1.9.0,1.6.0,1.9.0,'global leaks should pass when prefixed "mocha-"'
V1.10.0,1.0.0,1.10.0,'Suite .clone() should copy the slow value'
V1.10.0,1.0.0,1.10.0,'Suite .slow() when given a string should parse it'
V1.10.0,1.0.0,1.10.0,'Suite .slow() when no argument is passed should return the slow value'
V1.10.0,1.0.0,1.10.0,'Suite .slow() when argument is passed should return the Suite object'
V1.10.0,1.0.0,1.10.0,'Suite .addSuite() "before each" hook'
V1.10.0,1.0.1,1.10.0,'Suite .clone() should copy the slow value'
V1.10.0,1.0.1,1.10.0,'Suite .slow() when given a string should parse it'
V1.10.0,1.0.1,1.10.0,'Suite .slow() when no argument is passed should return the slow value'
V1.10.0,1.0.1,1.10.0,'Suite .slow() when argument is passed should return the Suite object'
V1.10.0,1.0.1,1.10.0,'Suite .addSuite() "before each" hook'
V1.10.0,1.0.2,1.10.0,'Suite .clone() should copy the slow value'
V1.10.0,1.0.2,1.10.0,'Suite .slow() when given a string should parse it'
V1.10.0,1.0.2,1.10.0,'Suite .slow() when no argument is passed should return the slow value'
V1.10.0,1.0.2,1.10.0,'Suite .slow() when argument is passed should return the Suite object'
V1.10.0,1.0.2,1.10.0,'Suite .addSuite() "before each" hook'
V1.10.0,1.0.3,1.10.0,'Suite .clone() should copy the slow value'
V1.10.0,1.0.3,1.10.0,'Suite .slow() when given a string should parse it'
V1.10.0,1.0.3,1.10.0,'Suite .slow() when no argument is passed should return the slow value'
V1.10.0,1.0.3,1.10.0,'Suite .slow() when argument is passed should return the Suite object'
V1.10.0,1.0.3,1.10.0,'Suite .addSuite() "before each" hook'
V1.10.0,1.1.0,1.10.0,'Suite .clone() should copy the slow value'
V1.10.0,1.1.0,1.10.0,'Suite .slow() when given a string should parse it'
V1.10.0,1.1.0,1.10.0,'Suite .slow() when no argument is passed should return the slow value'
V1.10.0,1.1.0,1.10.0,'Suite .slow() when argument is passed should return the Suite object'
V1.10.0,1.1.0,1.10.0,'Suite .addSuite() "before each" hook'
V1.10.0,1.2.0,1.10.0,'Suite .clone() should copy the slow value'
V1.10.0,1.2.0,1.10.0,'Suite .slow() when given a string should parse it'
V1.10.0,1.2.0,1.10.0,'Suite .slow() when no argument is passed should return the slow value'
V1.10.0,1.2.0,1.10.0,'Suite .slow() when argument is passed should return the Suite object'
V1.10.0,1.2.0,1.10.0,'Suite .addSuite() "before each" hook'
V1.10.0,1.2.1,1.10.0,'Suite .clone() should copy the slow value'
V1.10.0,1.2.1,1.10.0,'Suite .slow() when given a string should parse it'
V1.10.0,1.2.1,1.10.0,'Suite .slow() when no argument is passed should return the slow value'
V1.10.0,1.2.1,1.10.0,'Suite .slow() when argument is passed should return the Suite object'
V1.10.0,1.2.1,1.10.0,'Suite .addSuite() "before each" hook'
V1.10.0,1.2.2,1.10.0,'Suite .clone() should copy the slow value'
V1.10.0,1.2.2,1.10.0,'Suite .slow() when given a string should parse it'
V1.10.0,1.2.2,1.10.0,'Suite .slow() when no argument is passed should return the slow value'
V1.10.0,1.2.2,1.10.0,'Suite .slow() when argument is passed should return the Suite object'
V1.10.0,1.2.2,1.10.0,'Suite .addSuite() "before each" hook'
V1.10.0,1.3.0,1.10.0,'Suite .clone() should copy the slow value'
V1.10.0,1.3.0,1.10.0,'Suite .slow() when given a string should parse it'
V1.10.0,1.3.0,1.10.0,'Suite .slow() when no argument is passed should return the slow value'
V1.10.0,1.3.0,1.10.0,'Suite .slow() when argument is passed should return the Suite object'
V1.10.0,1.3.0,1.10.0,'Suite .addSuite() "before each" hook'
V1.10.0,1.3.1,1.10.0,'Suite .clone() should copy the slow value'
V1.10.0,1.3.1,1.10.0,'Suite .slow() when given a string should parse it'
V1.10.0,1.3.1,1.10.0,'Suite .slow() when no argument is passed should return the slow value'
V1.10.0,1.3.1,1.10.0,'Suite .slow() when argument is passed should return the Suite object'
V1.10.0,1.3.1,1.10.0,'Suite .addSuite() "before each" hook'
V1.10.0,1.3.2,1.10.0,'Suite .clone() should copy the slow value'
V1.10.0,1.3.2,1.10.0,'Suite .slow() when given a string should parse it'
V1.10.0,1.3.2,1.10.0,'Suite .slow() when no argument is passed should return the slow value'
V1.10.0,1.3.2,1.10.0,'Suite .slow() when argument is passed should return the Suite object'
V1.10.0,1.3.2,1.10.0,'Suite .addSuite() "before each" hook'
V1.10.0,1.4.0,1.10.0,'Suite .clone() should copy the slow value'
V1.10.0,1.4.0,1.10.0,'Suite .slow() when given a string should parse it'
V1.10.0,1.4.0,1.10.0,'Suite .slow() when no argument is passed should return the slow value'
V1.10.0,1.4.0,1.10.0,'Suite .slow() when argument is passed should return the Suite object'
V1.10.0,1.4.0,1.10.0,'Suite .addSuite() "before each" hook'
V1.10.0,1.4.1,1.10.0,'Suite .clone() should copy the slow value'
V1.10.0,1.4.1,1.10.0,'Suite .slow() when given a string should parse it'
V1.10.0,1.4.1,1.10.0,'Suite .slow() when no argument is passed should return the slow value'
V1.10.0,1.4.1,1.10.0,'Suite .slow() when argument is passed should return the Suite object'
V1.10.0,1.4.1,1.10.0,'Suite .addSuite() "before each" hook'
V1.10.0,1.4.2,1.10.0,'Suite .clone() should copy the slow value'
V1.10.0,1.4.2,1.10.0,'Suite .slow() when given a string should parse it'
V1.10.0,1.4.2,1.10.0,'Suite .slow() when no argument is passed should return the slow value'
V1.10.0,1.4.2,1.10.0,'Suite .slow() when argument is passed should return the Suite object'
V1.10.0,1.4.2,1.10.0,'Suite .addSuite() "before each" hook'
V1.10.0,1.5.0,1.10.0,'Runner .globalProps() should include common non enumerable globals'
V1.10.0,1.5.0,1.10.0,'global leaks should pass when prefixed "mocha-"'
V1.10.0,1.6.0,1.10.0,'Runner .globalProps() should include common non enumerable globals'
V1.10.0,1.6.0,1.10.0,'global leaks should pass when prefixed "mocha-"'
V1.11.0,1.0.0,1.11.0,'Suite .clone() should copy the slow value'
V1.11.0,1.0.0,1.11.0,'Suite .slow() when given a string should parse it'
V1.11.0,1.0.0,1.11.0,'Suite .slow() when no argument is passed should return the slow value'
V1.11.0,1.0.0,1.11.0,'Suite .slow() when argument is passed should return the Suite object'
V1.11.0,1.0.0,1.11.0,'Suite .addSuite() "before each" hook'
V1.11.0,1.0.1,1.11.0,'Suite .clone() should copy the slow value'
V1.11.0,1.0.1,1.11.0,'Suite .slow() when given a string should parse it'
V1.11.0,1.0.1,1.11.0,'Suite .slow() when no argument is passed should return the slow value'
V1.11.0,1.0.1,1.11.0,'Suite .slow() when argument is passed should return the Suite object'
V1.11.0,1.0.1,1.11.0,'Suite .addSuite() "before each" hook'
V1.11.0,1.0.2,1.11.0,'Suite .clone() should copy the slow value'
V1.11.0,1.0.2,1.11.0,'Suite .slow() when given a string should parse it'
V1.11.0,1.0.2,1.11.0,'Suite .slow() when no argument is passed should return the slow value'
V1.11.0,1.0.2,1.11.0,'Suite .slow() when argument is passed should return the Suite object'
V1.11.0,1.0.2,1.11.0,'Suite .addSuite() "before each" hook'
V1.11.0,1.0.3,1.11.0,'Suite .clone() should copy the slow value'
V1.11.0,1.0.3,1.11.0,'Suite .slow() when given a string should parse it'
V1.11.0,1.0.3,1.11.0,'Suite .slow() when no argument is passed should return the slow value'
V1.11.0,1.0.3,1.11.0,'Suite .slow() when argument is passed should return the Suite object'
V1.11.0,1.0.3,1.11.0,'Suite .addSuite() "before each" hook'
V1.11.0,1.1.0,1.11.0,'Suite .clone() should copy the slow value'
V1.11.0,1.1.0,1.11.0,'Suite .slow() when given a string should parse it'
V1.11.0,1.1.0,1.11.0,'Suite .slow() when no argument is passed should return the slow value'
V1.11.0,1.1.0,1.11.0,'Suite .slow() when argument is passed should return the Suite object'
V1.11.0,1.1.0,1.11.0,'Suite .addSuite() "before each" hook'
V1.11.0,1.2.0,1.11.0,'Suite .clone() should copy the slow value'
V1.11.0,1.2.0,1.11.0,'Suite .slow() when given a string should parse it'
V1.11.0,1.2.0,1.11.0,'Suite .slow() when no argument is passed should return the slow value'
V1.11.0,1.2.0,1.11.0,'Suite .slow() when argument is passed should return the Suite object'
V1.11.0,1.2.0,1.11.0,'Suite .addSuite() "before each" hook'
V1.11.0,1.2.1,1.11.0,'Suite .clone() should copy the slow value'
V1.11.0,1.2.1,1.11.0,'Suite .slow() when given a string should parse it'
V1.11.0,1.2.1,1.11.0,'Suite .slow() when no argument is passed should return the slow value'
V1.11.0,1.2.1,1.11.0,'Suite .slow() when argument is passed should return the Suite object'
V1.11.0,1.2.1,1.11.0,'Suite .addSuite() "before each" hook'
V1.11.0,1.2.2,1.11.0,'Suite .clone() should copy the slow value'
V1.11.0,1.2.2,1.11.0,'Suite .slow() when given a string should parse it'
V1.11.0,1.2.2,1.11.0,'Suite .slow() when no argument is passed should return the slow value'
V1.11.0,1.2.2,1.11.0,'Suite .slow() when argument is passed should return the Suite object'
V1.11.0,1.2.2,1.11.0,'Suite .addSuite() "before each" hook'
V1.11.0,1.3.0,1.11.0,'Suite .clone() should copy the slow value'
V1.11.0,1.3.0,1.11.0,'Suite .slow() when given a string should parse it'
V1.11.0,1.3.0,1.11.0,'Suite .slow() when no argument is passed should return the slow value'
V1.11.0,1.3.0,1.11.0,'Suite .slow() when argument is passed should return the Suite object'
V1.11.0,1.3.0,1.11.0,'Suite .addSuite() "before each" hook'
V1.11.0,1.3.1,1.11.0,'Suite .clone() should copy the slow value'
V1.11.0,1.3.1,1.11.0,'Suite .slow() when given a string should parse it'
V1.11.0,1.3.1,1.11.0,'Suite .slow() when no argument is passed should return the slow value'
V1.11.0,1.3.1,1.11.0,'Suite .slow() when argument is passed should return the Suite object'
V1.11.0,1.3.1,1.11.0,'Suite .addSuite() "before each" hook'
V1.11.0,1.3.2,1.11.0,'Suite .clone() should copy the slow value'
V1.11.0,1.3.2,1.11.0,'Suite .slow() when given a string should parse it'
V1.11.0,1.3.2,1.11.0,'Suite .slow() when no argument is passed should return the slow value'
V1.11.0,1.3.2,1.11.0,'Suite .slow() when argument is passed should return the Suite object'
V1.11.0,1.3.2,1.11.0,'Suite .addSuite() "before each" hook'
V1.11.0,1.4.0,1.11.0,'Suite .clone() should copy the slow value'
V1.11.0,1.4.0,1.11.0,'Suite .slow() when given a string should parse it'
V1.11.0,1.4.0,1.11.0,'Suite .slow() when no argument is passed should return the slow value'
V1.11.0,1.4.0,1.11.0,'Suite .slow() when argument is passed should return the Suite object'
V1.11.0,1.4.0,1.11.0,'Suite .addSuite() "before each" hook'
V1.11.0,1.4.1,1.11.0,'Suite .clone() should copy the slow value'
V1.11.0,1.4.1,1.11.0,'Suite .slow() when given a string should parse it'
V1.11.0,1.4.1,1.11.0,'Suite .slow() when no argument is passed should return the slow value'
V1.11.0,1.4.1,1.11.0,'Suite .slow() when argument is passed should return the Suite object'
V1.11.0,1.4.1,1.11.0,'Suite .addSuite() "before each" hook'
V1.11.0,1.4.2,1.11.0,'Suite .clone() should copy the slow value'
V1.11.0,1.4.2,1.11.0,'Suite .slow() when given a string should parse it'
V1.11.0,1.4.2,1.11.0,'Suite .slow() when no argument is passed should return the slow value'
V1.11.0,1.4.2,1.11.0,'Suite .slow() when argument is passed should return the Suite object'
V1.11.0,1.4.2,1.11.0,'Suite .addSuite() "before each" hook'
V1.11.0,1.5.0,1.11.0,'Runner .globalProps() should include common non enumerable globals'
V1.11.0,1.5.0,1.11.0,'global leaks should pass when prefixed "mocha-"'
V1.11.0,1.6.0,1.11.0,'Runner .globalProps() should include common non enumerable globals'
V1.11.0,1.6.0,1.11.0,'global leaks should pass when prefixed "mocha-"'
V1.12.0,1.0.0,1.12.0,'Suite .clone() should copy the slow value'
V1.12.0,1.0.0,1.12.0,'Suite .slow() when given a string should parse it'
V1.12.0,1.0.0,1.12.0,'Suite .slow() when no argument is passed should return the slow value'
V1.12.0,1.0.0,1.12.0,'Suite .slow() when argument is passed should return the Suite object'
V1.12.0,1.0.0,1.12.0,'Suite .addSuite() "before each" hook'
V1.12.0,1.0.1,1.12.0,'Suite .clone() should copy the slow value'
V1.12.0,1.0.1,1.12.0,'Suite .slow() when given a string should parse it'
V1.12.0,1.0.1,1.12.0,'Suite .slow() when no argument is passed should return the slow value'
V1.12.0,1.0.1,1.12.0,'Suite .slow() when argument is passed should return the Suite object'
V1.12.0,1.0.1,1.12.0,'Suite .addSuite() "before each" hook'
V1.12.0,1.0.2,1.12.0,'Suite .clone() should copy the slow value'
V1.12.0,1.0.2,1.12.0,'Suite .slow() when given a string should parse it'
V1.12.0,1.0.2,1.12.0,'Suite .slow() when no argument is passed should return the slow value'
V1.12.0,1.0.2,1.12.0,'Suite .slow() when argument is passed should return the Suite object'
V1.12.0,1.0.2,1.12.0,'Suite .addSuite() "before each" hook'
V1.12.0,1.0.3,1.12.0,'Suite .clone() should copy the slow value'
V1.12.0,1.0.3,1.12.0,'Suite .slow() when given a string should parse it'
V1.12.0,1.0.3,1.12.0,'Suite .slow() when no argument is passed should return the slow value'
V1.12.0,1.0.3,1.12.0,'Suite .slow() when argument is passed should return the Suite object'
V1.12.0,1.0.3,1.12.0,'Suite .addSuite() "before each" hook'
V1.12.0,1.1.0,1.12.0,'Suite .clone() should copy the slow value'
V1.12.0,1.1.0,1.12.0,'Suite .slow() when given a string should parse it'
V1.12.0,1.1.0,1.12.0,'Suite .slow() when no argument is passed should return the slow value'
V1.12.0,1.1.0,1.12.0,'Suite .slow() when argument is passed should return the Suite object'
V1.12.0,1.1.0,1.12.0,'Suite .addSuite() "before each" hook'
V1.12.0,1.2.0,1.12.0,'Suite .clone() should copy the slow value'
V1.12.0,1.2.0,1.12.0,'Suite .slow() when given a string should parse it'
V1.12.0,1.2.0,1.12.0,'Suite .slow() when no argument is passed should return the slow value'
V1.12.0,1.2.0,1.12.0,'Suite .slow() when argument is passed should return the Suite object'
V1.12.0,1.2.0,1.12.0,'Suite .addSuite() "before each" hook'
V1.12.0,1.2.1,1.12.0,'Suite .clone() should copy the slow value'
V1.12.0,1.2.1,1.12.0,'Suite .slow() when given a string should parse it'
V1.12.0,1.2.1,1.12.0,'Suite .slow() when no argument is passed should return the slow value'
V1.12.0,1.2.1,1.12.0,'Suite .slow() when argument is passed should return the Suite object'
V1.12.0,1.2.1,1.12.0,'Suite .addSuite() "before each" hook'
V1.12.0,1.2.2,1.12.0,'Suite .clone() should copy the slow value'
V1.12.0,1.2.2,1.12.0,'Suite .slow() when given a string should parse it'
V1.12.0,1.2.2,1.12.0,'Suite .slow() when no argument is passed should return the slow value'
V1.12.0,1.2.2,1.12.0,'Suite .slow() when argument is passed should return the Suite object'
V1.12.0,1.2.2,1.12.0,'Suite .addSuite() "before each" hook'
V1.12.0,1.3.0,1.12.0,'Suite .clone() should copy the slow value'
V1.12.0,1.3.0,1.12.0,'Suite .slow() when given a string should parse it'
V1.12.0,1.3.0,1.12.0,'Suite .slow() when no argument is passed should return the slow value'
V1.12.0,1.3.0,1.12.0,'Suite .slow() when argument is passed should return the Suite object'
V1.12.0,1.3.0,1.12.0,'Suite .addSuite() "before each" hook'
V1.12.0,1.3.1,1.12.0,'Suite .clone() should copy the slow value'
V1.12.0,1.3.1,1.12.0,'Suite .slow() when given a string should parse it'
V1.12.0,1.3.1,1.12.0,'Suite .slow() when no argument is passed should return the slow value'
V1.12.0,1.3.1,1.12.0,'Suite .slow() when argument is passed should return the Suite object'
V1.12.0,1.3.1,1.12.0,'Suite .addSuite() "before each" hook'
V1.12.0,1.3.2,1.12.0,'Suite .clone() should copy the slow value'
V1.12.0,1.3.2,1.12.0,'Suite .slow() when given a string should parse it'
V1.12.0,1.3.2,1.12.0,'Suite .slow() when no argument is passed should return the slow value'
V1.12.0,1.3.2,1.12.0,'Suite .slow() when argument is passed should return the Suite object'
V1.12.0,1.3.2,1.12.0,'Suite .addSuite() "before each" hook'
V1.12.0,1.4.0,1.12.0,'Suite .clone() should copy the slow value'
V1.12.0,1.4.0,1.12.0,'Suite .slow() when given a string should parse it'
V1.12.0,1.4.0,1.12.0,'Suite .slow() when no argument is passed should return the slow value'
V1.12.0,1.4.0,1.12.0,'Suite .slow() when argument is passed should return the Suite object'
V1.12.0,1.4.0,1.12.0,'Suite .addSuite() "before each" hook'
V1.12.0,1.4.1,1.12.0,'Suite .clone() should copy the slow value'
V1.12.0,1.4.1,1.12.0,'Suite .slow() when given a string should parse it'
V1.12.0,1.4.1,1.12.0,'Suite .slow() when no argument is passed should return the slow value'
V1.12.0,1.4.1,1.12.0,'Suite .slow() when argument is passed should return the Suite object'
V1.12.0,1.4.1,1.12.0,'Suite .addSuite() "before each" hook'
V1.12.0,1.4.2,1.12.0,'Suite .clone() should copy the slow value'
V1.12.0,1.4.2,1.12.0,'Suite .slow() when given a string should parse it'
V1.12.0,1.4.2,1.12.0,'Suite .slow() when no argument is passed should return the slow value'
V1.12.0,1.4.2,1.12.0,'Suite .slow() when argument is passed should return the Suite object'
V1.12.0,1.4.2,1.12.0,'Suite .addSuite() "before each" hook'
V1.12.0,1.5.0,1.12.0,'Runner .globalProps() should include common non enumerable globals'
V1.12.0,1.5.0,1.12.0,'serial hooks one'
V1.12.0,1.5.0,1.12.0,'serial hooks two'
V1.12.0,1.5.0,1.12.0,'serial hooks three'
V1.12.0,1.5.0,1.12.0,'serial hooks "after all" hook'
V1.12.0,1.6.0,1.12.0,'Runner .globalProps() should include common non enumerable globals'
V1.12.0,1.6.0,1.12.0,'serial hooks one'
V1.12.0,1.6.0,1.12.0,'serial hooks two'
V1.12.0,1.6.0,1.12.0,'serial hooks three'
V1.12.0,1.6.0,1.12.0,'serial hooks "after all" hook'
V1.12.0,1.7.0,1.12.0,'serial hooks one'
V1.12.0,1.7.0,1.12.0,'serial hooks two'
V1.12.0,1.7.0,1.12.0,'serial hooks three'
V1.12.0,1.7.0,1.12.0,'serial hooks "after all" hook'
V1.12.0,1.7.1,1.12.0,'serial hooks one'
V1.12.0,1.7.1,1.12.0,'serial hooks two'
V1.12.0,1.7.1,1.12.0,'serial hooks three'
V1.12.0,1.7.1,1.12.0,'serial hooks "after all" hook'
V1.12.0,1.7.2,1.12.0,'serial hooks one'
V1.12.0,1.7.2,1.12.0,'serial hooks two'
V1.12.0,1.7.2,1.12.0,'serial hooks three'
V1.12.0,1.7.2,1.12.0,'serial hooks "after all" hook'
V1.12.0,1.7.3,1.12.0,'serial hooks one'
V1.12.0,1.7.3,1.12.0,'serial hooks two'
V1.12.0,1.7.3,1.12.0,'serial hooks three'
V1.12.0,1.7.3,1.12.0,'serial hooks "after all" hook'
V1.12.0,1.7.4,1.12.0,'serial hooks one'
V1.12.0,1.7.4,1.12.0,'serial hooks two'
V1.12.0,1.7.4,1.12.0,'serial hooks three'
V1.12.0,1.7.4,1.12.0,'serial hooks "after all" hook'
V1.12.0,1.8.0,1.12.0,'serial hooks one'
V1.12.0,1.8.0,1.12.0,'serial hooks "after all" hook'
V1.12.0,1.8.1,1.12.0,'serial hooks one'
V1.12.0,1.8.1,1.12.0,'serial hooks two'
V1.12.0,1.8.1,1.12.0,'serial hooks three'
V1.12.0,1.8.1,1.12.0,'serial hooks "after all" hook'
V1.12.0,1.8.2,1.12.0,'serial hooks one'
V1.12.0,1.8.2,1.12.0,'serial hooks two'
V1.12.0,1.8.2,1.12.0,'serial hooks three'
V1.12.0,1.8.2,1.12.0,'serial hooks "after all" hook'
V1.12.0,1.9.0,1.12.0,'serial hooks one'
V1.12.0,1.9.0,1.12.0,'serial hooks two'
V1.12.0,1.9.0,1.12.0,'serial hooks three'
V1.12.0,1.9.0,1.12.0,'serial hooks "after all" hook'
V1.12.0,1.10.0,1.12.0,'serial hooks one'
V1.12.0,1.10.0,1.12.0,'serial hooks two'
V1.12.0,1.10.0,1.12.0,'serial hooks three'
V1.12.0,1.10.0,1.12.0,'serial hooks "after all" hook'
V1.12.0,1.11.0,1.12.0,'serial hooks one'
V1.12.0,1.11.0,1.12.0,'serial hooks two'
V1.12.0,1.11.0,1.12.0,'serial hooks three'
V1.12.0,1.11.0,1.12.0,'serial hooks "after all" hook'
V1.12.1,1.0.0,1.12.1,'Suite .clone() should copy the slow value'
V1.12.1,1.0.0,1.12.1,'Suite .slow() when given a string should parse it'
V1.12.1,1.0.0,1.12.1,'Suite .slow() when no argument is passed should return the slow value'
V1.12.1,1.0.0,1.12.1,'Suite .slow() when argument is passed should return the Suite object'
V1.12.1,1.0.0,1.12.1,'Suite .addSuite() "before each" hook'
V1.12.1,1.0.1,1.12.1,'Suite .clone() should copy the slow value'
V1.12.1,1.0.1,1.12.1,'Suite .slow() when given a string should parse it'
V1.12.1,1.0.1,1.12.1,'Suite .slow() when no argument is passed should return the slow value'
V1.12.1,1.0.1,1.12.1,'Suite .slow() when argument is passed should return the Suite object'
V1.12.1,1.0.1,1.12.1,'Suite .addSuite() "before each" hook'
V1.12.1,1.0.2,1.12.1,'Suite .clone() should copy the slow value'
V1.12.1,1.0.2,1.12.1,'Suite .slow() when given a string should parse it'
V1.12.1,1.0.2,1.12.1,'Suite .slow() when no argument is passed should return the slow value'
V1.12.1,1.0.2,1.12.1,'Suite .slow() when argument is passed should return the Suite object'
V1.12.1,1.0.2,1.12.1,'Suite .addSuite() "before each" hook'
V1.12.1,1.0.3,1.12.1,'Suite .clone() should copy the slow value'
V1.12.1,1.0.3,1.12.1,'Suite .slow() when given a string should parse it'
V1.12.1,1.0.3,1.12.1,'Suite .slow() when no argument is passed should return the slow value'
V1.12.1,1.0.3,1.12.1,'Suite .slow() when argument is passed should return the Suite object'
V1.12.1,1.0.3,1.12.1,'Suite .addSuite() "before each" hook'
V1.12.1,1.1.0,1.12.1,'Suite .clone() should copy the slow value'
V1.12.1,1.1.0,1.12.1,'Suite .slow() when given a string should parse it'
V1.12.1,1.1.0,1.12.1,'Suite .slow() when no argument is passed should return the slow value'
V1.12.1,1.1.0,1.12.1,'Suite .slow() when argument is passed should return the Suite object'
V1.12.1,1.1.0,1.12.1,'Suite .addSuite() "before each" hook'
V1.12.1,1.2.0,1.12.1,'Suite .clone() should copy the slow value'
V1.12.1,1.2.0,1.12.1,'Suite .slow() when given a string should parse it'
V1.12.1,1.2.0,1.12.1,'Suite .slow() when no argument is passed should return the slow value'
V1.12.1,1.2.0,1.12.1,'Suite .slow() when argument is passed should return the Suite object'
V1.12.1,1.2.0,1.12.1,'Suite .addSuite() "before each" hook'
V1.12.1,1.2.1,1.12.1,'Suite .clone() should copy the slow value'
V1.12.1,1.2.1,1.12.1,'Suite .slow() when given a string should parse it'
V1.12.1,1.2.1,1.12.1,'Suite .slow() when no argument is passed should return the slow value'
V1.12.1,1.2.1,1.12.1,'Suite .slow() when argument is passed should return the Suite object'
V1.12.1,1.2.1,1.12.1,'Suite .addSuite() "before each" hook'
V1.12.1,1.2.2,1.12.1,'Suite .clone() should copy the slow value'
V1.12.1,1.2.2,1.12.1,'Suite .slow() when given a string should parse it'
V1.12.1,1.2.2,1.12.1,'Suite .slow() when no argument is passed should return the slow value'
V1.12.1,1.2.2,1.12.1,'Suite .slow() when argument is passed should return the Suite object'
V1.12.1,1.2.2,1.12.1,'Suite .addSuite() "before each" hook'
V1.12.1,1.3.0,1.12.1,'Suite .clone() should copy the slow value'
V1.12.1,1.3.0,1.12.1,'Suite .slow() when given a string should parse it'
V1.12.1,1.3.0,1.12.1,'Suite .slow() when no argument is passed should return the slow value'
V1.12.1,1.3.0,1.12.1,'Suite .slow() when argument is passed should return the Suite object'
V1.12.1,1.3.0,1.12.1,'Suite .addSuite() "before each" hook'
V1.12.1,1.3.1,1.12.1,'Suite .clone() should copy the slow value'
V1.12.1,1.3.1,1.12.1,'Suite .slow() when given a string should parse it'
V1.12.1,1.3.1,1.12.1,'Suite .slow() when no argument is passed should return the slow value'
V1.12.1,1.3.1,1.12.1,'Suite .slow() when argument is passed should return the Suite object'
V1.12.1,1.3.1,1.12.1,'Suite .addSuite() "before each" hook'
V1.12.1,1.3.2,1.12.1,'Suite .clone() should copy the slow value'
V1.12.1,1.3.2,1.12.1,'Suite .slow() when given a string should parse it'
V1.12.1,1.3.2,1.12.1,'Suite .slow() when no argument is passed should return the slow value'
V1.12.1,1.3.2,1.12.1,'Suite .slow() when argument is passed should return the Suite object'
V1.12.1,1.3.2,1.12.1,'Suite .addSuite() "before each" hook'
V1.12.1,1.4.0,1.12.1,'Suite .clone() should copy the slow value'
V1.12.1,1.4.0,1.12.1,'Suite .slow() when given a string should parse it'
V1.12.1,1.4.0,1.12.1,'Suite .slow() when no argument is passed should return the slow value'
V1.12.1,1.4.0,1.12.1,'Suite .slow() when argument is passed should return the Suite object'
V1.12.1,1.4.0,1.12.1,'Suite .addSuite() "before each" hook'
V1.12.1,1.4.1,1.12.1,'Suite .clone() should copy the slow value'
V1.12.1,1.4.1,1.12.1,'Suite .slow() when given a string should parse it'
V1.12.1,1.4.1,1.12.1,'Suite .slow() when no argument is passed should return the slow value'
V1.12.1,1.4.1,1.12.1,'Suite .slow() when argument is passed should return the Suite object'
V1.12.1,1.4.1,1.12.1,'Suite .addSuite() "before each" hook'
V1.12.1,1.4.2,1.12.1,'Suite .clone() should copy the slow value'
V1.12.1,1.4.2,1.12.1,'Suite .slow() when given a string should parse it'
V1.12.1,1.4.2,1.12.1,'Suite .slow() when no argument is passed should return the slow value'
V1.12.1,1.4.2,1.12.1,'Suite .slow() when argument is passed should return the Suite object'
V1.12.1,1.4.2,1.12.1,'Suite .addSuite() "before each" hook'
V1.12.1,1.5.0,1.12.1,'Runner .globalProps() should include common non enumerable globals'
V1.12.1,1.5.0,1.12.1,'serial hooks one'
V1.12.1,1.5.0,1.12.1,'serial hooks two'
V1.12.1,1.5.0,1.12.1,'serial hooks three'
V1.12.1,1.5.0,1.12.1,'serial hooks "after all" hook'
V1.12.1,1.6.0,1.12.1,'Runner .globalProps() should include common non enumerable globals'
V1.12.1,1.6.0,1.12.1,'serial hooks one'
V1.12.1,1.6.0,1.12.1,'serial hooks two'
V1.12.1,1.6.0,1.12.1,'serial hooks three'
V1.12.1,1.6.0,1.12.1,'serial hooks "after all" hook'
V1.12.1,1.7.0,1.12.1,'serial hooks one'
V1.12.1,1.7.0,1.12.1,'serial hooks two'
V1.12.1,1.7.0,1.12.1,'serial hooks three'
V1.12.1,1.7.0,1.12.1,'serial hooks "after all" hook'
V1.12.1,1.7.1,1.12.1,'serial hooks one'
V1.12.1,1.7.1,1.12.1,'serial hooks two'
V1.12.1,1.7.1,1.12.1,'serial hooks three'
V1.12.1,1.7.1,1.12.1,'serial hooks "after all" hook'
V1.12.1,1.7.2,1.12.1,'serial hooks one'
V1.12.1,1.7.2,1.12.1,'serial hooks two'
V1.12.1,1.7.2,1.12.1,'serial hooks three'
V1.12.1,1.7.2,1.12.1,'serial hooks "after all" hook'
V1.12.1,1.7.3,1.12.1,'serial hooks one'
V1.12.1,1.7.3,1.12.1,'serial hooks two'
V1.12.1,1.7.3,1.12.1,'serial hooks three'
V1.12.1,1.7.3,1.12.1,'serial hooks "after all" hook'
V1.12.1,1.7.4,1.12.1,'serial hooks one'
V1.12.1,1.7.4,1.12.1,'serial hooks two'
V1.12.1,1.7.4,1.12.1,'serial hooks three'
V1.12.1,1.7.4,1.12.1,'serial hooks "after all" hook'
V1.12.1,1.8.0,1.12.1,'serial hooks one'
V1.12.1,1.8.0,1.12.1,'serial hooks "after all" hook'
V1.12.1,1.8.1,1.12.1,'serial hooks one'
V1.12.1,1.8.1,1.12.1,'serial hooks two'
V1.12.1,1.8.1,1.12.1,'serial hooks three'
V1.12.1,1.8.1,1.12.1,'serial hooks "after all" hook'
V1.12.1,1.8.2,1.12.1,'serial hooks one'
V1.12.1,1.8.2,1.12.1,'serial hooks two'
V1.12.1,1.8.2,1.12.1,'serial hooks three'
V1.12.1,1.8.2,1.12.1,'serial hooks "after all" hook'
V1.12.1,1.9.0,1.12.1,'serial hooks one'
V1.12.1,1.9.0,1.12.1,'serial hooks two'
V1.12.1,1.9.0,1.12.1,'serial hooks three'
V1.12.1,1.9.0,1.12.1,'serial hooks "after all" hook'
V1.12.1,1.10.0,1.12.1,'serial hooks one'
V1.12.1,1.10.0,1.12.1,'serial hooks two'
V1.12.1,1.10.0,1.12.1,'serial hooks three'
V1.12.1,1.10.0,1.12.1,'serial hooks "after all" hook'
V1.12.1,1.11.0,1.12.1,'serial hooks one'
V1.12.1,1.11.0,1.12.1,'serial hooks two'
V1.12.1,1.11.0,1.12.1,'serial hooks three'
V1.12.1,1.11.0,1.12.1,'serial hooks "after all" hook'
V1.13.0,1.0.0,1.13.0,'Suite .clone() should copy the slow value'
V1.13.0,1.0.0,1.13.0,'Suite .slow() when given a string should parse it'
V1.13.0,1.0.0,1.13.0,'Suite .slow() when no argument is passed should return the slow value'
V1.13.0,1.0.0,1.13.0,'Suite .slow() when argument is passed should return the Suite object'
V1.13.0,1.0.0,1.13.0,'Suite .addSuite() "before each" hook'
V1.13.0,1.0.1,1.13.0,'Suite .clone() should copy the slow value'
V1.13.0,1.0.1,1.13.0,'Suite .slow() when given a string should parse it'
V1.13.0,1.0.1,1.13.0,'Suite .slow() when no argument is passed should return the slow value'
V1.13.0,1.0.1,1.13.0,'Suite .slow() when argument is passed should return the Suite object'
V1.13.0,1.0.1,1.13.0,'Suite .addSuite() "before each" hook'
V1.13.0,1.0.2,1.13.0,'Suite .clone() should copy the slow value'
V1.13.0,1.0.2,1.13.0,'Suite .slow() when given a string should parse it'
V1.13.0,1.0.2,1.13.0,'Suite .slow() when no argument is passed should return the slow value'
V1.13.0,1.0.2,1.13.0,'Suite .slow() when argument is passed should return the Suite object'
V1.13.0,1.0.2,1.13.0,'Suite .addSuite() "before each" hook'
V1.13.0,1.0.3,1.13.0,'Suite .clone() should copy the slow value'
V1.13.0,1.0.3,1.13.0,'Suite .slow() when given a string should parse it'
V1.13.0,1.0.3,1.13.0,'Suite .slow() when no argument is passed should return the slow value'
V1.13.0,1.0.3,1.13.0,'Suite .slow() when argument is passed should return the Suite object'
V1.13.0,1.0.3,1.13.0,'Suite .addSuite() "before each" hook'
V1.13.0,1.1.0,1.13.0,'Suite .clone() should copy the slow value'
V1.13.0,1.1.0,1.13.0,'Suite .slow() when given a string should parse it'
V1.13.0,1.1.0,1.13.0,'Suite .slow() when no argument is passed should return the slow value'
V1.13.0,1.1.0,1.13.0,'Suite .slow() when argument is passed should return the Suite object'
V1.13.0,1.1.0,1.13.0,'Suite .addSuite() "before each" hook'
V1.13.0,1.2.0,1.13.0,'Suite .clone() should copy the slow value'
V1.13.0,1.2.0,1.13.0,'Suite .slow() when given a string should parse it'
V1.13.0,1.2.0,1.13.0,'Suite .slow() when no argument is passed should return the slow value'
V1.13.0,1.2.0,1.13.0,'Suite .slow() when argument is passed should return the Suite object'
V1.13.0,1.2.0,1.13.0,'Suite .addSuite() "before each" hook'
V1.13.0,1.2.1,1.13.0,'Suite .clone() should copy the slow value'
V1.13.0,1.2.1,1.13.0,'Suite .slow() when given a string should parse it'
V1.13.0,1.2.1,1.13.0,'Suite .slow() when no argument is passed should return the slow value'
V1.13.0,1.2.1,1.13.0,'Suite .slow() when argument is passed should return the Suite object'
V1.13.0,1.2.1,1.13.0,'Suite .addSuite() "before each" hook'
V1.13.0,1.2.2,1.13.0,'Suite .clone() should copy the slow value'
V1.13.0,1.2.2,1.13.0,'Suite .slow() when given a string should parse it'
V1.13.0,1.2.2,1.13.0,'Suite .slow() when no argument is passed should return the slow value'
V1.13.0,1.2.2,1.13.0,'Suite .slow() when argument is passed should return the Suite object'
V1.13.0,1.2.2,1.13.0,'Suite .addSuite() "before each" hook'
V1.13.0,1.3.0,1.13.0,'Suite .clone() should copy the slow value'
V1.13.0,1.3.0,1.13.0,'Suite .slow() when given a string should parse it'
V1.13.0,1.3.0,1.13.0,'Suite .slow() when no argument is passed should return the slow value'
V1.13.0,1.3.0,1.13.0,'Suite .slow() when argument is passed should return the Suite object'
V1.13.0,1.3.0,1.13.0,'Suite .addSuite() "before each" hook'
V1.13.0,1.3.1,1.13.0,'Suite .clone() should copy the slow value'
V1.13.0,1.3.1,1.13.0,'Suite .slow() when given a string should parse it'
V1.13.0,1.3.1,1.13.0,'Suite .slow() when no argument is passed should return the slow value'
V1.13.0,1.3.1,1.13.0,'Suite .slow() when argument is passed should return the Suite object'
V1.13.0,1.3.1,1.13.0,'Suite .addSuite() "before each" hook'
V1.13.0,1.3.2,1.13.0,'Suite .clone() should copy the slow value'
V1.13.0,1.3.2,1.13.0,'Suite .slow() when given a string should parse it'
V1.13.0,1.3.2,1.13.0,'Suite .slow() when no argument is passed should return the slow value'
V1.13.0,1.3.2,1.13.0,'Suite .slow() when argument is passed should return the Suite object'
V1.13.0,1.3.2,1.13.0,'Suite .addSuite() "before each" hook'
V1.13.0,1.4.0,1.13.0,'Suite .clone() should copy the slow value'
V1.13.0,1.4.0,1.13.0,'Suite .slow() when given a string should parse it'
V1.13.0,1.4.0,1.13.0,'Suite .slow() when no argument is passed should return the slow value'
V1.13.0,1.4.0,1.13.0,'Suite .slow() when argument is passed should return the Suite object'
V1.13.0,1.4.0,1.13.0,'Suite .addSuite() "before each" hook'
V1.13.0,1.4.1,1.13.0,'Suite .clone() should copy the slow value'
V1.13.0,1.4.1,1.13.0,'Suite .slow() when given a string should parse it'
V1.13.0,1.4.1,1.13.0,'Suite .slow() when no argument is passed should return the slow value'
V1.13.0,1.4.1,1.13.0,'Suite .slow() when argument is passed should return the Suite object'
V1.13.0,1.4.1,1.13.0,'Suite .addSuite() "before each" hook'
V1.13.0,1.4.2,1.13.0,'Suite .clone() should copy the slow value'
V1.13.0,1.4.2,1.13.0,'Suite .slow() when given a string should parse it'
V1.13.0,1.4.2,1.13.0,'Suite .slow() when no argument is passed should return the slow value'
V1.13.0,1.4.2,1.13.0,'Suite .slow() when argument is passed should return the Suite object'
V1.13.0,1.4.2,1.13.0,'Suite .addSuite() "before each" hook'
V1.13.0,1.5.0,1.13.0,'Runner .globalProps() should include common non enumerable globals'
V1.13.0,1.5.0,1.13.0,'serial hooks one'
V1.13.0,1.5.0,1.13.0,'serial hooks two'
V1.13.0,1.5.0,1.13.0,'serial hooks three'
V1.13.0,1.5.0,1.13.0,'serial hooks "after all" hook'
V1.13.0,1.6.0,1.13.0,'Runner .globalProps() should include common non enumerable globals'
V1.13.0,1.6.0,1.13.0,'serial hooks one'
V1.13.0,1.6.0,1.13.0,'serial hooks two'
V1.13.0,1.6.0,1.13.0,'serial hooks three'
V1.13.0,1.6.0,1.13.0,'serial hooks "after all" hook'
V1.13.0,1.7.0,1.13.0,'serial hooks one'
V1.13.0,1.7.0,1.13.0,'serial hooks two'
V1.13.0,1.7.0,1.13.0,'serial hooks three'
V1.13.0,1.7.0,1.13.0,'serial hooks "after all" hook'
V1.13.0,1.7.1,1.13.0,'serial hooks one'
V1.13.0,1.7.1,1.13.0,'serial hooks two'
V1.13.0,1.7.1,1.13.0,'serial hooks three'
V1.13.0,1.7.1,1.13.0,'serial hooks "after all" hook'
V1.13.0,1.7.2,1.13.0,'serial hooks one'
V1.13.0,1.7.2,1.13.0,'serial hooks two'
V1.13.0,1.7.2,1.13.0,'serial hooks three'
V1.13.0,1.7.2,1.13.0,'serial hooks "after all" hook'
V1.13.0,1.7.3,1.13.0,'serial hooks one'
V1.13.0,1.7.3,1.13.0,'serial hooks two'
V1.13.0,1.7.3,1.13.0,'serial hooks three'
V1.13.0,1.7.3,1.13.0,'serial hooks "after all" hook'
V1.13.0,1.7.4,1.13.0,'serial hooks one'
V1.13.0,1.7.4,1.13.0,'serial hooks two'
V1.13.0,1.7.4,1.13.0,'serial hooks three'
V1.13.0,1.7.4,1.13.0,'serial hooks "after all" hook'
V1.13.0,1.8.0,1.13.0,'serial hooks one'
V1.13.0,1.8.0,1.13.0,'serial hooks "after all" hook'
V1.13.0,1.8.1,1.13.0,'serial hooks one'
V1.13.0,1.8.1,1.13.0,'serial hooks two'
V1.13.0,1.8.1,1.13.0,'serial hooks three'
V1.13.0,1.8.1,1.13.0,'serial hooks "after all" hook'
V1.13.0,1.8.2,1.13.0,'serial hooks one'
V1.13.0,1.8.2,1.13.0,'serial hooks two'
V1.13.0,1.8.2,1.13.0,'serial hooks three'
V1.13.0,1.8.2,1.13.0,'serial hooks "after all" hook'
V1.13.0,1.9.0,1.13.0,'serial hooks one'
V1.13.0,1.9.0,1.13.0,'serial hooks two'
V1.13.0,1.9.0,1.13.0,'serial hooks three'
V1.13.0,1.9.0,1.13.0,'serial hooks "after all" hook'
V1.13.0,1.10.0,1.13.0,'serial hooks one'
V1.13.0,1.10.0,1.13.0,'serial hooks two'
V1.13.0,1.10.0,1.13.0,'serial hooks three'
V1.13.0,1.10.0,1.13.0,'serial hooks "after all" hook'
V1.13.0,1.11.0,1.13.0,'serial hooks one'
V1.13.0,1.11.0,1.13.0,'serial hooks two'
V1.13.0,1.11.0,1.13.0,'serial hooks three'
V1.13.0,1.11.0,1.13.0,'serial hooks "after all" hook'
V1.14.0,1.0.0,1.14.0,'Suite .clone() should copy the slow value'
V1.14.0,1.0.0,1.14.0,'Suite .slow() when given a string should parse it'
V1.14.0,1.0.0,1.14.0,'Suite .slow() when no argument is passed should return the slow value'
V1.14.0,1.0.0,1.14.0,'Suite .slow() when argument is passed should return the Suite object'
V1.14.0,1.0.0,1.14.0,'Suite .addSuite() "before each" hook'
V1.14.0,1.0.1,1.14.0,'Suite .clone() should copy the slow value'
V1.14.0,1.0.1,1.14.0,'Suite .slow() when given a string should parse it'
V1.14.0,1.0.1,1.14.0,'Suite .slow() when no argument is passed should return the slow value'
V1.14.0,1.0.1,1.14.0,'Suite .slow() when argument is passed should return the Suite object'
V1.14.0,1.0.1,1.14.0,'Suite .addSuite() "before each" hook'
V1.14.0,1.0.2,1.14.0,'Suite .clone() should copy the slow value'
V1.14.0,1.0.2,1.14.0,'Suite .slow() when given a string should parse it'
V1.14.0,1.0.2,1.14.0,'Suite .slow() when no argument is passed should return the slow value'
V1.14.0,1.0.2,1.14.0,'Suite .slow() when argument is passed should return the Suite object'
V1.14.0,1.0.2,1.14.0,'Suite .addSuite() "before each" hook'
V1.14.0,1.0.3,1.14.0,'Suite .clone() should copy the slow value'
V1.14.0,1.0.3,1.14.0,'Suite .slow() when given a string should parse it'
V1.14.0,1.0.3,1.14.0,'Suite .slow() when no argument is passed should return the slow value'
V1.14.0,1.0.3,1.14.0,'Suite .slow() when argument is passed should return the Suite object'
V1.14.0,1.0.3,1.14.0,'Suite .addSuite() "before each" hook'
V1.14.0,1.1.0,1.14.0,'Suite .clone() should copy the slow value'
V1.14.0,1.1.0,1.14.0,'Suite .slow() when given a string should parse it'
V1.14.0,1.1.0,1.14.0,'Suite .slow() when no argument is passed should return the slow value'
V1.14.0,1.1.0,1.14.0,'Suite .slow() when argument is passed should return the Suite object'
V1.14.0,1.1.0,1.14.0,'Suite .addSuite() "before each" hook'
V1.14.0,1.2.0,1.14.0,'Suite .clone() should copy the slow value'
V1.14.0,1.2.0,1.14.0,'Suite .slow() when given a string should parse it'
V1.14.0,1.2.0,1.14.0,'Suite .slow() when no argument is passed should return the slow value'
V1.14.0,1.2.0,1.14.0,'Suite .slow() when argument is passed should return the Suite object'
V1.14.0,1.2.0,1.14.0,'Suite .addSuite() "before each" hook'
V1.14.0,1.2.1,1.14.0,'Suite .clone() should copy the slow value'
V1.14.0,1.2.1,1.14.0,'Suite .slow() when given a string should parse it'
V1.14.0,1.2.1,1.14.0,'Suite .slow() when no argument is passed should return the slow value'
V1.14.0,1.2.1,1.14.0,'Suite .slow() when argument is passed should return the Suite object'
V1.14.0,1.2.1,1.14.0,'Suite .addSuite() "before each" hook'
V1.14.0,1.2.2,1.14.0,'Suite .clone() should copy the slow value'
V1.14.0,1.2.2,1.14.0,'Suite .slow() when given a string should parse it'
V1.14.0,1.2.2,1.14.0,'Suite .slow() when no argument is passed should return the slow value'
V1.14.0,1.2.2,1.14.0,'Suite .slow() when argument is passed should return the Suite object'
V1.14.0,1.2.2,1.14.0,'Suite .addSuite() "before each" hook'
V1.14.0,1.3.0,1.14.0,'Suite .clone() should copy the slow value'
V1.14.0,1.3.0,1.14.0,'Suite .slow() when given a string should parse it'
V1.14.0,1.3.0,1.14.0,'Suite .slow() when no argument is passed should return the slow value'
V1.14.0,1.3.0,1.14.0,'Suite .slow() when argument is passed should return the Suite object'
V1.14.0,1.3.0,1.14.0,'Suite .addSuite() "before each" hook'
V1.14.0,1.3.1,1.14.0,'Suite .clone() should copy the slow value'
V1.14.0,1.3.1,1.14.0,'Suite .slow() when given a string should parse it'
V1.14.0,1.3.1,1.14.0,'Suite .slow() when no argument is passed should return the slow value'
V1.14.0,1.3.1,1.14.0,'Suite .slow() when argument is passed should return the Suite object'
V1.14.0,1.3.1,1.14.0,'Suite .addSuite() "before each" hook'
V1.14.0,1.3.2,1.14.0,'Suite .clone() should copy the slow value'
V1.14.0,1.3.2,1.14.0,'Suite .slow() when given a string should parse it'
V1.14.0,1.3.2,1.14.0,'Suite .slow() when no argument is passed should return the slow value'
V1.14.0,1.3.2,1.14.0,'Suite .slow() when argument is passed should return the Suite object'
V1.14.0,1.3.2,1.14.0,'Suite .addSuite() "before each" hook'
V1.14.0,1.4.0,1.14.0,'Suite .clone() should copy the slow value'
V1.14.0,1.4.0,1.14.0,'Suite .slow() when given a string should parse it'
V1.14.0,1.4.0,1.14.0,'Suite .slow() when no argument is passed should return the slow value'
V1.14.0,1.4.0,1.14.0,'Suite .slow() when argument is passed should return the Suite object'
V1.14.0,1.4.0,1.14.0,'Suite .addSuite() "before each" hook'
V1.14.0,1.4.1,1.14.0,'Suite .clone() should copy the slow value'
V1.14.0,1.4.1,1.14.0,'Suite .slow() when given a string should parse it'
V1.14.0,1.4.1,1.14.0,'Suite .slow() when no argument is passed should return the slow value'
V1.14.0,1.4.1,1.14.0,'Suite .slow() when argument is passed should return the Suite object'
V1.14.0,1.4.1,1.14.0,'Suite .addSuite() "before each" hook'
V1.14.0,1.4.2,1.14.0,'Suite .clone() should copy the slow value'
V1.14.0,1.4.2,1.14.0,'Suite .slow() when given a string should parse it'
V1.14.0,1.4.2,1.14.0,'Suite .slow() when no argument is passed should return the slow value'
V1.14.0,1.4.2,1.14.0,'Suite .slow() when argument is passed should return the Suite object'
V1.14.0,1.4.2,1.14.0,'Suite .addSuite() "before each" hook'
V1.14.0,1.5.0,1.14.0,'Runner .globalProps() should include common non enumerable globals'
V1.14.0,1.5.0,1.14.0,'Runner .globals() should white-list globals'
V1.14.0,1.5.0,1.14.0,'Runnable(title, fn) .run(fn) when async should allow updating the timeout'
V1.14.0,1.5.0,1.14.0,'serial hooks one'
V1.14.0,1.5.0,1.14.0,'serial hooks two'
V1.14.0,1.5.0,1.14.0,'serial hooks three'
V1.14.0,1.5.0,1.14.0,'serial hooks "after all" hook'
V1.14.0,1.6.0,1.14.0,'Runner .globalProps() should include common non enumerable globals'
V1.14.0,1.6.0,1.14.0,'Runner .globals() should white-list globals'
V1.14.0,1.6.0,1.14.0,'Runnable(title, fn) .run(fn) when async should allow updating the timeout'
V1.14.0,1.6.0,1.14.0,'serial hooks one'
V1.14.0,1.6.0,1.14.0,'serial hooks two'
V1.14.0,1.6.0,1.14.0,'serial hooks three'
V1.14.0,1.6.0,1.14.0,'serial hooks "after all" hook'
V1.14.0,1.7.0,1.14.0,'Runner .globalProps() should include common non enumerable globals'
V1.14.0,1.7.0,1.14.0,'Runner .globals() should white-list globals'
V1.14.0,1.7.0,1.14.0,'Runnable(title, fn) .run(fn) when async should allow updating the timeout'
V1.14.0,1.7.0,1.14.0,'serial hooks one'
V1.14.0,1.7.0,1.14.0,'serial hooks two'
V1.14.0,1.7.0,1.14.0,'serial hooks three'
V1.14.0,1.7.0,1.14.0,'serial hooks "after all" hook'
V1.14.0,1.7.1,1.14.0,'Runner .globalProps() should include common non enumerable globals'
V1.14.0,1.7.1,1.14.0,'Runner .globals() should white-list globals'
V1.14.0,1.7.1,1.14.0,'Runnable(title, fn) .run(fn) when async should allow updating the timeout'
V1.14.0,1.7.1,1.14.0,'serial hooks one'
V1.14.0,1.7.1,1.14.0,'serial hooks two'
V1.14.0,1.7.1,1.14.0,'serial hooks three'
V1.14.0,1.7.1,1.14.0,'serial hooks "after all" hook'
V1.14.0,1.7.2,1.14.0,'Runner .globalProps() should include common non enumerable globals'
V1.14.0,1.7.2,1.14.0,'Runner .globals() should white-list globals'
V1.14.0,1.7.2,1.14.0,'Runnable(title, fn) .run(fn) when async should allow updating the timeout'
V1.14.0,1.7.2,1.14.0,'serial hooks one'
V1.14.0,1.7.2,1.14.0,'serial hooks two'
V1.14.0,1.7.2,1.14.0,'serial hooks three'
V1.14.0,1.7.2,1.14.0,'serial hooks "after all" hook'
V1.14.0,1.7.3,1.14.0,'Runner .globalProps() should include common non enumerable globals'
V1.14.0,1.7.3,1.14.0,'Runner .globals() should white-list globals'
V1.14.0,1.7.3,1.14.0,'Runnable(title, fn) .run(fn) when async should allow updating the timeout'
V1.14.0,1.7.3,1.14.0,'serial hooks one'
V1.14.0,1.7.3,1.14.0,'serial hooks two'
V1.14.0,1.7.3,1.14.0,'serial hooks three'
V1.14.0,1.7.3,1.14.0,'serial hooks "after all" hook'
V1.14.0,1.7.4,1.14.0,'Runner .globalProps() should include common non enumerable globals'
V1.14.0,1.7.4,1.14.0,'Runner .globals() should white-list globals'
V1.14.0,1.7.4,1.14.0,'Runnable(title, fn) .run(fn) when async should allow updating the timeout'
V1.14.0,1.7.4,1.14.0,'serial hooks one'
V1.14.0,1.7.4,1.14.0,'serial hooks two'
V1.14.0,1.7.4,1.14.0,'serial hooks three'
V1.14.0,1.7.4,1.14.0,'serial hooks "after all" hook'
V1.14.0,1.8.0,1.14.0,'Runner .globalProps() should include common non enumerable globals'
V1.14.0,1.8.0,1.14.0,'serial hooks "after all" hook'
V1.14.0,1.8.1,1.14.0,'Runner .globalProps() should include common non enumerable globals'
V1.14.0,1.8.1,1.14.0,'Runner .globals() should white-list globals'
V1.14.0,1.8.1,1.14.0,'Runnable(title, fn) .run(fn) when async should allow updating the timeout'
V1.14.0,1.8.1,1.14.0,'serial hooks one'
V1.14.0,1.8.1,1.14.0,'serial hooks two'
V1.14.0,1.8.1,1.14.0,'serial hooks three'
V1.14.0,1.8.1,1.14.0,'serial hooks "after all" hook'
V1.14.0,1.8.2,1.14.0,'Runner .globalProps() should include common non enumerable globals'
V1.14.0,1.8.2,1.14.0,'Runner .globals() should white-list globals'
V1.14.0,1.8.2,1.14.0,'Runnable(title, fn) .run(fn) when async should allow updating the timeout'
V1.14.0,1.8.2,1.14.0,'serial hooks one'
V1.14.0,1.8.2,1.14.0,'serial hooks two'
V1.14.0,1.8.2,1.14.0,'serial hooks three'
V1.14.0,1.8.2,1.14.0,'serial hooks "after all" hook'
V1.14.0,1.9.0,1.14.0,'Runner .globalProps() should include common non enumerable globals'
V1.14.0,1.9.0,1.14.0,'Runner .globals() should white-list globals'
V1.14.0,1.9.0,1.14.0,'Runnable(title, fn) .run(fn) when async should allow updating the timeout'
V1.14.0,1.9.0,1.14.0,'serial hooks one'
V1.14.0,1.9.0,1.14.0,'serial hooks two'
V1.14.0,1.9.0,1.14.0,'serial hooks three'
V1.14.0,1.9.0,1.14.0,'serial hooks "after all" hook'
V1.14.0,1.10.0,1.14.0,'Runner .globalProps() should include common non enumerable globals'
V1.14.0,1.10.0,1.14.0,'Runner .globals() should white-list globals'
V1.14.0,1.10.0,1.14.0,'Runnable(title, fn) .run(fn) when async should allow updating the timeout'
V1.14.0,1.10.0,1.14.0,'serial hooks one'
V1.14.0,1.10.0,1.14.0,'serial hooks two'
V1.14.0,1.10.0,1.14.0,'serial hooks three'
V1.14.0,1.10.0,1.14.0,'serial hooks "after all" hook'
V1.14.0,1.11.0,1.14.0,'Runner .globalProps() should include common non enumerable globals'
V1.14.0,1.11.0,1.14.0,'Runner .globals() should white-list globals'
V1.14.0,1.11.0,1.14.0,'Runnable(title, fn) .run(fn) when async should allow updating the timeout'
V1.14.0,1.11.0,1.14.0,'serial hooks one'
V1.14.0,1.11.0,1.14.0,'serial hooks two'
V1.14.0,1.11.0,1.14.0,'serial hooks three'
V1.14.0,1.11.0,1.14.0,'serial hooks "after all" hook'
V1.14.0,1.12.0,1.14.0,'Runner .globalProps() should include common non enumerable globals'
V1.14.0,1.12.0,1.14.0,'Runner .globals() should white-list globals'
V1.14.0,1.12.0,1.14.0,'Runnable(title, fn) .run(fn) when async should allow updating the timeout'
V1.14.0,1.12.1,1.14.0,'Runner .globalProps() should include common non enumerable globals'
V1.14.0,1.12.1,1.14.0,'Runner .globals() should white-list globals'
V1.14.0,1.12.1,1.14.0,'Runnable(title, fn) .run(fn) when async should allow updating the timeout'
V1.14.0,1.13.0,1.14.0,'Runner .globalProps() should include common non enumerable globals'
V1.14.0,1.13.0,1.14.0,'Runner .globals() should white-list globals'
V1.14.0,1.13.0,1.14.0,'Runnable(title, fn) .run(fn) when async should allow updating the timeout'
V1.15.0,1.0.0,1.15.0,'Suite .clone() should copy the slow value'
V1.15.0,1.0.0,1.15.0,'Suite .slow() when given a string should parse it'
V1.15.0,1.0.0,1.15.0,'Suite .slow() when no argument is passed should return the slow value'
V1.15.0,1.0.0,1.15.0,'Suite .slow() when argument is passed should return the Suite object'
V1.15.0,1.0.0,1.15.0,'Suite .addSuite() "before each" hook'
V1.15.0,1.0.1,1.15.0,'Suite .clone() should copy the slow value'
V1.15.0,1.0.1,1.15.0,'Suite .slow() when given a string should parse it'
V1.15.0,1.0.1,1.15.0,'Suite .slow() when no argument is passed should return the slow value'
V1.15.0,1.0.1,1.15.0,'Suite .slow() when argument is passed should return the Suite object'
V1.15.0,1.0.1,1.15.0,'Suite .addSuite() "before each" hook'
V1.15.0,1.0.2,1.15.0,'Suite .clone() should copy the slow value'
V1.15.0,1.0.2,1.15.0,'Suite .slow() when given a string should parse it'
V1.15.0,1.0.2,1.15.0,'Suite .slow() when no argument is passed should return the slow value'
V1.15.0,1.0.2,1.15.0,'Suite .slow() when argument is passed should return the Suite object'
V1.15.0,1.0.2,1.15.0,'Suite .addSuite() "before each" hook'
V1.15.0,1.0.3,1.15.0,'Suite .clone() should copy the slow value'
V1.15.0,1.0.3,1.15.0,'Suite .slow() when given a string should parse it'
V1.15.0,1.0.3,1.15.0,'Suite .slow() when no argument is passed should return the slow value'
V1.15.0,1.0.3,1.15.0,'Suite .slow() when argument is passed should return the Suite object'
V1.15.0,1.0.3,1.15.0,'Suite .addSuite() "before each" hook'
V1.15.0,1.1.0,1.15.0,'Suite .clone() should copy the slow value'
V1.15.0,1.1.0,1.15.0,'Suite .slow() when given a string should parse it'
V1.15.0,1.1.0,1.15.0,'Suite .slow() when no argument is passed should return the slow value'
V1.15.0,1.1.0,1.15.0,'Suite .slow() when argument is passed should return the Suite object'
V1.15.0,1.1.0,1.15.0,'Suite .addSuite() "before each" hook'
V1.15.0,1.2.0,1.15.0,'Suite .clone() should copy the slow value'
V1.15.0,1.2.0,1.15.0,'Suite .slow() when given a string should parse it'
V1.15.0,1.2.0,1.15.0,'Suite .slow() when no argument is passed should return the slow value'
V1.15.0,1.2.0,1.15.0,'Suite .slow() when argument is passed should return the Suite object'
V1.15.0,1.2.0,1.15.0,'Suite .addSuite() "before each" hook'
V1.15.0,1.2.1,1.15.0,'Suite .clone() should copy the slow value'
V1.15.0,1.2.1,1.15.0,'Suite .slow() when given a string should parse it'
V1.15.0,1.2.1,1.15.0,'Suite .slow() when no argument is passed should return the slow value'
V1.15.0,1.2.1,1.15.0,'Suite .slow() when argument is passed should return the Suite object'
V1.15.0,1.2.1,1.15.0,'Suite .addSuite() "before each" hook'
V1.15.0,1.2.2,1.15.0,'Suite .clone() should copy the slow value'
V1.15.0,1.2.2,1.15.0,'Suite .slow() when given a string should parse it'
V1.15.0,1.2.2,1.15.0,'Suite .slow() when no argument is passed should return the slow value'
V1.15.0,1.2.2,1.15.0,'Suite .slow() when argument is passed should return the Suite object'
V1.15.0,1.2.2,1.15.0,'Suite .addSuite() "before each" hook'
V1.15.0,1.3.0,1.15.0,'Suite .clone() should copy the slow value'
V1.15.0,1.3.0,1.15.0,'Suite .slow() when given a string should parse it'
V1.15.0,1.3.0,1.15.0,'Suite .slow() when no argument is passed should return the slow value'
V1.15.0,1.3.0,1.15.0,'Suite .slow() when argument is passed should return the Suite object'
V1.15.0,1.3.0,1.15.0,'Suite .addSuite() "before each" hook'
V1.15.0,1.3.1,1.15.0,'Suite .clone() should copy the slow value'
V1.15.0,1.3.1,1.15.0,'Suite .slow() when given a string should parse it'
V1.15.0,1.3.1,1.15.0,'Suite .slow() when no argument is passed should return the slow value'
V1.15.0,1.3.1,1.15.0,'Suite .slow() when argument is passed should return the Suite object'
V1.15.0,1.3.1,1.15.0,'Suite .addSuite() "before each" hook'
V1.15.0,1.3.2,1.15.0,'Suite .clone() should copy the slow value'
V1.15.0,1.3.2,1.15.0,'Suite .slow() when given a string should parse it'
V1.15.0,1.3.2,1.15.0,'Suite .slow() when no argument is passed should return the slow value'
V1.15.0,1.3.2,1.15.0,'Suite .slow() when argument is passed should return the Suite object'
V1.15.0,1.3.2,1.15.0,'Suite .addSuite() "before each" hook'
V1.15.0,1.4.0,1.15.0,'Suite .clone() should copy the slow value'
V1.15.0,1.4.0,1.15.0,'Suite .slow() when given a string should parse it'
V1.15.0,1.4.0,1.15.0,'Suite .slow() when no argument is passed should return the slow value'
V1.15.0,1.4.0,1.15.0,'Suite .slow() when argument is passed should return the Suite object'
V1.15.0,1.4.0,1.15.0,'Suite .addSuite() "before each" hook'
V1.15.0,1.4.1,1.15.0,'Suite .clone() should copy the slow value'
V1.15.0,1.4.1,1.15.0,'Suite .slow() when given a string should parse it'
V1.15.0,1.4.1,1.15.0,'Suite .slow() when no argument is passed should return the slow value'
V1.15.0,1.4.1,1.15.0,'Suite .slow() when argument is passed should return the Suite object'
V1.15.0,1.4.1,1.15.0,'Suite .addSuite() "before each" hook'
V1.15.0,1.4.2,1.15.0,'Suite .clone() should copy the slow value'
V1.15.0,1.4.2,1.15.0,'Suite .slow() when given a string should parse it'
V1.15.0,1.4.2,1.15.0,'Suite .slow() when no argument is passed should return the slow value'
V1.15.0,1.4.2,1.15.0,'Suite .slow() when argument is passed should return the Suite object'
V1.15.0,1.4.2,1.15.0,'Suite .addSuite() "before each" hook'
V1.15.0,1.5.0,1.15.0,'Runner .globalProps() should include common non enumerable globals'
V1.15.0,1.5.0,1.15.0,'Runner .globals() should white-list globals'
V1.15.0,1.5.0,1.15.0,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.15.0,1.5.0,1.15.0,'serial hooks one'
V1.15.0,1.5.0,1.15.0,'serial hooks two'
V1.15.0,1.5.0,1.15.0,'serial hooks three'
V1.15.0,1.5.0,1.15.0,'serial hooks "after all" hook'
V1.15.0,1.6.0,1.15.0,'Runner .globalProps() should include common non enumerable globals'
V1.15.0,1.6.0,1.15.0,'Runner .globals() should white-list globals'
V1.15.0,1.6.0,1.15.0,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.15.0,1.6.0,1.15.0,'serial hooks one'
V1.15.0,1.6.0,1.15.0,'serial hooks two'
V1.15.0,1.6.0,1.15.0,'serial hooks three'
V1.15.0,1.6.0,1.15.0,'serial hooks "after all" hook'
V1.15.0,1.7.0,1.15.0,'Runner .globalProps() should include common non enumerable globals'
V1.15.0,1.7.0,1.15.0,'Runner .globals() should white-list globals'
V1.15.0,1.7.0,1.15.0,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.15.0,1.7.0,1.15.0,'serial hooks one'
V1.15.0,1.7.0,1.15.0,'serial hooks two'
V1.15.0,1.7.0,1.15.0,'serial hooks three'
V1.15.0,1.7.0,1.15.0,'serial hooks "after all" hook'
V1.15.0,1.7.1,1.15.0,'Runner .globalProps() should include common non enumerable globals'
V1.15.0,1.7.1,1.15.0,'Runner .globals() should white-list globals'
V1.15.0,1.7.1,1.15.0,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.15.0,1.7.1,1.15.0,'serial hooks one'
V1.15.0,1.7.1,1.15.0,'serial hooks two'
V1.15.0,1.7.1,1.15.0,'serial hooks three'
V1.15.0,1.7.1,1.15.0,'serial hooks "after all" hook'
V1.15.0,1.7.2,1.15.0,'Runner .globalProps() should include common non enumerable globals'
V1.15.0,1.7.2,1.15.0,'Runner .globals() should white-list globals'
V1.15.0,1.7.2,1.15.0,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.15.0,1.7.2,1.15.0,'serial hooks one'
V1.15.0,1.7.2,1.15.0,'serial hooks two'
V1.15.0,1.7.2,1.15.0,'serial hooks three'
V1.15.0,1.7.2,1.15.0,'serial hooks "after all" hook'
V1.15.0,1.7.3,1.15.0,'Runner .globalProps() should include common non enumerable globals'
V1.15.0,1.7.3,1.15.0,'Runner .globals() should white-list globals'
V1.15.0,1.7.3,1.15.0,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.15.0,1.7.3,1.15.0,'serial hooks one'
V1.15.0,1.7.3,1.15.0,'serial hooks two'
V1.15.0,1.7.3,1.15.0,'serial hooks three'
V1.15.0,1.7.3,1.15.0,'serial hooks "after all" hook'
V1.15.0,1.7.4,1.15.0,'Runner .globalProps() should include common non enumerable globals'
V1.15.0,1.7.4,1.15.0,'Runner .globals() should white-list globals'
V1.15.0,1.7.4,1.15.0,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.15.0,1.7.4,1.15.0,'serial hooks one'
V1.15.0,1.7.4,1.15.0,'serial hooks two'
V1.15.0,1.7.4,1.15.0,'serial hooks three'
V1.15.0,1.7.4,1.15.0,'serial hooks "after all" hook'
V1.15.0,1.8.0,1.15.0,'Runner .globalProps() should include common non enumerable globals'
V1.15.0,1.8.0,1.15.0,'serial hooks "after all" hook'
V1.15.0,1.8.1,1.15.0,'Runner .globalProps() should include common non enumerable globals'
V1.15.0,1.8.1,1.15.0,'Runner .globals() should white-list globals'
V1.15.0,1.8.1,1.15.0,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.15.0,1.8.1,1.15.0,'serial hooks one'
V1.15.0,1.8.1,1.15.0,'serial hooks two'
V1.15.0,1.8.1,1.15.0,'serial hooks three'
V1.15.0,1.8.1,1.15.0,'serial hooks "after all" hook'
V1.15.0,1.8.2,1.15.0,'Runner .globalProps() should include common non enumerable globals'
V1.15.0,1.8.2,1.15.0,'Runner .globals() should white-list globals'
V1.15.0,1.8.2,1.15.0,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.15.0,1.8.2,1.15.0,'serial hooks one'
V1.15.0,1.8.2,1.15.0,'serial hooks two'
V1.15.0,1.8.2,1.15.0,'serial hooks three'
V1.15.0,1.8.2,1.15.0,'serial hooks "after all" hook'
V1.15.0,1.9.0,1.15.0,'Runner .globalProps() should include common non enumerable globals'
V1.15.0,1.9.0,1.15.0,'Runner .globals() should white-list globals'
V1.15.0,1.9.0,1.15.0,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.15.0,1.9.0,1.15.0,'serial hooks one'
V1.15.0,1.9.0,1.15.0,'serial hooks two'
V1.15.0,1.9.0,1.15.0,'serial hooks three'
V1.15.0,1.9.0,1.15.0,'serial hooks "after all" hook'
V1.15.0,1.10.0,1.15.0,'Runner .globalProps() should include common non enumerable globals'
V1.15.0,1.10.0,1.15.0,'Runner .globals() should white-list globals'
V1.15.0,1.10.0,1.15.0,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.15.0,1.10.0,1.15.0,'serial hooks one'
V1.15.0,1.10.0,1.15.0,'serial hooks two'
V1.15.0,1.10.0,1.15.0,'serial hooks three'
V1.15.0,1.10.0,1.15.0,'serial hooks "after all" hook'
V1.15.0,1.11.0,1.15.0,'Runner .globalProps() should include common non enumerable globals'
V1.15.0,1.11.0,1.15.0,'Runner .globals() should white-list globals'
V1.15.0,1.11.0,1.15.0,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.15.0,1.11.0,1.15.0,'serial hooks one'
V1.15.0,1.11.0,1.15.0,'serial hooks two'
V1.15.0,1.11.0,1.15.0,'serial hooks three'
V1.15.0,1.11.0,1.15.0,'serial hooks "after all" hook'
V1.15.0,1.12.0,1.15.0,'Runner .globalProps() should include common non enumerable globals'
V1.15.0,1.12.0,1.15.0,'Runner .globals() should white-list globals'
V1.15.0,1.12.0,1.15.0,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.15.0,1.12.1,1.15.0,'Runner .globalProps() should include common non enumerable globals'
V1.15.0,1.12.1,1.15.0,'Runner .globals() should white-list globals'
V1.15.0,1.12.1,1.15.0,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.15.0,1.13.0,1.15.0,'Runner .globalProps() should include common non enumerable globals'
V1.15.0,1.13.0,1.15.0,'Runner .globals() should white-list globals'
V1.15.0,1.13.0,1.15.0,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.15.0,1.14.0,1.15.0,'Runner .globalProps() should include common non enumerable globals'
V1.15.0,1.14.0,1.15.0,'Runner .globals() should white-list globals'
V1.15.0,1.14.0,1.15.0,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.15.0,1.14.0-mwo1,1.15.0,'Runner .globalProps() should include common non enumerable globals'
V1.15.0,1.14.0-mwo1,1.15.0,'Runner .globals() should white-list globals'
V1.15.0,1.14.0-mwo1,1.15.0,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.15.1,1.15.1,1.15.0,'Runner .globalProps() should include common non enumerable globals'
V1.15.1,1.15.1,1.15.0,'Runner .globals() should white-list globals'
V1.15.1,1.0.0,1.15.1,'Suite .clone() should copy the slow value'
V1.15.1,1.0.0,1.15.1,'Suite .slow() when given a string should parse it'
V1.15.1,1.0.0,1.15.1,'Suite .slow() when no argument is passed should return the slow value'
V1.15.1,1.0.0,1.15.1,'Suite .slow() when argument is passed should return the Suite object'
V1.15.1,1.0.0,1.15.1,'Suite .addSuite() "before each" hook'
V1.15.1,1.0.1,1.15.1,'Suite .clone() should copy the slow value'
V1.15.1,1.0.1,1.15.1,'Suite .slow() when given a string should parse it'
V1.15.1,1.0.1,1.15.1,'Suite .slow() when no argument is passed should return the slow value'
V1.15.1,1.0.1,1.15.1,'Suite .slow() when argument is passed should return the Suite object'
V1.15.1,1.0.1,1.15.1,'Suite .addSuite() "before each" hook'
V1.15.1,1.0.2,1.15.1,'Suite .clone() should copy the slow value'
V1.15.1,1.0.2,1.15.1,'Suite .slow() when given a string should parse it'
V1.15.1,1.0.2,1.15.1,'Suite .slow() when no argument is passed should return the slow value'
V1.15.1,1.0.2,1.15.1,'Suite .slow() when argument is passed should return the Suite object'
V1.15.1,1.0.2,1.15.1,'Suite .addSuite() "before each" hook'
V1.15.1,1.0.3,1.15.1,'Suite .clone() should copy the slow value'
V1.15.1,1.0.3,1.15.1,'Suite .slow() when given a string should parse it'
V1.15.1,1.0.3,1.15.1,'Suite .slow() when no argument is passed should return the slow value'
V1.15.1,1.0.3,1.15.1,'Suite .slow() when argument is passed should return the Suite object'
V1.15.1,1.0.3,1.15.1,'Suite .addSuite() "before each" hook'
V1.15.1,1.1.0,1.15.1,'Suite .clone() should copy the slow value'
V1.15.1,1.1.0,1.15.1,'Suite .slow() when given a string should parse it'
V1.15.1,1.1.0,1.15.1,'Suite .slow() when no argument is passed should return the slow value'
V1.15.1,1.1.0,1.15.1,'Suite .slow() when argument is passed should return the Suite object'
V1.15.1,1.1.0,1.15.1,'Suite .addSuite() "before each" hook'
V1.15.1,1.2.0,1.15.1,'Suite .clone() should copy the slow value'
V1.15.1,1.2.0,1.15.1,'Suite .slow() when given a string should parse it'
V1.15.1,1.2.0,1.15.1,'Suite .slow() when no argument is passed should return the slow value'
V1.15.1,1.2.0,1.15.1,'Suite .slow() when argument is passed should return the Suite object'
V1.15.1,1.2.0,1.15.1,'Suite .addSuite() "before each" hook'
V1.15.1,1.2.1,1.15.1,'Suite .clone() should copy the slow value'
V1.15.1,1.2.1,1.15.1,'Suite .slow() when given a string should parse it'
V1.15.1,1.2.1,1.15.1,'Suite .slow() when no argument is passed should return the slow value'
V1.15.1,1.2.1,1.15.1,'Suite .slow() when argument is passed should return the Suite object'
V1.15.1,1.2.1,1.15.1,'Suite .addSuite() "before each" hook'
V1.15.1,1.2.2,1.15.1,'Suite .clone() should copy the slow value'
V1.15.1,1.2.2,1.15.1,'Suite .slow() when given a string should parse it'
V1.15.1,1.2.2,1.15.1,'Suite .slow() when no argument is passed should return the slow value'
V1.15.1,1.2.2,1.15.1,'Suite .slow() when argument is passed should return the Suite object'
V1.15.1,1.2.2,1.15.1,'Suite .addSuite() "before each" hook'
V1.15.1,1.3.0,1.15.1,'Suite .clone() should copy the slow value'
V1.15.1,1.3.0,1.15.1,'Suite .slow() when given a string should parse it'
V1.15.1,1.3.0,1.15.1,'Suite .slow() when no argument is passed should return the slow value'
V1.15.1,1.3.0,1.15.1,'Suite .slow() when argument is passed should return the Suite object'
V1.15.1,1.3.0,1.15.1,'Suite .addSuite() "before each" hook'
V1.15.1,1.3.1,1.15.1,'Suite .clone() should copy the slow value'
V1.15.1,1.3.1,1.15.1,'Suite .slow() when given a string should parse it'
V1.15.1,1.3.1,1.15.1,'Suite .slow() when no argument is passed should return the slow value'
V1.15.1,1.3.1,1.15.1,'Suite .slow() when argument is passed should return the Suite object'
V1.15.1,1.3.1,1.15.1,'Suite .addSuite() "before each" hook'
V1.15.1,1.3.2,1.15.1,'Suite .clone() should copy the slow value'
V1.15.1,1.3.2,1.15.1,'Suite .slow() when given a string should parse it'
V1.15.1,1.3.2,1.15.1,'Suite .slow() when no argument is passed should return the slow value'
V1.15.1,1.3.2,1.15.1,'Suite .slow() when argument is passed should return the Suite object'
V1.15.1,1.3.2,1.15.1,'Suite .addSuite() "before each" hook'
V1.15.1,1.4.0,1.15.1,'Suite .clone() should copy the slow value'
V1.15.1,1.4.0,1.15.1,'Suite .slow() when given a string should parse it'
V1.15.1,1.4.0,1.15.1,'Suite .slow() when no argument is passed should return the slow value'
V1.15.1,1.4.0,1.15.1,'Suite .slow() when argument is passed should return the Suite object'
V1.15.1,1.4.0,1.15.1,'Suite .addSuite() "before each" hook'
V1.15.1,1.4.1,1.15.1,'Suite .clone() should copy the slow value'
V1.15.1,1.4.1,1.15.1,'Suite .slow() when given a string should parse it'
V1.15.1,1.4.1,1.15.1,'Suite .slow() when no argument is passed should return the slow value'
V1.15.1,1.4.1,1.15.1,'Suite .slow() when argument is passed should return the Suite object'
V1.15.1,1.4.1,1.15.1,'Suite .addSuite() "before each" hook'
V1.15.1,1.4.2,1.15.1,'Suite .clone() should copy the slow value'
V1.15.1,1.4.2,1.15.1,'Suite .slow() when given a string should parse it'
V1.15.1,1.4.2,1.15.1,'Suite .slow() when no argument is passed should return the slow value'
V1.15.1,1.4.2,1.15.1,'Suite .slow() when argument is passed should return the Suite object'
V1.15.1,1.4.2,1.15.1,'Suite .addSuite() "before each" hook'
V1.15.1,1.5.0,1.15.1,'Runner .globalProps() should include common non enumerable globals'
V1.15.1,1.5.0,1.15.1,'Runner .globals() should white-list globals'
V1.15.1,1.5.0,1.15.1,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.15.1,1.5.0,1.15.1,'serial hooks one'
V1.15.1,1.5.0,1.15.1,'serial hooks two'
V1.15.1,1.5.0,1.15.1,'serial hooks three'
V1.15.1,1.5.0,1.15.1,'serial hooks "after all" hook'
V1.15.1,1.6.0,1.15.1,'Runner .globalProps() should include common non enumerable globals'
V1.15.1,1.6.0,1.15.1,'Runner .globals() should white-list globals'
V1.15.1,1.6.0,1.15.1,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.15.1,1.6.0,1.15.1,'serial hooks one'
V1.15.1,1.6.0,1.15.1,'serial hooks two'
V1.15.1,1.6.0,1.15.1,'serial hooks three'
V1.15.1,1.6.0,1.15.1,'serial hooks "after all" hook'
V1.15.1,1.7.0,1.15.1,'Runner .globalProps() should include common non enumerable globals'
V1.15.1,1.7.0,1.15.1,'Runner .globals() should white-list globals'
V1.15.1,1.7.0,1.15.1,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.15.1,1.7.0,1.15.1,'serial hooks one'
V1.15.1,1.7.0,1.15.1,'serial hooks two'
V1.15.1,1.7.0,1.15.1,'serial hooks three'
V1.15.1,1.7.0,1.15.1,'serial hooks "after all" hook'
V1.15.1,1.7.1,1.15.1,'Runner .globalProps() should include common non enumerable globals'
V1.15.1,1.7.1,1.15.1,'Runner .globals() should white-list globals'
V1.15.1,1.7.1,1.15.1,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.15.1,1.7.1,1.15.1,'serial hooks one'
V1.15.1,1.7.1,1.15.1,'serial hooks two'
V1.15.1,1.7.1,1.15.1,'serial hooks three'
V1.15.1,1.7.1,1.15.1,'serial hooks "after all" hook'
V1.15.1,1.7.2,1.15.1,'Runner .globalProps() should include common non enumerable globals'
V1.15.1,1.7.2,1.15.1,'Runner .globals() should white-list globals'
V1.15.1,1.7.2,1.15.1,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.15.1,1.7.2,1.15.1,'serial hooks one'
V1.15.1,1.7.2,1.15.1,'serial hooks two'
V1.15.1,1.7.2,1.15.1,'serial hooks three'
V1.15.1,1.7.2,1.15.1,'serial hooks "after all" hook'
V1.15.1,1.7.3,1.15.1,'Runner .globalProps() should include common non enumerable globals'
V1.15.1,1.7.3,1.15.1,'Runner .globals() should white-list globals'
V1.15.1,1.7.3,1.15.1,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.15.1,1.7.3,1.15.1,'serial hooks one'
V1.15.1,1.7.3,1.15.1,'serial hooks two'
V1.15.1,1.7.3,1.15.1,'serial hooks three'
V1.15.1,1.7.3,1.15.1,'serial hooks "after all" hook'
V1.15.1,1.7.4,1.15.1,'Runner .globalProps() should include common non enumerable globals'
V1.15.1,1.7.4,1.15.1,'Runner .globals() should white-list globals'
V1.15.1,1.7.4,1.15.1,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.15.1,1.7.4,1.15.1,'serial hooks one'
V1.15.1,1.7.4,1.15.1,'serial hooks two'
V1.15.1,1.7.4,1.15.1,'serial hooks three'
V1.15.1,1.7.4,1.15.1,'serial hooks "after all" hook'
V1.15.1,1.8.0,1.15.1,'Runner .globalProps() should include common non enumerable globals'
V1.15.1,1.8.0,1.15.1,'serial hooks "after all" hook'
V1.15.1,1.8.1,1.15.1,'Runner .globalProps() should include common non enumerable globals'
V1.15.1,1.8.1,1.15.1,'Runner .globals() should white-list globals'
V1.15.1,1.8.1,1.15.1,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.15.1,1.8.1,1.15.1,'serial hooks one'
V1.15.1,1.8.1,1.15.1,'serial hooks two'
V1.15.1,1.8.1,1.15.1,'serial hooks three'
V1.15.1,1.8.1,1.15.1,'serial hooks "after all" hook'
V1.15.1,1.8.2,1.15.1,'Runner .globalProps() should include common non enumerable globals'
V1.15.1,1.8.2,1.15.1,'Runner .globals() should white-list globals'
V1.15.1,1.8.2,1.15.1,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.15.1,1.8.2,1.15.1,'serial hooks one'
V1.15.1,1.8.2,1.15.1,'serial hooks two'
V1.15.1,1.8.2,1.15.1,'serial hooks three'
V1.15.1,1.8.2,1.15.1,'serial hooks "after all" hook'
V1.15.1,1.9.0,1.15.1,'Runner .globalProps() should include common non enumerable globals'
V1.15.1,1.9.0,1.15.1,'Runner .globals() should white-list globals'
V1.15.1,1.9.0,1.15.1,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.15.1,1.9.0,1.15.1,'serial hooks one'
V1.15.1,1.9.0,1.15.1,'serial hooks two'
V1.15.1,1.9.0,1.15.1,'serial hooks three'
V1.15.1,1.9.0,1.15.1,'serial hooks "after all" hook'
V1.15.1,1.10.0,1.15.1,'Runner .globalProps() should include common non enumerable globals'
V1.15.1,1.10.0,1.15.1,'Runner .globals() should white-list globals'
V1.15.1,1.10.0,1.15.1,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.15.1,1.10.0,1.15.1,'serial hooks one'
V1.15.1,1.10.0,1.15.1,'serial hooks two'
V1.15.1,1.10.0,1.15.1,'serial hooks three'
V1.15.1,1.10.0,1.15.1,'serial hooks "after all" hook'
V1.15.1,1.11.0,1.15.1,'Runner .globalProps() should include common non enumerable globals'
V1.15.1,1.11.0,1.15.1,'Runner .globals() should white-list globals'
V1.15.1,1.11.0,1.15.1,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.15.1,1.11.0,1.15.1,'serial hooks one'
V1.15.1,1.11.0,1.15.1,'serial hooks two'
V1.15.1,1.11.0,1.15.1,'serial hooks three'
V1.15.1,1.11.0,1.15.1,'serial hooks "after all" hook'
V1.15.1,1.12.0,1.15.1,'Runner .globalProps() should include common non enumerable globals'
V1.15.1,1.12.0,1.15.1,'Runner .globals() should white-list globals'
V1.15.1,1.12.0,1.15.1,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.15.1,1.12.1,1.15.1,'Runner .globalProps() should include common non enumerable globals'
V1.15.1,1.12.1,1.15.1,'Runner .globals() should white-list globals'
V1.15.1,1.12.1,1.15.1,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.15.1,1.13.0,1.15.1,'Runner .globalProps() should include common non enumerable globals'
V1.15.1,1.13.0,1.15.1,'Runner .globals() should white-list globals'
V1.15.1,1.13.0,1.15.1,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.15.1,1.14.0,1.15.1,'Runner .globalProps() should include common non enumerable globals'
V1.15.1,1.14.0,1.15.1,'Runner .globals() should white-list globals'
V1.15.1,1.14.0,1.15.1,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.15.1,1.14.0-mwo1,1.15.1,'Runner .globalProps() should include common non enumerable globals'
V1.15.1,1.14.0-mwo1,1.15.1,'Runner .globals() should white-list globals'
V1.15.1,1.14.0-mwo1,1.15.1,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.15.1,1.15.0,1.15.1,'Runner .globalProps() should include common non enumerable globals'
V1.15.1,1.15.0,1.15.1,'Runner .globals() should white-list globals'
V1.16.0,1.0.0,1.16.0,'Suite .clone() should copy the slow value'
V1.16.0,1.0.0,1.16.0,'Suite .slow() when given a string should parse it'
V1.16.0,1.0.0,1.16.0,'Suite .slow() when no argument is passed should return the slow value'
V1.16.0,1.0.0,1.16.0,'Suite .slow() when argument is passed should return the Suite object'
V1.16.0,1.0.0,1.16.0,'Suite .addSuite() "before each" hook'
V1.16.0,1.0.1,1.16.0,'Suite .clone() should copy the slow value'
V1.16.0,1.0.1,1.16.0,'Suite .slow() when given a string should parse it'
V1.16.0,1.0.1,1.16.0,'Suite .slow() when no argument is passed should return the slow value'
V1.16.0,1.0.1,1.16.0,'Suite .slow() when argument is passed should return the Suite object'
V1.16.0,1.0.1,1.16.0,'Suite .addSuite() "before each" hook'
V1.16.0,1.0.2,1.16.0,'Suite .clone() should copy the slow value'
V1.16.0,1.0.2,1.16.0,'Suite .slow() when given a string should parse it'
V1.16.0,1.0.2,1.16.0,'Suite .slow() when no argument is passed should return the slow value'
V1.16.0,1.0.2,1.16.0,'Suite .slow() when argument is passed should return the Suite object'
V1.16.0,1.0.2,1.16.0,'Suite .addSuite() "before each" hook'
V1.16.0,1.0.3,1.16.0,'Suite .clone() should copy the slow value'
V1.16.0,1.0.3,1.16.0,'Suite .slow() when given a string should parse it'
V1.16.0,1.0.3,1.16.0,'Suite .slow() when no argument is passed should return the slow value'
V1.16.0,1.0.3,1.16.0,'Suite .slow() when argument is passed should return the Suite object'
V1.16.0,1.0.3,1.16.0,'Suite .addSuite() "before each" hook'
V1.16.0,1.1.0,1.16.0,'Suite .clone() should copy the slow value'
V1.16.0,1.1.0,1.16.0,'Suite .slow() when given a string should parse it'
V1.16.0,1.1.0,1.16.0,'Suite .slow() when no argument is passed should return the slow value'
V1.16.0,1.1.0,1.16.0,'Suite .slow() when argument is passed should return the Suite object'
V1.16.0,1.1.0,1.16.0,'Suite .addSuite() "before each" hook'
V1.16.0,1.2.0,1.16.0,'Suite .clone() should copy the slow value'
V1.16.0,1.2.0,1.16.0,'Suite .slow() when given a string should parse it'
V1.16.0,1.2.0,1.16.0,'Suite .slow() when no argument is passed should return the slow value'
V1.16.0,1.2.0,1.16.0,'Suite .slow() when argument is passed should return the Suite object'
V1.16.0,1.2.0,1.16.0,'Suite .addSuite() "before each" hook'
V1.16.0,1.2.1,1.16.0,'Suite .clone() should copy the slow value'
V1.16.0,1.2.1,1.16.0,'Suite .slow() when given a string should parse it'
V1.16.0,1.2.1,1.16.0,'Suite .slow() when no argument is passed should return the slow value'
V1.16.0,1.2.1,1.16.0,'Suite .slow() when argument is passed should return the Suite object'
V1.16.0,1.2.1,1.16.0,'Suite .addSuite() "before each" hook'
V1.16.0,1.2.2,1.16.0,'Suite .clone() should copy the slow value'
V1.16.0,1.2.2,1.16.0,'Suite .slow() when given a string should parse it'
V1.16.0,1.2.2,1.16.0,'Suite .slow() when no argument is passed should return the slow value'
V1.16.0,1.2.2,1.16.0,'Suite .slow() when argument is passed should return the Suite object'
V1.16.0,1.2.2,1.16.0,'Suite .addSuite() "before each" hook'
V1.16.0,1.3.0,1.16.0,'Suite .clone() should copy the slow value'
V1.16.0,1.3.0,1.16.0,'Suite .slow() when given a string should parse it'
V1.16.0,1.3.0,1.16.0,'Suite .slow() when no argument is passed should return the slow value'
V1.16.0,1.3.0,1.16.0,'Suite .slow() when argument is passed should return the Suite object'
V1.16.0,1.3.0,1.16.0,'Suite .addSuite() "before each" hook'
V1.16.0,1.3.1,1.16.0,'Suite .clone() should copy the slow value'
V1.16.0,1.3.1,1.16.0,'Suite .slow() when given a string should parse it'
V1.16.0,1.3.1,1.16.0,'Suite .slow() when no argument is passed should return the slow value'
V1.16.0,1.3.1,1.16.0,'Suite .slow() when argument is passed should return the Suite object'
V1.16.0,1.3.1,1.16.0,'Suite .addSuite() "before each" hook'
V1.16.0,1.3.2,1.16.0,'Suite .clone() should copy the slow value'
V1.16.0,1.3.2,1.16.0,'Suite .slow() when given a string should parse it'
V1.16.0,1.3.2,1.16.0,'Suite .slow() when no argument is passed should return the slow value'
V1.16.0,1.3.2,1.16.0,'Suite .slow() when argument is passed should return the Suite object'
V1.16.0,1.3.2,1.16.0,'Suite .addSuite() "before each" hook'
V1.16.0,1.4.0,1.16.0,'Suite .clone() should copy the slow value'
V1.16.0,1.4.0,1.16.0,'Suite .slow() when given a string should parse it'
V1.16.0,1.4.0,1.16.0,'Suite .slow() when no argument is passed should return the slow value'
V1.16.0,1.4.0,1.16.0,'Suite .slow() when argument is passed should return the Suite object'
V1.16.0,1.4.0,1.16.0,'Suite .addSuite() "before each" hook'
V1.16.0,1.4.1,1.16.0,'Suite .clone() should copy the slow value'
V1.16.0,1.4.1,1.16.0,'Suite .slow() when given a string should parse it'
V1.16.0,1.4.1,1.16.0,'Suite .slow() when no argument is passed should return the slow value'
V1.16.0,1.4.1,1.16.0,'Suite .slow() when argument is passed should return the Suite object'
V1.16.0,1.4.1,1.16.0,'Suite .addSuite() "before each" hook'
V1.16.0,1.4.2,1.16.0,'Suite .clone() should copy the slow value'
V1.16.0,1.4.2,1.16.0,'Suite .slow() when given a string should parse it'
V1.16.0,1.4.2,1.16.0,'Suite .slow() when no argument is passed should return the slow value'
V1.16.0,1.4.2,1.16.0,'Suite .slow() when argument is passed should return the Suite object'
V1.16.0,1.4.2,1.16.0,'Suite .addSuite() "before each" hook'
V1.16.0,1.5.0,1.16.0,'Runner .globalProps() should include common non enumerable globals'
V1.16.0,1.5.0,1.16.0,'Runner .globals() should white-list globals'
V1.16.0,1.5.0,1.16.0,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.16.0,1.5.0,1.16.0,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.16.0,1.5.0,1.16.0,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.16.0,1.5.0,1.16.0,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.16.0,1.5.0,1.16.0,'serial hooks one'
V1.16.0,1.5.0,1.16.0,'serial hooks two'
V1.16.0,1.5.0,1.16.0,'serial hooks three'
V1.16.0,1.5.0,1.16.0,'serial hooks "after all" hook'
V1.16.0,1.6.0,1.16.0,'Runner .globalProps() should include common non enumerable globals'
V1.16.0,1.6.0,1.16.0,'Runner .globals() should white-list globals'
V1.16.0,1.6.0,1.16.0,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.16.0,1.6.0,1.16.0,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.16.0,1.6.0,1.16.0,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.16.0,1.6.0,1.16.0,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.16.0,1.6.0,1.16.0,'serial hooks one'
V1.16.0,1.6.0,1.16.0,'serial hooks two'
V1.16.0,1.6.0,1.16.0,'serial hooks three'
V1.16.0,1.6.0,1.16.0,'serial hooks "after all" hook'
V1.16.0,1.7.0,1.16.0,'Runner .globalProps() should include common non enumerable globals'
V1.16.0,1.7.0,1.16.0,'Runner .globals() should white-list globals'
V1.16.0,1.7.0,1.16.0,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.16.0,1.7.0,1.16.0,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.16.0,1.7.0,1.16.0,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.16.0,1.7.0,1.16.0,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.16.0,1.7.0,1.16.0,'serial hooks one'
V1.16.0,1.7.0,1.16.0,'serial hooks two'
V1.16.0,1.7.0,1.16.0,'serial hooks three'
V1.16.0,1.7.0,1.16.0,'serial hooks "after all" hook'
V1.16.0,1.7.1,1.16.0,'Runner .globalProps() should include common non enumerable globals'
V1.16.0,1.7.1,1.16.0,'Runner .globals() should white-list globals'
V1.16.0,1.7.1,1.16.0,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.16.0,1.7.1,1.16.0,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.16.0,1.7.1,1.16.0,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.16.0,1.7.1,1.16.0,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.16.0,1.7.1,1.16.0,'serial hooks one'
V1.16.0,1.7.1,1.16.0,'serial hooks two'
V1.16.0,1.7.1,1.16.0,'serial hooks three'
V1.16.0,1.7.1,1.16.0,'serial hooks "after all" hook'
V1.16.0,1.7.2,1.16.0,'Runner .globalProps() should include common non enumerable globals'
V1.16.0,1.7.2,1.16.0,'Runner .globals() should white-list globals'
V1.16.0,1.7.2,1.16.0,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.16.0,1.7.2,1.16.0,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.16.0,1.7.2,1.16.0,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.16.0,1.7.2,1.16.0,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.16.0,1.7.2,1.16.0,'serial hooks one'
V1.16.0,1.7.2,1.16.0,'serial hooks two'
V1.16.0,1.7.2,1.16.0,'serial hooks three'
V1.16.0,1.7.2,1.16.0,'serial hooks "after all" hook'
V1.16.0,1.7.3,1.16.0,'Runner .globalProps() should include common non enumerable globals'
V1.16.0,1.7.3,1.16.0,'Runner .globals() should white-list globals'
V1.16.0,1.7.3,1.16.0,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.16.0,1.7.3,1.16.0,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.16.0,1.7.3,1.16.0,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.16.0,1.7.3,1.16.0,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.16.0,1.7.3,1.16.0,'serial hooks one'
V1.16.0,1.7.3,1.16.0,'serial hooks two'
V1.16.0,1.7.3,1.16.0,'serial hooks three'
V1.16.0,1.7.3,1.16.0,'serial hooks "after all" hook'
V1.16.0,1.7.4,1.16.0,'Runner .globalProps() should include common non enumerable globals'
V1.16.0,1.7.4,1.16.0,'Runner .globals() should white-list globals'
V1.16.0,1.7.4,1.16.0,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.16.0,1.7.4,1.16.0,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.16.0,1.7.4,1.16.0,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.16.0,1.7.4,1.16.0,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.16.0,1.7.4,1.16.0,'serial hooks one'
V1.16.0,1.7.4,1.16.0,'serial hooks two'
V1.16.0,1.7.4,1.16.0,'serial hooks three'
V1.16.0,1.7.4,1.16.0,'serial hooks "after all" hook'
V1.16.0,1.8.0,1.16.0,'Runner .globalProps() should include common non enumerable globals'
V1.16.0,1.8.0,1.16.0,'serial hooks "after all" hook'
V1.16.0,1.8.1,1.16.0,'Runner .globalProps() should include common non enumerable globals'
V1.16.0,1.8.1,1.16.0,'Runner .globals() should white-list globals'
V1.16.0,1.8.1,1.16.0,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.16.0,1.8.1,1.16.0,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.16.0,1.8.1,1.16.0,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.16.0,1.8.1,1.16.0,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.16.0,1.8.1,1.16.0,'serial hooks one'
V1.16.0,1.8.1,1.16.0,'serial hooks two'
V1.16.0,1.8.1,1.16.0,'serial hooks three'
V1.16.0,1.8.1,1.16.0,'serial hooks "after all" hook'
V1.16.0,1.8.2,1.16.0,'Runner .globalProps() should include common non enumerable globals'
V1.16.0,1.8.2,1.16.0,'Runner .globals() should white-list globals'
V1.16.0,1.8.2,1.16.0,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.16.0,1.8.2,1.16.0,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.16.0,1.8.2,1.16.0,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.16.0,1.8.2,1.16.0,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.16.0,1.8.2,1.16.0,'serial hooks one'
V1.16.0,1.8.2,1.16.0,'serial hooks two'
V1.16.0,1.8.2,1.16.0,'serial hooks three'
V1.16.0,1.8.2,1.16.0,'serial hooks "after all" hook'
V1.16.0,1.9.0,1.16.0,'Runner .globalProps() should include common non enumerable globals'
V1.16.0,1.9.0,1.16.0,'Runner .globals() should white-list globals'
V1.16.0,1.9.0,1.16.0,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.16.0,1.9.0,1.16.0,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.16.0,1.9.0,1.16.0,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.16.0,1.9.0,1.16.0,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.16.0,1.9.0,1.16.0,'serial hooks one'
V1.16.0,1.9.0,1.16.0,'serial hooks two'
V1.16.0,1.9.0,1.16.0,'serial hooks three'
V1.16.0,1.9.0,1.16.0,'serial hooks "after all" hook'
V1.16.0,1.10.0,1.16.0,'Runner .globalProps() should include common non enumerable globals'
V1.16.0,1.10.0,1.16.0,'Runner .globals() should white-list globals'
V1.16.0,1.10.0,1.16.0,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.16.0,1.10.0,1.16.0,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.16.0,1.10.0,1.16.0,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.16.0,1.10.0,1.16.0,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.16.0,1.10.0,1.16.0,'serial hooks one'
V1.16.0,1.10.0,1.16.0,'serial hooks two'
V1.16.0,1.10.0,1.16.0,'serial hooks three'
V1.16.0,1.10.0,1.16.0,'serial hooks "after all" hook'
V1.16.0,1.11.0,1.16.0,'Runner .globalProps() should include common non enumerable globals'
V1.16.0,1.11.0,1.16.0,'Runner .globals() should white-list globals'
V1.16.0,1.11.0,1.16.0,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.16.0,1.11.0,1.16.0,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.16.0,1.11.0,1.16.0,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.16.0,1.11.0,1.16.0,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.16.0,1.11.0,1.16.0,'serial hooks one'
V1.16.0,1.11.0,1.16.0,'serial hooks two'
V1.16.0,1.11.0,1.16.0,'serial hooks three'
V1.16.0,1.11.0,1.16.0,'serial hooks "after all" hook'
V1.16.0,1.12.0,1.16.0,'Runner .globalProps() should include common non enumerable globals'
V1.16.0,1.12.0,1.16.0,'Runner .globals() should white-list globals'
V1.16.0,1.12.0,1.16.0,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.16.0,1.12.0,1.16.0,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.16.0,1.12.0,1.16.0,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.16.0,1.12.0,1.16.0,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.16.0,1.12.1,1.16.0,'Runner .globalProps() should include common non enumerable globals'
V1.16.0,1.12.1,1.16.0,'Runner .globals() should white-list globals'
V1.16.0,1.12.1,1.16.0,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.16.0,1.12.1,1.16.0,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.16.0,1.12.1,1.16.0,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.16.0,1.12.1,1.16.0,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.16.0,1.13.0,1.16.0,'Runner .globalProps() should include common non enumerable globals'
V1.16.0,1.13.0,1.16.0,'Runner .globals() should white-list globals'
V1.16.0,1.13.0,1.16.0,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.16.0,1.13.0,1.16.0,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.16.0,1.13.0,1.16.0,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.16.0,1.13.0,1.16.0,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.16.0,1.14.0,1.16.0,'Runner .globalProps() should include common non enumerable globals'
V1.16.0,1.14.0,1.16.0,'Runner .globals() should white-list globals'
V1.16.0,1.14.0,1.16.0,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.16.0,1.14.0,1.16.0,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.16.0,1.14.0,1.16.0,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.16.0,1.14.0,1.16.0,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.16.0,1.14.0-mwo1,1.16.0,'Runner .globalProps() should include common non enumerable globals'
V1.16.0,1.14.0-mwo1,1.16.0,'Runner .globals() should white-list globals'
V1.16.0,1.14.0-mwo1,1.16.0,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.16.0,1.14.0-mwo1,1.16.0,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.16.0,1.14.0-mwo1,1.16.0,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.16.0,1.14.0-mwo1,1.16.0,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.16.0,1.15.0,1.16.0,'Runner .globalProps() should include common non enumerable globals'
V1.16.0,1.15.0,1.16.0,'Runner .globals() should white-list globals'
V1.16.0,1.15.0,1.16.0,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.16.0,1.15.0,1.16.0,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.16.0,1.15.0,1.16.0,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.16.0,1.15.1,1.16.0,'Runner .globalProps() should include common non enumerable globals'
V1.16.0,1.15.1,1.16.0,'Runner .globals() should white-list globals'
V1.16.0,1.15.1,1.16.0,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.16.0,1.15.1,1.16.0,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.16.0,1.15.1,1.16.0,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.16.1,1.16.1,1.16.0,'Runner .globalProps() should include common non enumerable globals'
V1.16.1,1.16.1,1.16.0,'Runner .globals() should white-list globals'
V1.16.1,1.0.0,1.16.1,'Suite .clone() should copy the slow value'
V1.16.1,1.0.0,1.16.1,'Suite .slow() when given a string should parse it'
V1.16.1,1.0.0,1.16.1,'Suite .slow() when no argument is passed should return the slow value'
V1.16.1,1.0.0,1.16.1,'Suite .slow() when argument is passed should return the Suite object'
V1.16.1,1.0.0,1.16.1,'Suite .addSuite() "before each" hook'
V1.16.1,1.0.1,1.16.1,'Suite .clone() should copy the slow value'
V1.16.1,1.0.1,1.16.1,'Suite .slow() when given a string should parse it'
V1.16.1,1.0.1,1.16.1,'Suite .slow() when no argument is passed should return the slow value'
V1.16.1,1.0.1,1.16.1,'Suite .slow() when argument is passed should return the Suite object'
V1.16.1,1.0.1,1.16.1,'Suite .addSuite() "before each" hook'
V1.16.1,1.0.2,1.16.1,'Suite .clone() should copy the slow value'
V1.16.1,1.0.2,1.16.1,'Suite .slow() when given a string should parse it'
V1.16.1,1.0.2,1.16.1,'Suite .slow() when no argument is passed should return the slow value'
V1.16.1,1.0.2,1.16.1,'Suite .slow() when argument is passed should return the Suite object'
V1.16.1,1.0.2,1.16.1,'Suite .addSuite() "before each" hook'
V1.16.1,1.0.3,1.16.1,'Suite .clone() should copy the slow value'
V1.16.1,1.0.3,1.16.1,'Suite .slow() when given a string should parse it'
V1.16.1,1.0.3,1.16.1,'Suite .slow() when no argument is passed should return the slow value'
V1.16.1,1.0.3,1.16.1,'Suite .slow() when argument is passed should return the Suite object'
V1.16.1,1.0.3,1.16.1,'Suite .addSuite() "before each" hook'
V1.16.1,1.1.0,1.16.1,'Suite .clone() should copy the slow value'
V1.16.1,1.1.0,1.16.1,'Suite .slow() when given a string should parse it'
V1.16.1,1.1.0,1.16.1,'Suite .slow() when no argument is passed should return the slow value'
V1.16.1,1.1.0,1.16.1,'Suite .slow() when argument is passed should return the Suite object'
V1.16.1,1.1.0,1.16.1,'Suite .addSuite() "before each" hook'
V1.16.1,1.2.0,1.16.1,'Suite .clone() should copy the slow value'
V1.16.1,1.2.0,1.16.1,'Suite .slow() when given a string should parse it'
V1.16.1,1.2.0,1.16.1,'Suite .slow() when no argument is passed should return the slow value'
V1.16.1,1.2.0,1.16.1,'Suite .slow() when argument is passed should return the Suite object'
V1.16.1,1.2.0,1.16.1,'Suite .addSuite() "before each" hook'
V1.16.1,1.2.1,1.16.1,'Suite .clone() should copy the slow value'
V1.16.1,1.2.1,1.16.1,'Suite .slow() when given a string should parse it'
V1.16.1,1.2.1,1.16.1,'Suite .slow() when no argument is passed should return the slow value'
V1.16.1,1.2.1,1.16.1,'Suite .slow() when argument is passed should return the Suite object'
V1.16.1,1.2.1,1.16.1,'Suite .addSuite() "before each" hook'
V1.16.1,1.2.2,1.16.1,'Suite .clone() should copy the slow value'
V1.16.1,1.2.2,1.16.1,'Suite .slow() when given a string should parse it'
V1.16.1,1.2.2,1.16.1,'Suite .slow() when no argument is passed should return the slow value'
V1.16.1,1.2.2,1.16.1,'Suite .slow() when argument is passed should return the Suite object'
V1.16.1,1.2.2,1.16.1,'Suite .addSuite() "before each" hook'
V1.16.1,1.3.0,1.16.1,'Suite .clone() should copy the slow value'
V1.16.1,1.3.0,1.16.1,'Suite .slow() when given a string should parse it'
V1.16.1,1.3.0,1.16.1,'Suite .slow() when no argument is passed should return the slow value'
V1.16.1,1.3.0,1.16.1,'Suite .slow() when argument is passed should return the Suite object'
V1.16.1,1.3.0,1.16.1,'Suite .addSuite() "before each" hook'
V1.16.1,1.3.1,1.16.1,'Suite .clone() should copy the slow value'
V1.16.1,1.3.1,1.16.1,'Suite .slow() when given a string should parse it'
V1.16.1,1.3.1,1.16.1,'Suite .slow() when no argument is passed should return the slow value'
V1.16.1,1.3.1,1.16.1,'Suite .slow() when argument is passed should return the Suite object'
V1.16.1,1.3.1,1.16.1,'Suite .addSuite() "before each" hook'
V1.16.1,1.3.2,1.16.1,'Suite .clone() should copy the slow value'
V1.16.1,1.3.2,1.16.1,'Suite .slow() when given a string should parse it'
V1.16.1,1.3.2,1.16.1,'Suite .slow() when no argument is passed should return the slow value'
V1.16.1,1.3.2,1.16.1,'Suite .slow() when argument is passed should return the Suite object'
V1.16.1,1.3.2,1.16.1,'Suite .addSuite() "before each" hook'
V1.16.1,1.4.0,1.16.1,'Suite .clone() should copy the slow value'
V1.16.1,1.4.0,1.16.1,'Suite .slow() when given a string should parse it'
V1.16.1,1.4.0,1.16.1,'Suite .slow() when no argument is passed should return the slow value'
V1.16.1,1.4.0,1.16.1,'Suite .slow() when argument is passed should return the Suite object'
V1.16.1,1.4.0,1.16.1,'Suite .addSuite() "before each" hook'
V1.16.1,1.4.1,1.16.1,'Suite .clone() should copy the slow value'
V1.16.1,1.4.1,1.16.1,'Suite .slow() when given a string should parse it'
V1.16.1,1.4.1,1.16.1,'Suite .slow() when no argument is passed should return the slow value'
V1.16.1,1.4.1,1.16.1,'Suite .slow() when argument is passed should return the Suite object'
V1.16.1,1.4.1,1.16.1,'Suite .addSuite() "before each" hook'
V1.16.1,1.4.2,1.16.1,'Suite .clone() should copy the slow value'
V1.16.1,1.4.2,1.16.1,'Suite .slow() when given a string should parse it'
V1.16.1,1.4.2,1.16.1,'Suite .slow() when no argument is passed should return the slow value'
V1.16.1,1.4.2,1.16.1,'Suite .slow() when argument is passed should return the Suite object'
V1.16.1,1.4.2,1.16.1,'Suite .addSuite() "before each" hook'
V1.16.1,1.5.0,1.16.1,'Runner .globalProps() should include common non enumerable globals'
V1.16.1,1.5.0,1.16.1,'Runner .globals() should white-list globals'
V1.16.1,1.5.0,1.16.1,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.16.1,1.5.0,1.16.1,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.16.1,1.5.0,1.16.1,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.16.1,1.5.0,1.16.1,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.16.1,1.5.0,1.16.1,'serial hooks one'
V1.16.1,1.5.0,1.16.1,'serial hooks two'
V1.16.1,1.5.0,1.16.1,'serial hooks three'
V1.16.1,1.5.0,1.16.1,'serial hooks "after all" hook'
V1.16.1,1.6.0,1.16.1,'Runner .globalProps() should include common non enumerable globals'
V1.16.1,1.6.0,1.16.1,'Runner .globals() should white-list globals'
V1.16.1,1.6.0,1.16.1,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.16.1,1.6.0,1.16.1,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.16.1,1.6.0,1.16.1,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.16.1,1.6.0,1.16.1,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.16.1,1.6.0,1.16.1,'serial hooks one'
V1.16.1,1.6.0,1.16.1,'serial hooks two'
V1.16.1,1.6.0,1.16.1,'serial hooks three'
V1.16.1,1.6.0,1.16.1,'serial hooks "after all" hook'
V1.16.1,1.7.0,1.16.1,'Runner .globalProps() should include common non enumerable globals'
V1.16.1,1.7.0,1.16.1,'Runner .globals() should white-list globals'
V1.16.1,1.7.0,1.16.1,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.16.1,1.7.0,1.16.1,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.16.1,1.7.0,1.16.1,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.16.1,1.7.0,1.16.1,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.16.1,1.7.0,1.16.1,'serial hooks one'
V1.16.1,1.7.0,1.16.1,'serial hooks two'
V1.16.1,1.7.0,1.16.1,'serial hooks three'
V1.16.1,1.7.0,1.16.1,'serial hooks "after all" hook'
V1.16.1,1.7.1,1.16.1,'Runner .globalProps() should include common non enumerable globals'
V1.16.1,1.7.1,1.16.1,'Runner .globals() should white-list globals'
V1.16.1,1.7.1,1.16.1,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.16.1,1.7.1,1.16.1,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.16.1,1.7.1,1.16.1,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.16.1,1.7.1,1.16.1,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.16.1,1.7.1,1.16.1,'serial hooks one'
V1.16.1,1.7.1,1.16.1,'serial hooks two'
V1.16.1,1.7.1,1.16.1,'serial hooks three'
V1.16.1,1.7.1,1.16.1,'serial hooks "after all" hook'
V1.16.1,1.7.2,1.16.1,'Runner .globalProps() should include common non enumerable globals'
V1.16.1,1.7.2,1.16.1,'Runner .globals() should white-list globals'
V1.16.1,1.7.2,1.16.1,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.16.1,1.7.2,1.16.1,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.16.1,1.7.2,1.16.1,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.16.1,1.7.2,1.16.1,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.16.1,1.7.2,1.16.1,'serial hooks one'
V1.16.1,1.7.2,1.16.1,'serial hooks two'
V1.16.1,1.7.2,1.16.1,'serial hooks three'
V1.16.1,1.7.2,1.16.1,'serial hooks "after all" hook'
V1.16.1,1.7.3,1.16.1,'Runner .globalProps() should include common non enumerable globals'
V1.16.1,1.7.3,1.16.1,'Runner .globals() should white-list globals'
V1.16.1,1.7.3,1.16.1,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.16.1,1.7.3,1.16.1,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.16.1,1.7.3,1.16.1,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.16.1,1.7.3,1.16.1,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.16.1,1.7.3,1.16.1,'serial hooks one'
V1.16.1,1.7.3,1.16.1,'serial hooks two'
V1.16.1,1.7.3,1.16.1,'serial hooks three'
V1.16.1,1.7.3,1.16.1,'serial hooks "after all" hook'
V1.16.1,1.7.4,1.16.1,'Runner .globalProps() should include common non enumerable globals'
V1.16.1,1.7.4,1.16.1,'Runner .globals() should white-list globals'
V1.16.1,1.7.4,1.16.1,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.16.1,1.7.4,1.16.1,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.16.1,1.7.4,1.16.1,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.16.1,1.7.4,1.16.1,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.16.1,1.7.4,1.16.1,'serial hooks one'
V1.16.1,1.7.4,1.16.1,'serial hooks two'
V1.16.1,1.7.4,1.16.1,'serial hooks three'
V1.16.1,1.7.4,1.16.1,'serial hooks "after all" hook'
V1.16.1,1.8.0,1.16.1,'Runner .globalProps() should include common non enumerable globals'
V1.16.1,1.8.0,1.16.1,'serial hooks "after all" hook'
V1.16.1,1.8.1,1.16.1,'Runner .globalProps() should include common non enumerable globals'
V1.16.1,1.8.1,1.16.1,'Runner .globals() should white-list globals'
V1.16.1,1.8.1,1.16.1,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.16.1,1.8.1,1.16.1,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.16.1,1.8.1,1.16.1,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.16.1,1.8.1,1.16.1,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.16.1,1.8.1,1.16.1,'serial hooks one'
V1.16.1,1.8.1,1.16.1,'serial hooks two'
V1.16.1,1.8.1,1.16.1,'serial hooks three'
V1.16.1,1.8.1,1.16.1,'serial hooks "after all" hook'
V1.16.1,1.8.2,1.16.1,'Runner .globalProps() should include common non enumerable globals'
V1.16.1,1.8.2,1.16.1,'Runner .globals() should white-list globals'
V1.16.1,1.8.2,1.16.1,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.16.1,1.8.2,1.16.1,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.16.1,1.8.2,1.16.1,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.16.1,1.8.2,1.16.1,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.16.1,1.8.2,1.16.1,'serial hooks one'
V1.16.1,1.8.2,1.16.1,'serial hooks two'
V1.16.1,1.8.2,1.16.1,'serial hooks three'
V1.16.1,1.8.2,1.16.1,'serial hooks "after all" hook'
V1.16.1,1.9.0,1.16.1,'Runner .globalProps() should include common non enumerable globals'
V1.16.1,1.9.0,1.16.1,'Runner .globals() should white-list globals'
V1.16.1,1.9.0,1.16.1,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.16.1,1.9.0,1.16.1,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.16.1,1.9.0,1.16.1,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.16.1,1.9.0,1.16.1,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.16.1,1.9.0,1.16.1,'serial hooks one'
V1.16.1,1.9.0,1.16.1,'serial hooks two'
V1.16.1,1.9.0,1.16.1,'serial hooks three'
V1.16.1,1.9.0,1.16.1,'serial hooks "after all" hook'
V1.16.1,1.10.0,1.16.1,'Runner .globalProps() should include common non enumerable globals'
V1.16.1,1.10.0,1.16.1,'Runner .globals() should white-list globals'
V1.16.1,1.10.0,1.16.1,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.16.1,1.10.0,1.16.1,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.16.1,1.10.0,1.16.1,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.16.1,1.10.0,1.16.1,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.16.1,1.10.0,1.16.1,'serial hooks one'
V1.16.1,1.10.0,1.16.1,'serial hooks two'
V1.16.1,1.10.0,1.16.1,'serial hooks three'
V1.16.1,1.10.0,1.16.1,'serial hooks "after all" hook'
V1.16.1,1.11.0,1.16.1,'Runner .globalProps() should include common non enumerable globals'
V1.16.1,1.11.0,1.16.1,'Runner .globals() should white-list globals'
V1.16.1,1.11.0,1.16.1,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.16.1,1.11.0,1.16.1,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.16.1,1.11.0,1.16.1,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.16.1,1.11.0,1.16.1,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.16.1,1.11.0,1.16.1,'serial hooks one'
V1.16.1,1.11.0,1.16.1,'serial hooks two'
V1.16.1,1.11.0,1.16.1,'serial hooks three'
V1.16.1,1.11.0,1.16.1,'serial hooks "after all" hook'
V1.16.1,1.12.0,1.16.1,'Runner .globalProps() should include common non enumerable globals'
V1.16.1,1.12.0,1.16.1,'Runner .globals() should white-list globals'
V1.16.1,1.12.0,1.16.1,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.16.1,1.12.0,1.16.1,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.16.1,1.12.0,1.16.1,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.16.1,1.12.0,1.16.1,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.16.1,1.12.1,1.16.1,'Runner .globalProps() should include common non enumerable globals'
V1.16.1,1.12.1,1.16.1,'Runner .globals() should white-list globals'
V1.16.1,1.12.1,1.16.1,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.16.1,1.12.1,1.16.1,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.16.1,1.12.1,1.16.1,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.16.1,1.12.1,1.16.1,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.16.1,1.13.0,1.16.1,'Runner .globalProps() should include common non enumerable globals'
V1.16.1,1.13.0,1.16.1,'Runner .globals() should white-list globals'
V1.16.1,1.13.0,1.16.1,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.16.1,1.13.0,1.16.1,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.16.1,1.13.0,1.16.1,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.16.1,1.13.0,1.16.1,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.16.1,1.14.0,1.16.1,'Runner .globalProps() should include common non enumerable globals'
V1.16.1,1.14.0,1.16.1,'Runner .globals() should white-list globals'
V1.16.1,1.14.0,1.16.1,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.16.1,1.14.0,1.16.1,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.16.1,1.14.0,1.16.1,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.16.1,1.14.0,1.16.1,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.16.1,1.14.0-mwo1,1.16.1,'Runner .globalProps() should include common non enumerable globals'
V1.16.1,1.14.0-mwo1,1.16.1,'Runner .globals() should white-list globals'
V1.16.1,1.14.0-mwo1,1.16.1,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.16.1,1.14.0-mwo1,1.16.1,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.16.1,1.14.0-mwo1,1.16.1,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.16.1,1.14.0-mwo1,1.16.1,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.16.1,1.15.0,1.16.1,'Runner .globalProps() should include common non enumerable globals'
V1.16.1,1.15.0,1.16.1,'Runner .globals() should white-list globals'
V1.16.1,1.15.0,1.16.1,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.16.1,1.15.0,1.16.1,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.16.1,1.15.0,1.16.1,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.16.1,1.15.1,1.16.1,'Runner .globalProps() should include common non enumerable globals'
V1.16.1,1.15.1,1.16.1,'Runner .globals() should white-list globals'
V1.16.1,1.15.1,1.16.1,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.16.1,1.15.1,1.16.1,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.16.1,1.15.1,1.16.1,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.16.1,1.16.0,1.16.1,'Runner .globalProps() should include common non enumerable globals'
V1.16.1,1.16.0,1.16.1,'Runner .globals() should white-list globals'
V1.16.2,1.16.2,1.16.0,'Runner .globalProps() should include common non enumerable globals'
V1.16.2,1.16.2,1.16.0,'Runner .globals() should white-list globals'
V1.16.2,1.16.2,1.16.1,'Runner .globalProps() should include common non enumerable globals'
V1.16.2,1.16.2,1.16.1,'Runner .globals() should white-list globals'
V1.16.2,1.0.0,1.16.2,'Suite .clone() should copy the slow value'
V1.16.2,1.0.0,1.16.2,'Suite .slow() when given a string should parse it'
V1.16.2,1.0.0,1.16.2,'Suite .slow() when no argument is passed should return the slow value'
V1.16.2,1.0.0,1.16.2,'Suite .slow() when argument is passed should return the Suite object'
V1.16.2,1.0.0,1.16.2,'Suite .addSuite() "before each" hook'
V1.16.2,1.0.1,1.16.2,'Suite .clone() should copy the slow value'
V1.16.2,1.0.1,1.16.2,'Suite .slow() when given a string should parse it'
V1.16.2,1.0.1,1.16.2,'Suite .slow() when no argument is passed should return the slow value'
V1.16.2,1.0.1,1.16.2,'Suite .slow() when argument is passed should return the Suite object'
V1.16.2,1.0.1,1.16.2,'Suite .addSuite() "before each" hook'
V1.16.2,1.0.2,1.16.2,'Suite .clone() should copy the slow value'
V1.16.2,1.0.2,1.16.2,'Suite .slow() when given a string should parse it'
V1.16.2,1.0.2,1.16.2,'Suite .slow() when no argument is passed should return the slow value'
V1.16.2,1.0.2,1.16.2,'Suite .slow() when argument is passed should return the Suite object'
V1.16.2,1.0.2,1.16.2,'Suite .addSuite() "before each" hook'
V1.16.2,1.0.3,1.16.2,'Suite .clone() should copy the slow value'
V1.16.2,1.0.3,1.16.2,'Suite .slow() when given a string should parse it'
V1.16.2,1.0.3,1.16.2,'Suite .slow() when no argument is passed should return the slow value'
V1.16.2,1.0.3,1.16.2,'Suite .slow() when argument is passed should return the Suite object'
V1.16.2,1.0.3,1.16.2,'Suite .addSuite() "before each" hook'
V1.16.2,1.1.0,1.16.2,'Suite .clone() should copy the slow value'
V1.16.2,1.1.0,1.16.2,'Suite .slow() when given a string should parse it'
V1.16.2,1.1.0,1.16.2,'Suite .slow() when no argument is passed should return the slow value'
V1.16.2,1.1.0,1.16.2,'Suite .slow() when argument is passed should return the Suite object'
V1.16.2,1.1.0,1.16.2,'Suite .addSuite() "before each" hook'
V1.16.2,1.2.0,1.16.2,'Suite .clone() should copy the slow value'
V1.16.2,1.2.0,1.16.2,'Suite .slow() when given a string should parse it'
V1.16.2,1.2.0,1.16.2,'Suite .slow() when no argument is passed should return the slow value'
V1.16.2,1.2.0,1.16.2,'Suite .slow() when argument is passed should return the Suite object'
V1.16.2,1.2.0,1.16.2,'Suite .addSuite() "before each" hook'
V1.16.2,1.2.1,1.16.2,'Suite .clone() should copy the slow value'
V1.16.2,1.2.1,1.16.2,'Suite .slow() when given a string should parse it'
V1.16.2,1.2.1,1.16.2,'Suite .slow() when no argument is passed should return the slow value'
V1.16.2,1.2.1,1.16.2,'Suite .slow() when argument is passed should return the Suite object'
V1.16.2,1.2.1,1.16.2,'Suite .addSuite() "before each" hook'
V1.16.2,1.2.2,1.16.2,'Suite .clone() should copy the slow value'
V1.16.2,1.2.2,1.16.2,'Suite .slow() when given a string should parse it'
V1.16.2,1.2.2,1.16.2,'Suite .slow() when no argument is passed should return the slow value'
V1.16.2,1.2.2,1.16.2,'Suite .slow() when argument is passed should return the Suite object'
V1.16.2,1.2.2,1.16.2,'Suite .addSuite() "before each" hook'
V1.16.2,1.3.0,1.16.2,'Suite .clone() should copy the slow value'
V1.16.2,1.3.0,1.16.2,'Suite .slow() when given a string should parse it'
V1.16.2,1.3.0,1.16.2,'Suite .slow() when no argument is passed should return the slow value'
V1.16.2,1.3.0,1.16.2,'Suite .slow() when argument is passed should return the Suite object'
V1.16.2,1.3.0,1.16.2,'Suite .addSuite() "before each" hook'
V1.16.2,1.3.1,1.16.2,'Suite .clone() should copy the slow value'
V1.16.2,1.3.1,1.16.2,'Suite .slow() when given a string should parse it'
V1.16.2,1.3.1,1.16.2,'Suite .slow() when no argument is passed should return the slow value'
V1.16.2,1.3.1,1.16.2,'Suite .slow() when argument is passed should return the Suite object'
V1.16.2,1.3.1,1.16.2,'Suite .addSuite() "before each" hook'
V1.16.2,1.3.2,1.16.2,'Suite .clone() should copy the slow value'
V1.16.2,1.3.2,1.16.2,'Suite .slow() when given a string should parse it'
V1.16.2,1.3.2,1.16.2,'Suite .slow() when no argument is passed should return the slow value'
V1.16.2,1.3.2,1.16.2,'Suite .slow() when argument is passed should return the Suite object'
V1.16.2,1.3.2,1.16.2,'Suite .addSuite() "before each" hook'
V1.16.2,1.4.0,1.16.2,'Suite .clone() should copy the slow value'
V1.16.2,1.4.0,1.16.2,'Suite .slow() when given a string should parse it'
V1.16.2,1.4.0,1.16.2,'Suite .slow() when no argument is passed should return the slow value'
V1.16.2,1.4.0,1.16.2,'Suite .slow() when argument is passed should return the Suite object'
V1.16.2,1.4.0,1.16.2,'Suite .addSuite() "before each" hook'
V1.16.2,1.4.1,1.16.2,'Suite .clone() should copy the slow value'
V1.16.2,1.4.1,1.16.2,'Suite .slow() when given a string should parse it'
V1.16.2,1.4.1,1.16.2,'Suite .slow() when no argument is passed should return the slow value'
V1.16.2,1.4.1,1.16.2,'Suite .slow() when argument is passed should return the Suite object'
V1.16.2,1.4.1,1.16.2,'Suite .addSuite() "before each" hook'
V1.16.2,1.4.2,1.16.2,'Suite .clone() should copy the slow value'
V1.16.2,1.4.2,1.16.2,'Suite .slow() when given a string should parse it'
V1.16.2,1.4.2,1.16.2,'Suite .slow() when no argument is passed should return the slow value'
V1.16.2,1.4.2,1.16.2,'Suite .slow() when argument is passed should return the Suite object'
V1.16.2,1.4.2,1.16.2,'Suite .addSuite() "before each" hook'
V1.16.2,1.5.0,1.16.2,'Runner .globalProps() should include common non enumerable globals'
V1.16.2,1.5.0,1.16.2,'Runner .globals() should white-list globals'
V1.16.2,1.5.0,1.16.2,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.16.2,1.5.0,1.16.2,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.16.2,1.5.0,1.16.2,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.16.2,1.5.0,1.16.2,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.16.2,1.5.0,1.16.2,'serial hooks one'
V1.16.2,1.5.0,1.16.2,'serial hooks two'
V1.16.2,1.5.0,1.16.2,'serial hooks three'
V1.16.2,1.5.0,1.16.2,'serial hooks "after all" hook'
V1.16.2,1.6.0,1.16.2,'Runner .globalProps() should include common non enumerable globals'
V1.16.2,1.6.0,1.16.2,'Runner .globals() should white-list globals'
V1.16.2,1.6.0,1.16.2,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.16.2,1.6.0,1.16.2,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.16.2,1.6.0,1.16.2,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.16.2,1.6.0,1.16.2,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.16.2,1.6.0,1.16.2,'serial hooks one'
V1.16.2,1.6.0,1.16.2,'serial hooks two'
V1.16.2,1.6.0,1.16.2,'serial hooks three'
V1.16.2,1.6.0,1.16.2,'serial hooks "after all" hook'
V1.16.2,1.7.0,1.16.2,'Runner .globalProps() should include common non enumerable globals'
V1.16.2,1.7.0,1.16.2,'Runner .globals() should white-list globals'
V1.16.2,1.7.0,1.16.2,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.16.2,1.7.0,1.16.2,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.16.2,1.7.0,1.16.2,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.16.2,1.7.0,1.16.2,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.16.2,1.7.0,1.16.2,'serial hooks one'
V1.16.2,1.7.0,1.16.2,'serial hooks two'
V1.16.2,1.7.0,1.16.2,'serial hooks three'
V1.16.2,1.7.0,1.16.2,'serial hooks "after all" hook'
V1.16.2,1.7.1,1.16.2,'Runner .globalProps() should include common non enumerable globals'
V1.16.2,1.7.1,1.16.2,'Runner .globals() should white-list globals'
V1.16.2,1.7.1,1.16.2,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.16.2,1.7.1,1.16.2,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.16.2,1.7.1,1.16.2,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.16.2,1.7.1,1.16.2,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.16.2,1.7.1,1.16.2,'serial hooks one'
V1.16.2,1.7.1,1.16.2,'serial hooks two'
V1.16.2,1.7.1,1.16.2,'serial hooks three'
V1.16.2,1.7.1,1.16.2,'serial hooks "after all" hook'
V1.16.2,1.7.2,1.16.2,'Runner .globalProps() should include common non enumerable globals'
V1.16.2,1.7.2,1.16.2,'Runner .globals() should white-list globals'
V1.16.2,1.7.2,1.16.2,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.16.2,1.7.2,1.16.2,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.16.2,1.7.2,1.16.2,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.16.2,1.7.2,1.16.2,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.16.2,1.7.2,1.16.2,'serial hooks one'
V1.16.2,1.7.2,1.16.2,'serial hooks two'
V1.16.2,1.7.2,1.16.2,'serial hooks three'
V1.16.2,1.7.2,1.16.2,'serial hooks "after all" hook'
V1.16.2,1.7.3,1.16.2,'Runner .globalProps() should include common non enumerable globals'
V1.16.2,1.7.3,1.16.2,'Runner .globals() should white-list globals'
V1.16.2,1.7.3,1.16.2,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.16.2,1.7.3,1.16.2,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.16.2,1.7.3,1.16.2,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.16.2,1.7.3,1.16.2,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.16.2,1.7.3,1.16.2,'serial hooks one'
V1.16.2,1.7.3,1.16.2,'serial hooks two'
V1.16.2,1.7.3,1.16.2,'serial hooks three'
V1.16.2,1.7.3,1.16.2,'serial hooks "after all" hook'
V1.16.2,1.7.4,1.16.2,'Runner .globalProps() should include common non enumerable globals'
V1.16.2,1.7.4,1.16.2,'Runner .globals() should white-list globals'
V1.16.2,1.7.4,1.16.2,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.16.2,1.7.4,1.16.2,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.16.2,1.7.4,1.16.2,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.16.2,1.7.4,1.16.2,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.16.2,1.7.4,1.16.2,'serial hooks one'
V1.16.2,1.7.4,1.16.2,'serial hooks two'
V1.16.2,1.7.4,1.16.2,'serial hooks three'
V1.16.2,1.7.4,1.16.2,'serial hooks "after all" hook'
V1.16.2,1.8.0,1.16.2,'Runner .globalProps() should include common non enumerable globals'
V1.16.2,1.8.0,1.16.2,'serial hooks "after all" hook'
V1.16.2,1.8.1,1.16.2,'Runner .globalProps() should include common non enumerable globals'
V1.16.2,1.8.1,1.16.2,'Runner .globals() should white-list globals'
V1.16.2,1.8.1,1.16.2,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.16.2,1.8.1,1.16.2,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.16.2,1.8.1,1.16.2,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.16.2,1.8.1,1.16.2,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.16.2,1.8.1,1.16.2,'serial hooks one'
V1.16.2,1.8.1,1.16.2,'serial hooks two'
V1.16.2,1.8.1,1.16.2,'serial hooks three'
V1.16.2,1.8.1,1.16.2,'serial hooks "after all" hook'
V1.16.2,1.8.2,1.16.2,'Runner .globalProps() should include common non enumerable globals'
V1.16.2,1.8.2,1.16.2,'Runner .globals() should white-list globals'
V1.16.2,1.8.2,1.16.2,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.16.2,1.8.2,1.16.2,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.16.2,1.8.2,1.16.2,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.16.2,1.8.2,1.16.2,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.16.2,1.8.2,1.16.2,'serial hooks one'
V1.16.2,1.8.2,1.16.2,'serial hooks two'
V1.16.2,1.8.2,1.16.2,'serial hooks three'
V1.16.2,1.8.2,1.16.2,'serial hooks "after all" hook'
V1.16.2,1.9.0,1.16.2,'Runner .globalProps() should include common non enumerable globals'
V1.16.2,1.9.0,1.16.2,'Runner .globals() should white-list globals'
V1.16.2,1.9.0,1.16.2,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.16.2,1.9.0,1.16.2,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.16.2,1.9.0,1.16.2,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.16.2,1.9.0,1.16.2,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.16.2,1.9.0,1.16.2,'serial hooks one'
V1.16.2,1.9.0,1.16.2,'serial hooks two'
V1.16.2,1.9.0,1.16.2,'serial hooks three'
V1.16.2,1.9.0,1.16.2,'serial hooks "after all" hook'
V1.16.2,1.10.0,1.16.2,'Runner .globalProps() should include common non enumerable globals'
V1.16.2,1.10.0,1.16.2,'Runner .globals() should white-list globals'
V1.16.2,1.10.0,1.16.2,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.16.2,1.10.0,1.16.2,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.16.2,1.10.0,1.16.2,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.16.2,1.10.0,1.16.2,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.16.2,1.10.0,1.16.2,'serial hooks one'
V1.16.2,1.10.0,1.16.2,'serial hooks two'
V1.16.2,1.10.0,1.16.2,'serial hooks three'
V1.16.2,1.10.0,1.16.2,'serial hooks "after all" hook'
V1.16.2,1.11.0,1.16.2,'Runner .globalProps() should include common non enumerable globals'
V1.16.2,1.11.0,1.16.2,'Runner .globals() should white-list globals'
V1.16.2,1.11.0,1.16.2,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.16.2,1.11.0,1.16.2,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.16.2,1.11.0,1.16.2,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.16.2,1.11.0,1.16.2,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.16.2,1.11.0,1.16.2,'serial hooks one'
V1.16.2,1.11.0,1.16.2,'serial hooks two'
V1.16.2,1.11.0,1.16.2,'serial hooks three'
V1.16.2,1.11.0,1.16.2,'serial hooks "after all" hook'
V1.16.2,1.12.0,1.16.2,'Runner .globalProps() should include common non enumerable globals'
V1.16.2,1.12.0,1.16.2,'Runner .globals() should white-list globals'
V1.16.2,1.12.0,1.16.2,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.16.2,1.12.0,1.16.2,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.16.2,1.12.0,1.16.2,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.16.2,1.12.0,1.16.2,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.16.2,1.12.1,1.16.2,'Runner .globalProps() should include common non enumerable globals'
V1.16.2,1.12.1,1.16.2,'Runner .globals() should white-list globals'
V1.16.2,1.12.1,1.16.2,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.16.2,1.12.1,1.16.2,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.16.2,1.12.1,1.16.2,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.16.2,1.12.1,1.16.2,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.16.2,1.13.0,1.16.2,'Runner .globalProps() should include common non enumerable globals'
V1.16.2,1.13.0,1.16.2,'Runner .globals() should white-list globals'
V1.16.2,1.13.0,1.16.2,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.16.2,1.13.0,1.16.2,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.16.2,1.13.0,1.16.2,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.16.2,1.13.0,1.16.2,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.16.2,1.14.0,1.16.2,'Runner .globalProps() should include common non enumerable globals'
V1.16.2,1.14.0,1.16.2,'Runner .globals() should white-list globals'
V1.16.2,1.14.0,1.16.2,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.16.2,1.14.0,1.16.2,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.16.2,1.14.0,1.16.2,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.16.2,1.14.0,1.16.2,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.16.2,1.14.0-mwo1,1.16.2,'Runner .globalProps() should include common non enumerable globals'
V1.16.2,1.14.0-mwo1,1.16.2,'Runner .globals() should white-list globals'
V1.16.2,1.14.0-mwo1,1.16.2,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.16.2,1.14.0-mwo1,1.16.2,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.16.2,1.14.0-mwo1,1.16.2,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.16.2,1.14.0-mwo1,1.16.2,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.16.2,1.15.0,1.16.2,'Runner .globalProps() should include common non enumerable globals'
V1.16.2,1.15.0,1.16.2,'Runner .globals() should white-list globals'
V1.16.2,1.15.0,1.16.2,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.16.2,1.15.0,1.16.2,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.16.2,1.15.0,1.16.2,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.16.2,1.15.1,1.16.2,'Runner .globalProps() should include common non enumerable globals'
V1.16.2,1.15.1,1.16.2,'Runner .globals() should white-list globals'
V1.16.2,1.15.1,1.16.2,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.16.2,1.15.1,1.16.2,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.16.2,1.15.1,1.16.2,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.16.2,1.16.0,1.16.2,'Runner .globalProps() should include common non enumerable globals'
V1.16.2,1.16.0,1.16.2,'Runner .globals() should white-list globals'
V1.16.2,1.16.1,1.16.2,'Runner .globalProps() should include common non enumerable globals'
V1.16.2,1.16.1,1.16.2,'Runner .globals() should white-list globals'
V1.17.0,1.0.0,1.17.0,'Suite .clone() should copy the slow value'
V1.17.0,1.0.0,1.17.0,'Suite .slow() when given a string should parse it'
V1.17.0,1.0.0,1.17.0,'Suite .slow() when no argument is passed should return the slow value'
V1.17.0,1.0.0,1.17.0,'Suite .slow() when argument is passed should return the Suite object'
V1.17.0,1.0.0,1.17.0,'Suite .addSuite() "before each" hook'
V1.17.0,1.0.1,1.17.0,'Suite .clone() should copy the slow value'
V1.17.0,1.0.1,1.17.0,'Suite .slow() when given a string should parse it'
V1.17.0,1.0.1,1.17.0,'Suite .slow() when no argument is passed should return the slow value'
V1.17.0,1.0.1,1.17.0,'Suite .slow() when argument is passed should return the Suite object'
V1.17.0,1.0.1,1.17.0,'Suite .addSuite() "before each" hook'
V1.17.0,1.0.2,1.17.0,'Suite .clone() should copy the slow value'
V1.17.0,1.0.2,1.17.0,'Suite .slow() when given a string should parse it'
V1.17.0,1.0.2,1.17.0,'Suite .slow() when no argument is passed should return the slow value'
V1.17.0,1.0.2,1.17.0,'Suite .slow() when argument is passed should return the Suite object'
V1.17.0,1.0.2,1.17.0,'Suite .addSuite() "before each" hook'
V1.17.0,1.0.3,1.17.0,'Suite .clone() should copy the slow value'
V1.17.0,1.0.3,1.17.0,'Suite .slow() when given a string should parse it'
V1.17.0,1.0.3,1.17.0,'Suite .slow() when no argument is passed should return the slow value'
V1.17.0,1.0.3,1.17.0,'Suite .slow() when argument is passed should return the Suite object'
V1.17.0,1.0.3,1.17.0,'Suite .addSuite() "before each" hook'
V1.17.0,1.1.0,1.17.0,'Suite .clone() should copy the slow value'
V1.17.0,1.1.0,1.17.0,'Suite .slow() when given a string should parse it'
V1.17.0,1.1.0,1.17.0,'Suite .slow() when no argument is passed should return the slow value'
V1.17.0,1.1.0,1.17.0,'Suite .slow() when argument is passed should return the Suite object'
V1.17.0,1.1.0,1.17.0,'Suite .addSuite() "before each" hook'
V1.17.0,1.2.0,1.17.0,'Suite .clone() should copy the slow value'
V1.17.0,1.2.0,1.17.0,'Suite .slow() when given a string should parse it'
V1.17.0,1.2.0,1.17.0,'Suite .slow() when no argument is passed should return the slow value'
V1.17.0,1.2.0,1.17.0,'Suite .slow() when argument is passed should return the Suite object'
V1.17.0,1.2.0,1.17.0,'Suite .addSuite() "before each" hook'
V1.17.0,1.2.1,1.17.0,'Suite .clone() should copy the slow value'
V1.17.0,1.2.1,1.17.0,'Suite .slow() when given a string should parse it'
V1.17.0,1.2.1,1.17.0,'Suite .slow() when no argument is passed should return the slow value'
V1.17.0,1.2.1,1.17.0,'Suite .slow() when argument is passed should return the Suite object'
V1.17.0,1.2.1,1.17.0,'Suite .addSuite() "before each" hook'
V1.17.0,1.2.2,1.17.0,'Suite .clone() should copy the slow value'
V1.17.0,1.2.2,1.17.0,'Suite .slow() when given a string should parse it'
V1.17.0,1.2.2,1.17.0,'Suite .slow() when no argument is passed should return the slow value'
V1.17.0,1.2.2,1.17.0,'Suite .slow() when argument is passed should return the Suite object'
V1.17.0,1.2.2,1.17.0,'Suite .addSuite() "before each" hook'
V1.17.0,1.3.0,1.17.0,'Suite .clone() should copy the slow value'
V1.17.0,1.3.0,1.17.0,'Suite .slow() when given a string should parse it'
V1.17.0,1.3.0,1.17.0,'Suite .slow() when no argument is passed should return the slow value'
V1.17.0,1.3.0,1.17.0,'Suite .slow() when argument is passed should return the Suite object'
V1.17.0,1.3.0,1.17.0,'Suite .addSuite() "before each" hook'
V1.17.0,1.3.1,1.17.0,'Suite .clone() should copy the slow value'
V1.17.0,1.3.1,1.17.0,'Suite .slow() when given a string should parse it'
V1.17.0,1.3.1,1.17.0,'Suite .slow() when no argument is passed should return the slow value'
V1.17.0,1.3.1,1.17.0,'Suite .slow() when argument is passed should return the Suite object'
V1.17.0,1.3.1,1.17.0,'Suite .addSuite() "before each" hook'
V1.17.0,1.3.2,1.17.0,'Suite .clone() should copy the slow value'
V1.17.0,1.3.2,1.17.0,'Suite .slow() when given a string should parse it'
V1.17.0,1.3.2,1.17.0,'Suite .slow() when no argument is passed should return the slow value'
V1.17.0,1.3.2,1.17.0,'Suite .slow() when argument is passed should return the Suite object'
V1.17.0,1.3.2,1.17.0,'Suite .addSuite() "before each" hook'
V1.17.0,1.4.0,1.17.0,'Suite .clone() should copy the slow value'
V1.17.0,1.4.0,1.17.0,'Suite .slow() when given a string should parse it'
V1.17.0,1.4.0,1.17.0,'Suite .slow() when no argument is passed should return the slow value'
V1.17.0,1.4.0,1.17.0,'Suite .slow() when argument is passed should return the Suite object'
V1.17.0,1.4.0,1.17.0,'Suite .addSuite() "before each" hook'
V1.17.0,1.4.1,1.17.0,'Suite .clone() should copy the slow value'
V1.17.0,1.4.1,1.17.0,'Suite .slow() when given a string should parse it'
V1.17.0,1.4.1,1.17.0,'Suite .slow() when no argument is passed should return the slow value'
V1.17.0,1.4.1,1.17.0,'Suite .slow() when argument is passed should return the Suite object'
V1.17.0,1.4.1,1.17.0,'Suite .addSuite() "before each" hook'
V1.17.0,1.4.2,1.17.0,'Suite .clone() should copy the slow value'
V1.17.0,1.4.2,1.17.0,'Suite .slow() when given a string should parse it'
V1.17.0,1.4.2,1.17.0,'Suite .slow() when no argument is passed should return the slow value'
V1.17.0,1.4.2,1.17.0,'Suite .slow() when argument is passed should return the Suite object'
V1.17.0,1.4.2,1.17.0,'Suite .addSuite() "before each" hook'
V1.17.0,1.5.0,1.17.0,'Runner .globalProps() should include common non enumerable globals'
V1.17.0,1.5.0,1.17.0,'Runner .globals() should white-list globals'
V1.17.0,1.5.0,1.17.0,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.17.0,1.5.0,1.17.0,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.17.0,1.5.0,1.17.0,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.17.0,1.5.0,1.17.0,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.17.0,1.5.0,1.17.0,'serial hooks one'
V1.17.0,1.5.0,1.17.0,'serial hooks two'
V1.17.0,1.5.0,1.17.0,'serial hooks three'
V1.17.0,1.5.0,1.17.0,'serial hooks "after all" hook'
V1.17.0,1.6.0,1.17.0,'Runner .globalProps() should include common non enumerable globals'
V1.17.0,1.6.0,1.17.0,'Runner .globals() should white-list globals'
V1.17.0,1.6.0,1.17.0,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.17.0,1.6.0,1.17.0,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.17.0,1.6.0,1.17.0,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.17.0,1.6.0,1.17.0,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.17.0,1.6.0,1.17.0,'serial hooks one'
V1.17.0,1.6.0,1.17.0,'serial hooks two'
V1.17.0,1.6.0,1.17.0,'serial hooks three'
V1.17.0,1.6.0,1.17.0,'serial hooks "after all" hook'
V1.17.0,1.7.0,1.17.0,'Runner .globalProps() should include common non enumerable globals'
V1.17.0,1.7.0,1.17.0,'Runner .globals() should white-list globals'
V1.17.0,1.7.0,1.17.0,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.17.0,1.7.0,1.17.0,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.17.0,1.7.0,1.17.0,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.17.0,1.7.0,1.17.0,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.17.0,1.7.0,1.17.0,'serial hooks one'
V1.17.0,1.7.0,1.17.0,'serial hooks two'
V1.17.0,1.7.0,1.17.0,'serial hooks three'
V1.17.0,1.7.0,1.17.0,'serial hooks "after all" hook'
V1.17.0,1.7.1,1.17.0,'Runner .globalProps() should include common non enumerable globals'
V1.17.0,1.7.1,1.17.0,'Runner .globals() should white-list globals'
V1.17.0,1.7.1,1.17.0,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.17.0,1.7.1,1.17.0,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.17.0,1.7.1,1.17.0,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.17.0,1.7.1,1.17.0,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.17.0,1.7.1,1.17.0,'serial hooks one'
V1.17.0,1.7.1,1.17.0,'serial hooks two'
V1.17.0,1.7.1,1.17.0,'serial hooks three'
V1.17.0,1.7.1,1.17.0,'serial hooks "after all" hook'
V1.17.0,1.7.2,1.17.0,'Runner .globalProps() should include common non enumerable globals'
V1.17.0,1.7.2,1.17.0,'Runner .globals() should white-list globals'
V1.17.0,1.7.2,1.17.0,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.17.0,1.7.2,1.17.0,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.17.0,1.7.2,1.17.0,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.17.0,1.7.2,1.17.0,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.17.0,1.7.2,1.17.0,'serial hooks one'
V1.17.0,1.7.2,1.17.0,'serial hooks two'
V1.17.0,1.7.2,1.17.0,'serial hooks three'
V1.17.0,1.7.2,1.17.0,'serial hooks "after all" hook'
V1.17.0,1.7.3,1.17.0,'Runner .globalProps() should include common non enumerable globals'
V1.17.0,1.7.3,1.17.0,'Runner .globals() should white-list globals'
V1.17.0,1.7.3,1.17.0,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.17.0,1.7.3,1.17.0,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.17.0,1.7.3,1.17.0,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.17.0,1.7.3,1.17.0,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.17.0,1.7.3,1.17.0,'serial hooks one'
V1.17.0,1.7.3,1.17.0,'serial hooks two'
V1.17.0,1.7.3,1.17.0,'serial hooks three'
V1.17.0,1.7.3,1.17.0,'serial hooks "after all" hook'
V1.17.0,1.7.4,1.17.0,'Runner .globalProps() should include common non enumerable globals'
V1.17.0,1.7.4,1.17.0,'Runner .globals() should white-list globals'
V1.17.0,1.7.4,1.17.0,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.17.0,1.7.4,1.17.0,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.17.0,1.7.4,1.17.0,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.17.0,1.7.4,1.17.0,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.17.0,1.7.4,1.17.0,'serial hooks one'
V1.17.0,1.7.4,1.17.0,'serial hooks two'
V1.17.0,1.7.4,1.17.0,'serial hooks three'
V1.17.0,1.7.4,1.17.0,'serial hooks "after all" hook'
V1.17.0,1.8.0,1.17.0,'Runner .globalProps() should include common non enumerable globals'
V1.17.0,1.8.0,1.17.0,'serial hooks "after all" hook'
V1.17.0,1.8.1,1.17.0,'Runner .globalProps() should include common non enumerable globals'
V1.17.0,1.8.1,1.17.0,'Runner .globals() should white-list globals'
V1.17.0,1.8.1,1.17.0,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.17.0,1.8.1,1.17.0,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.17.0,1.8.1,1.17.0,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.17.0,1.8.1,1.17.0,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.17.0,1.8.1,1.17.0,'serial hooks one'
V1.17.0,1.8.1,1.17.0,'serial hooks two'
V1.17.0,1.8.1,1.17.0,'serial hooks three'
V1.17.0,1.8.1,1.17.0,'serial hooks "after all" hook'
V1.17.0,1.8.2,1.17.0,'Runner .globalProps() should include common non enumerable globals'
V1.17.0,1.8.2,1.17.0,'Runner .globals() should white-list globals'
V1.17.0,1.8.2,1.17.0,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.17.0,1.8.2,1.17.0,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.17.0,1.8.2,1.17.0,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.17.0,1.8.2,1.17.0,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.17.0,1.8.2,1.17.0,'serial hooks one'
V1.17.0,1.8.2,1.17.0,'serial hooks two'
V1.17.0,1.8.2,1.17.0,'serial hooks three'
V1.17.0,1.8.2,1.17.0,'serial hooks "after all" hook'
V1.17.0,1.9.0,1.17.0,'Runner .globalProps() should include common non enumerable globals'
V1.17.0,1.9.0,1.17.0,'Runner .globals() should white-list globals'
V1.17.0,1.9.0,1.17.0,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.17.0,1.9.0,1.17.0,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.17.0,1.9.0,1.17.0,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.17.0,1.9.0,1.17.0,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.17.0,1.9.0,1.17.0,'serial hooks one'
V1.17.0,1.9.0,1.17.0,'serial hooks two'
V1.17.0,1.9.0,1.17.0,'serial hooks three'
V1.17.0,1.9.0,1.17.0,'serial hooks "after all" hook'
V1.17.0,1.10.0,1.17.0,'Runner .globalProps() should include common non enumerable globals'
V1.17.0,1.10.0,1.17.0,'Runner .globals() should white-list globals'
V1.17.0,1.10.0,1.17.0,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.17.0,1.10.0,1.17.0,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.17.0,1.10.0,1.17.0,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.17.0,1.10.0,1.17.0,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.17.0,1.10.0,1.17.0,'serial hooks one'
V1.17.0,1.10.0,1.17.0,'serial hooks two'
V1.17.0,1.10.0,1.17.0,'serial hooks three'
V1.17.0,1.10.0,1.17.0,'serial hooks "after all" hook'
V1.17.0,1.11.0,1.17.0,'Runner .globalProps() should include common non enumerable globals'
V1.17.0,1.11.0,1.17.0,'Runner .globals() should white-list globals'
V1.17.0,1.11.0,1.17.0,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.17.0,1.11.0,1.17.0,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.17.0,1.11.0,1.17.0,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.17.0,1.11.0,1.17.0,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.17.0,1.11.0,1.17.0,'serial hooks one'
V1.17.0,1.11.0,1.17.0,'serial hooks two'
V1.17.0,1.11.0,1.17.0,'serial hooks three'
V1.17.0,1.11.0,1.17.0,'serial hooks "after all" hook'
V1.17.0,1.12.0,1.17.0,'Runner .globalProps() should include common non enumerable globals'
V1.17.0,1.12.0,1.17.0,'Runner .globals() should white-list globals'
V1.17.0,1.12.0,1.17.0,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.17.0,1.12.0,1.17.0,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.17.0,1.12.0,1.17.0,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.17.0,1.12.0,1.17.0,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.17.0,1.12.1,1.17.0,'Runner .globalProps() should include common non enumerable globals'
V1.17.0,1.12.1,1.17.0,'Runner .globals() should white-list globals'
V1.17.0,1.12.1,1.17.0,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.17.0,1.12.1,1.17.0,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.17.0,1.12.1,1.17.0,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.17.0,1.12.1,1.17.0,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.17.0,1.13.0,1.17.0,'Runner .globalProps() should include common non enumerable globals'
V1.17.0,1.13.0,1.17.0,'Runner .globals() should white-list globals'
V1.17.0,1.13.0,1.17.0,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.17.0,1.13.0,1.17.0,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.17.0,1.13.0,1.17.0,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.17.0,1.13.0,1.17.0,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.17.0,1.14.0,1.17.0,'Runner .globalProps() should include common non enumerable globals'
V1.17.0,1.14.0,1.17.0,'Runner .globals() should white-list globals'
V1.17.0,1.14.0,1.17.0,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.17.0,1.14.0,1.17.0,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.17.0,1.14.0,1.17.0,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.17.0,1.14.0,1.17.0,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.17.0,1.14.0-mwo1,1.17.0,'Runner .globalProps() should include common non enumerable globals'
V1.17.0,1.14.0-mwo1,1.17.0,'Runner .globals() should white-list globals'
V1.17.0,1.14.0-mwo1,1.17.0,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.17.0,1.14.0-mwo1,1.17.0,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.17.0,1.14.0-mwo1,1.17.0,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.17.0,1.14.0-mwo1,1.17.0,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.17.0,1.15.0,1.17.0,'Runner .globalProps() should include common non enumerable globals'
V1.17.0,1.15.0,1.17.0,'Runner .globals() should white-list globals'
V1.17.0,1.15.0,1.17.0,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.17.0,1.15.0,1.17.0,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.17.0,1.15.0,1.17.0,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.17.0,1.15.1,1.17.0,'Runner .globalProps() should include common non enumerable globals'
V1.17.0,1.15.1,1.17.0,'Runner .globals() should white-list globals'
V1.17.0,1.15.1,1.17.0,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.17.0,1.15.1,1.17.0,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.17.0,1.15.1,1.17.0,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.17.0,1.16.0,1.17.0,'Runner .globalProps() should include common non enumerable globals'
V1.17.0,1.16.0,1.17.0,'Runner .globals() should white-list globals'
V1.17.0,1.16.1,1.17.0,'Runner .globalProps() should include common non enumerable globals'
V1.17.0,1.16.1,1.17.0,'Runner .globals() should white-list globals'
V1.17.0,1.16.2,1.17.0,'Runner .globalProps() should include common non enumerable globals'
V1.17.0,1.16.2,1.17.0,'Runner .globals() should white-list globals'
V1.17.1,1.17.1,1.17.0,'Runner .globalProps() should include common non enumerable globals'
V1.17.1,1.17.1,1.17.0,'Runner .globals() should white-list globals'
V1.17.1,1.0.0,1.17.1,'Suite .clone() should copy the slow value'
V1.17.1,1.0.0,1.17.1,'Suite .slow() when given a string should parse it'
V1.17.1,1.0.0,1.17.1,'Suite .slow() when no argument is passed should return the slow value'
V1.17.1,1.0.0,1.17.1,'Suite .slow() when argument is passed should return the Suite object'
V1.17.1,1.0.0,1.17.1,'Suite .addSuite() "before each" hook'
V1.17.1,1.0.1,1.17.1,'Suite .clone() should copy the slow value'
V1.17.1,1.0.1,1.17.1,'Suite .slow() when given a string should parse it'
V1.17.1,1.0.1,1.17.1,'Suite .slow() when no argument is passed should return the slow value'
V1.17.1,1.0.1,1.17.1,'Suite .slow() when argument is passed should return the Suite object'
V1.17.1,1.0.1,1.17.1,'Suite .addSuite() "before each" hook'
V1.17.1,1.0.2,1.17.1,'Suite .clone() should copy the slow value'
V1.17.1,1.0.2,1.17.1,'Suite .slow() when given a string should parse it'
V1.17.1,1.0.2,1.17.1,'Suite .slow() when no argument is passed should return the slow value'
V1.17.1,1.0.2,1.17.1,'Suite .slow() when argument is passed should return the Suite object'
V1.17.1,1.0.2,1.17.1,'Suite .addSuite() "before each" hook'
V1.17.1,1.0.3,1.17.1,'Suite .clone() should copy the slow value'
V1.17.1,1.0.3,1.17.1,'Suite .slow() when given a string should parse it'
V1.17.1,1.0.3,1.17.1,'Suite .slow() when no argument is passed should return the slow value'
V1.17.1,1.0.3,1.17.1,'Suite .slow() when argument is passed should return the Suite object'
V1.17.1,1.0.3,1.17.1,'Suite .addSuite() "before each" hook'
V1.17.1,1.1.0,1.17.1,'Suite .clone() should copy the slow value'
V1.17.1,1.1.0,1.17.1,'Suite .slow() when given a string should parse it'
V1.17.1,1.1.0,1.17.1,'Suite .slow() when no argument is passed should return the slow value'
V1.17.1,1.1.0,1.17.1,'Suite .slow() when argument is passed should return the Suite object'
V1.17.1,1.1.0,1.17.1,'Suite .addSuite() "before each" hook'
V1.17.1,1.2.0,1.17.1,'Suite .clone() should copy the slow value'
V1.17.1,1.2.0,1.17.1,'Suite .slow() when given a string should parse it'
V1.17.1,1.2.0,1.17.1,'Suite .slow() when no argument is passed should return the slow value'
V1.17.1,1.2.0,1.17.1,'Suite .slow() when argument is passed should return the Suite object'
V1.17.1,1.2.0,1.17.1,'Suite .addSuite() "before each" hook'
V1.17.1,1.2.1,1.17.1,'Suite .clone() should copy the slow value'
V1.17.1,1.2.1,1.17.1,'Suite .slow() when given a string should parse it'
V1.17.1,1.2.1,1.17.1,'Suite .slow() when no argument is passed should return the slow value'
V1.17.1,1.2.1,1.17.1,'Suite .slow() when argument is passed should return the Suite object'
V1.17.1,1.2.1,1.17.1,'Suite .addSuite() "before each" hook'
V1.17.1,1.2.2,1.17.1,'Suite .clone() should copy the slow value'
V1.17.1,1.2.2,1.17.1,'Suite .slow() when given a string should parse it'
V1.17.1,1.2.2,1.17.1,'Suite .slow() when no argument is passed should return the slow value'
V1.17.1,1.2.2,1.17.1,'Suite .slow() when argument is passed should return the Suite object'
V1.17.1,1.2.2,1.17.1,'Suite .addSuite() "before each" hook'
V1.17.1,1.3.0,1.17.1,'Suite .clone() should copy the slow value'
V1.17.1,1.3.0,1.17.1,'Suite .slow() when given a string should parse it'
V1.17.1,1.3.0,1.17.1,'Suite .slow() when no argument is passed should return the slow value'
V1.17.1,1.3.0,1.17.1,'Suite .slow() when argument is passed should return the Suite object'
V1.17.1,1.3.0,1.17.1,'Suite .addSuite() "before each" hook'
V1.17.1,1.3.1,1.17.1,'Suite .clone() should copy the slow value'
V1.17.1,1.3.1,1.17.1,'Suite .slow() when given a string should parse it'
V1.17.1,1.3.1,1.17.1,'Suite .slow() when no argument is passed should return the slow value'
V1.17.1,1.3.1,1.17.1,'Suite .slow() when argument is passed should return the Suite object'
V1.17.1,1.3.1,1.17.1,'Suite .addSuite() "before each" hook'
V1.17.1,1.3.2,1.17.1,'Suite .clone() should copy the slow value'
V1.17.1,1.3.2,1.17.1,'Suite .slow() when given a string should parse it'
V1.17.1,1.3.2,1.17.1,'Suite .slow() when no argument is passed should return the slow value'
V1.17.1,1.3.2,1.17.1,'Suite .slow() when argument is passed should return the Suite object'
V1.17.1,1.3.2,1.17.1,'Suite .addSuite() "before each" hook'
V1.17.1,1.4.0,1.17.1,'Suite .clone() should copy the slow value'
V1.17.1,1.4.0,1.17.1,'Suite .slow() when given a string should parse it'
V1.17.1,1.4.0,1.17.1,'Suite .slow() when no argument is passed should return the slow value'
V1.17.1,1.4.0,1.17.1,'Suite .slow() when argument is passed should return the Suite object'
V1.17.1,1.4.0,1.17.1,'Suite .addSuite() "before each" hook'
V1.17.1,1.4.1,1.17.1,'Suite .clone() should copy the slow value'
V1.17.1,1.4.1,1.17.1,'Suite .slow() when given a string should parse it'
V1.17.1,1.4.1,1.17.1,'Suite .slow() when no argument is passed should return the slow value'
V1.17.1,1.4.1,1.17.1,'Suite .slow() when argument is passed should return the Suite object'
V1.17.1,1.4.1,1.17.1,'Suite .addSuite() "before each" hook'
V1.17.1,1.4.2,1.17.1,'Suite .clone() should copy the slow value'
V1.17.1,1.4.2,1.17.1,'Suite .slow() when given a string should parse it'
V1.17.1,1.4.2,1.17.1,'Suite .slow() when no argument is passed should return the slow value'
V1.17.1,1.4.2,1.17.1,'Suite .slow() when argument is passed should return the Suite object'
V1.17.1,1.4.2,1.17.1,'Suite .addSuite() "before each" hook'
V1.17.1,1.5.0,1.17.1,'Runner .globalProps() should include common non enumerable globals'
V1.17.1,1.5.0,1.17.1,'Runner .globals() should white-list globals'
V1.17.1,1.5.0,1.17.1,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.17.1,1.5.0,1.17.1,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.17.1,1.5.0,1.17.1,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.17.1,1.5.0,1.17.1,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.17.1,1.5.0,1.17.1,'serial hooks one'
V1.17.1,1.5.0,1.17.1,'serial hooks two'
V1.17.1,1.5.0,1.17.1,'serial hooks three'
V1.17.1,1.5.0,1.17.1,'serial hooks "after all" hook'
V1.17.1,1.6.0,1.17.1,'Runner .globalProps() should include common non enumerable globals'
V1.17.1,1.6.0,1.17.1,'Runner .globals() should white-list globals'
V1.17.1,1.6.0,1.17.1,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.17.1,1.6.0,1.17.1,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.17.1,1.6.0,1.17.1,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.17.1,1.6.0,1.17.1,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.17.1,1.6.0,1.17.1,'serial hooks one'
V1.17.1,1.6.0,1.17.1,'serial hooks two'
V1.17.1,1.6.0,1.17.1,'serial hooks three'
V1.17.1,1.6.0,1.17.1,'serial hooks "after all" hook'
V1.17.1,1.7.0,1.17.1,'Runner .globalProps() should include common non enumerable globals'
V1.17.1,1.7.0,1.17.1,'Runner .globals() should white-list globals'
V1.17.1,1.7.0,1.17.1,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.17.1,1.7.0,1.17.1,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.17.1,1.7.0,1.17.1,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.17.1,1.7.0,1.17.1,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.17.1,1.7.0,1.17.1,'serial hooks one'
V1.17.1,1.7.0,1.17.1,'serial hooks two'
V1.17.1,1.7.0,1.17.1,'serial hooks three'
V1.17.1,1.7.0,1.17.1,'serial hooks "after all" hook'
V1.17.1,1.7.1,1.17.1,'Runner .globalProps() should include common non enumerable globals'
V1.17.1,1.7.1,1.17.1,'Runner .globals() should white-list globals'
V1.17.1,1.7.1,1.17.1,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.17.1,1.7.1,1.17.1,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.17.1,1.7.1,1.17.1,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.17.1,1.7.1,1.17.1,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.17.1,1.7.1,1.17.1,'serial hooks one'
V1.17.1,1.7.1,1.17.1,'serial hooks two'
V1.17.1,1.7.1,1.17.1,'serial hooks three'
V1.17.1,1.7.1,1.17.1,'serial hooks "after all" hook'
V1.17.1,1.7.2,1.17.1,'Runner .globalProps() should include common non enumerable globals'
V1.17.1,1.7.2,1.17.1,'Runner .globals() should white-list globals'
V1.17.1,1.7.2,1.17.1,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.17.1,1.7.2,1.17.1,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.17.1,1.7.2,1.17.1,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.17.1,1.7.2,1.17.1,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.17.1,1.7.2,1.17.1,'serial hooks one'
V1.17.1,1.7.2,1.17.1,'serial hooks two'
V1.17.1,1.7.2,1.17.1,'serial hooks three'
V1.17.1,1.7.2,1.17.1,'serial hooks "after all" hook'
V1.17.1,1.7.3,1.17.1,'Runner .globalProps() should include common non enumerable globals'
V1.17.1,1.7.3,1.17.1,'Runner .globals() should white-list globals'
V1.17.1,1.7.3,1.17.1,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.17.1,1.7.3,1.17.1,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.17.1,1.7.3,1.17.1,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.17.1,1.7.3,1.17.1,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.17.1,1.7.3,1.17.1,'serial hooks one'
V1.17.1,1.7.3,1.17.1,'serial hooks two'
V1.17.1,1.7.3,1.17.1,'serial hooks three'
V1.17.1,1.7.3,1.17.1,'serial hooks "after all" hook'
V1.17.1,1.7.4,1.17.1,'Runner .globalProps() should include common non enumerable globals'
V1.17.1,1.7.4,1.17.1,'Runner .globals() should white-list globals'
V1.17.1,1.7.4,1.17.1,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.17.1,1.7.4,1.17.1,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.17.1,1.7.4,1.17.1,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.17.1,1.7.4,1.17.1,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.17.1,1.7.4,1.17.1,'serial hooks one'
V1.17.1,1.7.4,1.17.1,'serial hooks two'
V1.17.1,1.7.4,1.17.1,'serial hooks three'
V1.17.1,1.7.4,1.17.1,'serial hooks "after all" hook'
V1.17.1,1.8.0,1.17.1,'Runner .globalProps() should include common non enumerable globals'
V1.17.1,1.8.0,1.17.1,'serial hooks "after all" hook'
V1.17.1,1.8.1,1.17.1,'Runner .globalProps() should include common non enumerable globals'
V1.17.1,1.8.1,1.17.1,'Runner .globals() should white-list globals'
V1.17.1,1.8.1,1.17.1,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.17.1,1.8.1,1.17.1,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.17.1,1.8.1,1.17.1,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.17.1,1.8.1,1.17.1,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.17.1,1.8.1,1.17.1,'serial hooks one'
V1.17.1,1.8.1,1.17.1,'serial hooks two'
V1.17.1,1.8.1,1.17.1,'serial hooks three'
V1.17.1,1.8.1,1.17.1,'serial hooks "after all" hook'
V1.17.1,1.8.2,1.17.1,'Runner .globalProps() should include common non enumerable globals'
V1.17.1,1.8.2,1.17.1,'Runner .globals() should white-list globals'
V1.17.1,1.8.2,1.17.1,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.17.1,1.8.2,1.17.1,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.17.1,1.8.2,1.17.1,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.17.1,1.8.2,1.17.1,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.17.1,1.8.2,1.17.1,'serial hooks one'
V1.17.1,1.8.2,1.17.1,'serial hooks two'
V1.17.1,1.8.2,1.17.1,'serial hooks three'
V1.17.1,1.8.2,1.17.1,'serial hooks "after all" hook'
V1.17.1,1.9.0,1.17.1,'Runner .globalProps() should include common non enumerable globals'
V1.17.1,1.9.0,1.17.1,'Runner .globals() should white-list globals'
V1.17.1,1.9.0,1.17.1,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.17.1,1.9.0,1.17.1,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.17.1,1.9.0,1.17.1,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.17.1,1.9.0,1.17.1,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.17.1,1.9.0,1.17.1,'serial hooks one'
V1.17.1,1.9.0,1.17.1,'serial hooks two'
V1.17.1,1.9.0,1.17.1,'serial hooks three'
V1.17.1,1.9.0,1.17.1,'serial hooks "after all" hook'
V1.17.1,1.10.0,1.17.1,'Runner .globalProps() should include common non enumerable globals'
V1.17.1,1.10.0,1.17.1,'Runner .globals() should white-list globals'
V1.17.1,1.10.0,1.17.1,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.17.1,1.10.0,1.17.1,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.17.1,1.10.0,1.17.1,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.17.1,1.10.0,1.17.1,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.17.1,1.10.0,1.17.1,'serial hooks one'
V1.17.1,1.10.0,1.17.1,'serial hooks two'
V1.17.1,1.10.0,1.17.1,'serial hooks three'
V1.17.1,1.10.0,1.17.1,'serial hooks "after all" hook'
V1.17.1,1.11.0,1.17.1,'Runner .globalProps() should include common non enumerable globals'
V1.17.1,1.11.0,1.17.1,'Runner .globals() should white-list globals'
V1.17.1,1.11.0,1.17.1,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.17.1,1.11.0,1.17.1,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.17.1,1.11.0,1.17.1,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.17.1,1.11.0,1.17.1,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.17.1,1.11.0,1.17.1,'serial hooks one'
V1.17.1,1.11.0,1.17.1,'serial hooks two'
V1.17.1,1.11.0,1.17.1,'serial hooks three'
V1.17.1,1.11.0,1.17.1,'serial hooks "after all" hook'
V1.17.1,1.12.0,1.17.1,'Runner .globalProps() should include common non enumerable globals'
V1.17.1,1.12.0,1.17.1,'Runner .globals() should white-list globals'
V1.17.1,1.12.0,1.17.1,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.17.1,1.12.0,1.17.1,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.17.1,1.12.0,1.17.1,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.17.1,1.12.0,1.17.1,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.17.1,1.12.1,1.17.1,'Runner .globalProps() should include common non enumerable globals'
V1.17.1,1.12.1,1.17.1,'Runner .globals() should white-list globals'
V1.17.1,1.12.1,1.17.1,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.17.1,1.12.1,1.17.1,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.17.1,1.12.1,1.17.1,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.17.1,1.12.1,1.17.1,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.17.1,1.13.0,1.17.1,'Runner .globalProps() should include common non enumerable globals'
V1.17.1,1.13.0,1.17.1,'Runner .globals() should white-list globals'
V1.17.1,1.13.0,1.17.1,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.17.1,1.13.0,1.17.1,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.17.1,1.13.0,1.17.1,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.17.1,1.13.0,1.17.1,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.17.1,1.14.0,1.17.1,'Runner .globalProps() should include common non enumerable globals'
V1.17.1,1.14.0,1.17.1,'Runner .globals() should white-list globals'
V1.17.1,1.14.0,1.17.1,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.17.1,1.14.0,1.17.1,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.17.1,1.14.0,1.17.1,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.17.1,1.14.0,1.17.1,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.17.1,1.14.0-mwo1,1.17.1,'Runner .globalProps() should include common non enumerable globals'
V1.17.1,1.14.0-mwo1,1.17.1,'Runner .globals() should white-list globals'
V1.17.1,1.14.0-mwo1,1.17.1,'Runner .checkGlobals(test) should emit "fail" when a single new disallowed global is introduced after a single extra global is allowed'
V1.17.1,1.14.0-mwo1,1.17.1,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.17.1,1.14.0-mwo1,1.17.1,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.17.1,1.14.0-mwo1,1.17.1,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.17.1,1.14.0-mwo1,1.17.1,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.17.1,1.15.0,1.17.1,'Runner .globalProps() should include common non enumerable globals'
V1.17.1,1.15.0,1.17.1,'Runner .globals() should white-list globals'
V1.17.1,1.15.0,1.17.1,'Runner .checkGlobals(test) should emit "fail" when a single new disallowed global is introduced after a single extra global is allowed'
V1.17.1,1.15.0,1.17.1,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.17.1,1.15.0,1.17.1,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.17.1,1.15.0,1.17.1,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.17.1,1.15.1,1.17.1,'Runner .globalProps() should include common non enumerable globals'
V1.17.1,1.15.1,1.17.1,'Runner .globals() should white-list globals'
V1.17.1,1.15.1,1.17.1,'Runner .checkGlobals(test) should emit "fail" when a single new disallowed global is introduced after a single extra global is allowed'
V1.17.1,1.15.1,1.17.1,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.17.1,1.15.1,1.17.1,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.17.1,1.15.1,1.17.1,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.17.1,1.16.0,1.17.1,'Runner .globalProps() should include common non enumerable globals'
V1.17.1,1.16.0,1.17.1,'Runner .globals() should white-list globals'
V1.17.1,1.16.0,1.17.1,'Runner .checkGlobals(test) should emit "fail" when a single new disallowed global is introduced after a single extra global is allowed'
V1.17.1,1.16.1,1.17.1,'Runner .globalProps() should include common non enumerable globals'
V1.17.1,1.16.1,1.17.1,'Runner .globals() should white-list globals'
V1.17.1,1.16.1,1.17.1,'Runner .checkGlobals(test) should emit "fail" when a single new disallowed global is introduced after a single extra global is allowed'
V1.17.1,1.16.2,1.17.1,'Runner .globalProps() should include common non enumerable globals'
V1.17.1,1.16.2,1.17.1,'Runner .globals() should white-list globals'
V1.17.1,1.16.2,1.17.1,'Runner .checkGlobals(test) should emit "fail" when a single new disallowed global is introduced after a single extra global is allowed'
V1.17.1,1.17.0,1.17.1,'Runner .globalProps() should include common non enumerable globals'
V1.17.1,1.17.0,1.17.1,'Runner .globals() should white-list globals'
V1.17.1,1.17.0,1.17.1,'Runner .checkGlobals(test) should emit "fail" when a single new disallowed global is introduced after a single extra global is allowed'
V1.18.0,1.0.0,1.18.0,'Suite .clone() should copy the slow value'
V1.18.0,1.0.0,1.18.0,'Suite .slow() when given a string should parse it'
V1.18.0,1.0.0,1.18.0,'Suite .slow() when no argument is passed should return the slow value'
V1.18.0,1.0.0,1.18.0,'Suite .slow() when argument is passed should return the Suite object'
V1.18.0,1.0.0,1.18.0,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.18.0,1.0.0,1.18.0,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.18.0,1.0.0,1.18.0,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.18.0,1.0.0,1.18.0,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.18.0,1.0.0,1.18.0,'Suite .addSuite() "before each" hook'
V1.18.0,1.0.1,1.18.0,'Suite .clone() should copy the slow value'
V1.18.0,1.0.1,1.18.0,'Suite .slow() when given a string should parse it'
V1.18.0,1.0.1,1.18.0,'Suite .slow() when no argument is passed should return the slow value'
V1.18.0,1.0.1,1.18.0,'Suite .slow() when argument is passed should return the Suite object'
V1.18.0,1.0.1,1.18.0,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.18.0,1.0.1,1.18.0,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.18.0,1.0.1,1.18.0,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.18.0,1.0.1,1.18.0,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.18.0,1.0.1,1.18.0,'Suite .addSuite() "before each" hook'
V1.18.0,1.0.2,1.18.0,'Suite .clone() should copy the slow value'
V1.18.0,1.0.2,1.18.0,'Suite .slow() when given a string should parse it'
V1.18.0,1.0.2,1.18.0,'Suite .slow() when no argument is passed should return the slow value'
V1.18.0,1.0.2,1.18.0,'Suite .slow() when argument is passed should return the Suite object'
V1.18.0,1.0.2,1.18.0,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.18.0,1.0.2,1.18.0,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.18.0,1.0.2,1.18.0,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.18.0,1.0.2,1.18.0,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.18.0,1.0.2,1.18.0,'Suite .addSuite() "before each" hook'
V1.18.0,1.0.3,1.18.0,'Suite .clone() should copy the slow value'
V1.18.0,1.0.3,1.18.0,'Suite .slow() when given a string should parse it'
V1.18.0,1.0.3,1.18.0,'Suite .slow() when no argument is passed should return the slow value'
V1.18.0,1.0.3,1.18.0,'Suite .slow() when argument is passed should return the Suite object'
V1.18.0,1.0.3,1.18.0,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.18.0,1.0.3,1.18.0,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.18.0,1.0.3,1.18.0,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.18.0,1.0.3,1.18.0,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.18.0,1.0.3,1.18.0,'Suite .addSuite() "before each" hook'
V1.18.0,1.1.0,1.18.0,'Suite .clone() should copy the slow value'
V1.18.0,1.1.0,1.18.0,'Suite .slow() when given a string should parse it'
V1.18.0,1.1.0,1.18.0,'Suite .slow() when no argument is passed should return the slow value'
V1.18.0,1.1.0,1.18.0,'Suite .slow() when argument is passed should return the Suite object'
V1.18.0,1.1.0,1.18.0,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.18.0,1.1.0,1.18.0,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.18.0,1.1.0,1.18.0,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.18.0,1.1.0,1.18.0,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.18.0,1.1.0,1.18.0,'Suite .addSuite() "before each" hook'
V1.18.0,1.2.0,1.18.0,'Suite .clone() should copy the slow value'
V1.18.0,1.2.0,1.18.0,'Suite .slow() when given a string should parse it'
V1.18.0,1.2.0,1.18.0,'Suite .slow() when no argument is passed should return the slow value'
V1.18.0,1.2.0,1.18.0,'Suite .slow() when argument is passed should return the Suite object'
V1.18.0,1.2.0,1.18.0,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.18.0,1.2.0,1.18.0,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.18.0,1.2.0,1.18.0,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.18.0,1.2.0,1.18.0,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.18.0,1.2.0,1.18.0,'Suite .addSuite() "before each" hook'
V1.18.0,1.2.1,1.18.0,'Suite .clone() should copy the slow value'
V1.18.0,1.2.1,1.18.0,'Suite .slow() when given a string should parse it'
V1.18.0,1.2.1,1.18.0,'Suite .slow() when no argument is passed should return the slow value'
V1.18.0,1.2.1,1.18.0,'Suite .slow() when argument is passed should return the Suite object'
V1.18.0,1.2.1,1.18.0,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.18.0,1.2.1,1.18.0,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.18.0,1.2.1,1.18.0,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.18.0,1.2.1,1.18.0,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.18.0,1.2.1,1.18.0,'Suite .addSuite() "before each" hook'
V1.18.0,1.2.2,1.18.0,'Suite .clone() should copy the slow value'
V1.18.0,1.2.2,1.18.0,'Suite .slow() when given a string should parse it'
V1.18.0,1.2.2,1.18.0,'Suite .slow() when no argument is passed should return the slow value'
V1.18.0,1.2.2,1.18.0,'Suite .slow() when argument is passed should return the Suite object'
V1.18.0,1.2.2,1.18.0,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.18.0,1.2.2,1.18.0,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.18.0,1.2.2,1.18.0,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.18.0,1.2.2,1.18.0,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.18.0,1.2.2,1.18.0,'Suite .addSuite() "before each" hook'
V1.18.0,1.3.0,1.18.0,'Suite .clone() should copy the slow value'
V1.18.0,1.3.0,1.18.0,'Suite .slow() when given a string should parse it'
V1.18.0,1.3.0,1.18.0,'Suite .slow() when no argument is passed should return the slow value'
V1.18.0,1.3.0,1.18.0,'Suite .slow() when argument is passed should return the Suite object'
V1.18.0,1.3.0,1.18.0,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.18.0,1.3.0,1.18.0,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.18.0,1.3.0,1.18.0,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.18.0,1.3.0,1.18.0,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.18.0,1.3.0,1.18.0,'Suite .addSuite() "before each" hook'
V1.18.0,1.3.1,1.18.0,'Suite .clone() should copy the slow value'
V1.18.0,1.3.1,1.18.0,'Suite .slow() when given a string should parse it'
V1.18.0,1.3.1,1.18.0,'Suite .slow() when no argument is passed should return the slow value'
V1.18.0,1.3.1,1.18.0,'Suite .slow() when argument is passed should return the Suite object'
V1.18.0,1.3.1,1.18.0,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.18.0,1.3.1,1.18.0,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.18.0,1.3.1,1.18.0,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.18.0,1.3.1,1.18.0,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.18.0,1.3.1,1.18.0,'Suite .addSuite() "before each" hook'
V1.18.0,1.3.2,1.18.0,'Suite .clone() should copy the slow value'
V1.18.0,1.3.2,1.18.0,'Suite .slow() when given a string should parse it'
V1.18.0,1.3.2,1.18.0,'Suite .slow() when no argument is passed should return the slow value'
V1.18.0,1.3.2,1.18.0,'Suite .slow() when argument is passed should return the Suite object'
V1.18.0,1.3.2,1.18.0,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.18.0,1.3.2,1.18.0,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.18.0,1.3.2,1.18.0,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.18.0,1.3.2,1.18.0,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.18.0,1.3.2,1.18.0,'Suite .addSuite() "before each" hook'
V1.18.0,1.4.0,1.18.0,'Suite .clone() should copy the slow value'
V1.18.0,1.4.0,1.18.0,'Suite .slow() when given a string should parse it'
V1.18.0,1.4.0,1.18.0,'Suite .slow() when no argument is passed should return the slow value'
V1.18.0,1.4.0,1.18.0,'Suite .slow() when argument is passed should return the Suite object'
V1.18.0,1.4.0,1.18.0,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.18.0,1.4.0,1.18.0,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.18.0,1.4.0,1.18.0,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.18.0,1.4.0,1.18.0,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.18.0,1.4.0,1.18.0,'Suite .addSuite() "before each" hook'
V1.18.0,1.4.1,1.18.0,'Suite .clone() should copy the slow value'
V1.18.0,1.4.1,1.18.0,'Suite .slow() when given a string should parse it'
V1.18.0,1.4.1,1.18.0,'Suite .slow() when no argument is passed should return the slow value'
V1.18.0,1.4.1,1.18.0,'Suite .slow() when argument is passed should return the Suite object'
V1.18.0,1.4.1,1.18.0,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.18.0,1.4.1,1.18.0,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.18.0,1.4.1,1.18.0,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.18.0,1.4.1,1.18.0,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.18.0,1.4.1,1.18.0,'Suite .addSuite() "before each" hook'
V1.18.0,1.4.2,1.18.0,'Suite .clone() should copy the slow value'
V1.18.0,1.4.2,1.18.0,'Suite .slow() when given a string should parse it'
V1.18.0,1.4.2,1.18.0,'Suite .slow() when no argument is passed should return the slow value'
V1.18.0,1.4.2,1.18.0,'Suite .slow() when argument is passed should return the Suite object'
V1.18.0,1.4.2,1.18.0,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.18.0,1.4.2,1.18.0,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.18.0,1.4.2,1.18.0,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.18.0,1.4.2,1.18.0,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.18.0,1.4.2,1.18.0,'Suite .addSuite() "before each" hook'
V1.18.0,1.5.0,1.18.0,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.18.0,1.5.0,1.18.0,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.18.0,1.5.0,1.18.0,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.18.0,1.5.0,1.18.0,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.18.0,1.5.0,1.18.0,'Runner .globalProps() should include common non enumerable globals'
V1.18.0,1.5.0,1.18.0,'Runner .globals() should white-list globals'
V1.18.0,1.5.0,1.18.0,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.18.0,1.5.0,1.18.0,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.18.0,1.5.0,1.18.0,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.18.0,1.5.0,1.18.0,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.18.0,1.5.0,1.18.0,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.18.0,1.5.0,1.18.0,'serial hooks one'
V1.18.0,1.5.0,1.18.0,'serial hooks two'
V1.18.0,1.5.0,1.18.0,'serial hooks three'
V1.18.0,1.5.0,1.18.0,'serial hooks "after all" hook'
V1.18.0,1.6.0,1.18.0,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.18.0,1.6.0,1.18.0,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.18.0,1.6.0,1.18.0,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.18.0,1.6.0,1.18.0,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.18.0,1.6.0,1.18.0,'Runner .globalProps() should include common non enumerable globals'
V1.18.0,1.6.0,1.18.0,'Runner .globals() should white-list globals'
V1.18.0,1.6.0,1.18.0,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.18.0,1.6.0,1.18.0,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.18.0,1.6.0,1.18.0,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.18.0,1.6.0,1.18.0,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.18.0,1.6.0,1.18.0,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.18.0,1.6.0,1.18.0,'serial hooks one'
V1.18.0,1.6.0,1.18.0,'serial hooks two'
V1.18.0,1.6.0,1.18.0,'serial hooks three'
V1.18.0,1.6.0,1.18.0,'serial hooks "after all" hook'
V1.18.0,1.7.0,1.18.0,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.18.0,1.7.0,1.18.0,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.18.0,1.7.0,1.18.0,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.18.0,1.7.0,1.18.0,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.18.0,1.7.0,1.18.0,'Runner .globalProps() should include common non enumerable globals'
V1.18.0,1.7.0,1.18.0,'Runner .globals() should white-list globals'
V1.18.0,1.7.0,1.18.0,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.18.0,1.7.0,1.18.0,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.18.0,1.7.0,1.18.0,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.18.0,1.7.0,1.18.0,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.18.0,1.7.0,1.18.0,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.18.0,1.7.0,1.18.0,'serial hooks one'
V1.18.0,1.7.0,1.18.0,'serial hooks two'
V1.18.0,1.7.0,1.18.0,'serial hooks three'
V1.18.0,1.7.0,1.18.0,'serial hooks "after all" hook'
V1.18.0,1.7.1,1.18.0,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.18.0,1.7.1,1.18.0,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.18.0,1.7.1,1.18.0,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.18.0,1.7.1,1.18.0,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.18.0,1.7.1,1.18.0,'Runner .globalProps() should include common non enumerable globals'
V1.18.0,1.7.1,1.18.0,'Runner .globals() should white-list globals'
V1.18.0,1.7.1,1.18.0,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.18.0,1.7.1,1.18.0,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.18.0,1.7.1,1.18.0,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.18.0,1.7.1,1.18.0,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.18.0,1.7.1,1.18.0,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.18.0,1.7.1,1.18.0,'serial hooks one'
V1.18.0,1.7.1,1.18.0,'serial hooks two'
V1.18.0,1.7.1,1.18.0,'serial hooks three'
V1.18.0,1.7.1,1.18.0,'serial hooks "after all" hook'
V1.18.0,1.7.2,1.18.0,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.18.0,1.7.2,1.18.0,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.18.0,1.7.2,1.18.0,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.18.0,1.7.2,1.18.0,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.18.0,1.7.2,1.18.0,'Runner .globalProps() should include common non enumerable globals'
V1.18.0,1.7.2,1.18.0,'Runner .globals() should white-list globals'
V1.18.0,1.7.2,1.18.0,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.18.0,1.7.2,1.18.0,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.18.0,1.7.2,1.18.0,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.18.0,1.7.2,1.18.0,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.18.0,1.7.2,1.18.0,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.18.0,1.7.2,1.18.0,'serial hooks one'
V1.18.0,1.7.2,1.18.0,'serial hooks two'
V1.18.0,1.7.2,1.18.0,'serial hooks three'
V1.18.0,1.7.2,1.18.0,'serial hooks "after all" hook'
V1.18.0,1.7.3,1.18.0,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.18.0,1.7.3,1.18.0,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.18.0,1.7.3,1.18.0,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.18.0,1.7.3,1.18.0,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.18.0,1.7.3,1.18.0,'Runner .globalProps() should include common non enumerable globals'
V1.18.0,1.7.3,1.18.0,'Runner .globals() should white-list globals'
V1.18.0,1.7.3,1.18.0,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.18.0,1.7.3,1.18.0,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.18.0,1.7.3,1.18.0,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.18.0,1.7.3,1.18.0,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.18.0,1.7.3,1.18.0,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.18.0,1.7.3,1.18.0,'serial hooks one'
V1.18.0,1.7.3,1.18.0,'serial hooks two'
V1.18.0,1.7.3,1.18.0,'serial hooks three'
V1.18.0,1.7.3,1.18.0,'serial hooks "after all" hook'
V1.18.0,1.7.4,1.18.0,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.18.0,1.7.4,1.18.0,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.18.0,1.7.4,1.18.0,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.18.0,1.7.4,1.18.0,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.18.0,1.7.4,1.18.0,'Runner .globalProps() should include common non enumerable globals'
V1.18.0,1.7.4,1.18.0,'Runner .globals() should white-list globals'
V1.18.0,1.7.4,1.18.0,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.18.0,1.7.4,1.18.0,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.18.0,1.7.4,1.18.0,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.18.0,1.7.4,1.18.0,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.18.0,1.7.4,1.18.0,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.18.0,1.7.4,1.18.0,'serial hooks one'
V1.18.0,1.7.4,1.18.0,'serial hooks two'
V1.18.0,1.7.4,1.18.0,'serial hooks three'
V1.18.0,1.7.4,1.18.0,'serial hooks "after all" hook'
V1.18.0,1.8.0,1.18.0,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.18.0,1.8.0,1.18.0,'serial hooks "after all" hook'
V1.18.0,1.8.1,1.18.0,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.18.0,1.8.1,1.18.0,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.18.0,1.8.1,1.18.0,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.18.0,1.8.1,1.18.0,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.18.0,1.8.1,1.18.0,'Runner .globalProps() should include common non enumerable globals'
V1.18.0,1.8.1,1.18.0,'Runner .globals() should white-list globals'
V1.18.0,1.8.1,1.18.0,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.18.0,1.8.1,1.18.0,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.18.0,1.8.1,1.18.0,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.18.0,1.8.1,1.18.0,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.18.0,1.8.1,1.18.0,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.18.0,1.8.1,1.18.0,'serial hooks one'
V1.18.0,1.8.1,1.18.0,'serial hooks two'
V1.18.0,1.8.1,1.18.0,'serial hooks three'
V1.18.0,1.8.1,1.18.0,'serial hooks "after all" hook'
V1.18.0,1.8.2,1.18.0,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.18.0,1.8.2,1.18.0,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.18.0,1.8.2,1.18.0,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.18.0,1.8.2,1.18.0,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.18.0,1.8.2,1.18.0,'Runner .globalProps() should include common non enumerable globals'
V1.18.0,1.8.2,1.18.0,'Runner .globals() should white-list globals'
V1.18.0,1.8.2,1.18.0,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.18.0,1.8.2,1.18.0,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.18.0,1.8.2,1.18.0,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.18.0,1.8.2,1.18.0,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.18.0,1.8.2,1.18.0,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.18.0,1.8.2,1.18.0,'serial hooks one'
V1.18.0,1.8.2,1.18.0,'serial hooks two'
V1.18.0,1.8.2,1.18.0,'serial hooks three'
V1.18.0,1.8.2,1.18.0,'serial hooks "after all" hook'
V1.18.0,1.9.0,1.18.0,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.18.0,1.9.0,1.18.0,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.18.0,1.9.0,1.18.0,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.18.0,1.9.0,1.18.0,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.18.0,1.9.0,1.18.0,'Runner .globalProps() should include common non enumerable globals'
V1.18.0,1.9.0,1.18.0,'Runner .globals() should white-list globals'
V1.18.0,1.9.0,1.18.0,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.18.0,1.9.0,1.18.0,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.18.0,1.9.0,1.18.0,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.18.0,1.9.0,1.18.0,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.18.0,1.9.0,1.18.0,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.18.0,1.9.0,1.18.0,'serial hooks one'
V1.18.0,1.9.0,1.18.0,'serial hooks two'
V1.18.0,1.9.0,1.18.0,'serial hooks three'
V1.18.0,1.9.0,1.18.0,'serial hooks "after all" hook'
V1.18.0,1.10.0,1.18.0,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.18.0,1.10.0,1.18.0,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.18.0,1.10.0,1.18.0,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.18.0,1.10.0,1.18.0,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.18.0,1.10.0,1.18.0,'Runner .globalProps() should include common non enumerable globals'
V1.18.0,1.10.0,1.18.0,'Runner .globals() should white-list globals'
V1.18.0,1.10.0,1.18.0,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.18.0,1.10.0,1.18.0,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.18.0,1.10.0,1.18.0,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.18.0,1.10.0,1.18.0,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.18.0,1.10.0,1.18.0,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.18.0,1.10.0,1.18.0,'serial hooks one'
V1.18.0,1.10.0,1.18.0,'serial hooks two'
V1.18.0,1.10.0,1.18.0,'serial hooks three'
V1.18.0,1.10.0,1.18.0,'serial hooks "after all" hook'
V1.18.0,1.11.0,1.18.0,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.18.0,1.11.0,1.18.0,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.18.0,1.11.0,1.18.0,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.18.0,1.11.0,1.18.0,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.18.0,1.11.0,1.18.0,'Runner .globalProps() should include common non enumerable globals'
V1.18.0,1.11.0,1.18.0,'Runner .globals() should white-list globals'
V1.18.0,1.11.0,1.18.0,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.18.0,1.11.0,1.18.0,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.18.0,1.11.0,1.18.0,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.18.0,1.11.0,1.18.0,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.18.0,1.11.0,1.18.0,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.18.0,1.11.0,1.18.0,'serial hooks one'
V1.18.0,1.11.0,1.18.0,'serial hooks two'
V1.18.0,1.11.0,1.18.0,'serial hooks three'
V1.18.0,1.11.0,1.18.0,'serial hooks "after all" hook'
V1.18.0,1.12.0,1.18.0,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.18.0,1.12.0,1.18.0,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.18.0,1.12.0,1.18.0,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.18.0,1.12.0,1.18.0,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.18.0,1.12.0,1.18.0,'Runner .globalProps() should include common non enumerable globals'
V1.18.0,1.12.0,1.18.0,'Runner .globals() should white-list globals'
V1.18.0,1.12.0,1.18.0,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.18.0,1.12.0,1.18.0,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.18.0,1.12.0,1.18.0,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.18.0,1.12.0,1.18.0,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.18.0,1.12.0,1.18.0,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.18.0,1.12.1,1.18.0,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.18.0,1.12.1,1.18.0,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.18.0,1.12.1,1.18.0,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.18.0,1.12.1,1.18.0,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.18.0,1.12.1,1.18.0,'Runner .globalProps() should include common non enumerable globals'
V1.18.0,1.12.1,1.18.0,'Runner .globals() should white-list globals'
V1.18.0,1.12.1,1.18.0,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.18.0,1.12.1,1.18.0,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.18.0,1.12.1,1.18.0,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.18.0,1.12.1,1.18.0,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.18.0,1.12.1,1.18.0,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.18.0,1.13.0,1.18.0,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.18.0,1.13.0,1.18.0,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.18.0,1.13.0,1.18.0,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.18.0,1.13.0,1.18.0,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.18.0,1.13.0,1.18.0,'Runner .globalProps() should include common non enumerable globals'
V1.18.0,1.13.0,1.18.0,'Runner .globals() should white-list globals'
V1.18.0,1.13.0,1.18.0,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.18.0,1.13.0,1.18.0,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.18.0,1.13.0,1.18.0,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.18.0,1.13.0,1.18.0,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.18.0,1.13.0,1.18.0,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.18.0,1.14.0,1.18.0,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.18.0,1.14.0,1.18.0,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.18.0,1.14.0,1.18.0,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.18.0,1.14.0,1.18.0,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.18.0,1.14.0,1.18.0,'Runner .globalProps() should include common non enumerable globals'
V1.18.0,1.14.0,1.18.0,'Runner .globals() should white-list globals'
V1.18.0,1.14.0,1.18.0,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.18.0,1.14.0,1.18.0,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.18.0,1.14.0,1.18.0,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.18.0,1.14.0,1.18.0,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.18.0,1.14.0,1.18.0,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.18.0,1.14.0-mwo1,1.18.0,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.18.0,1.14.0-mwo1,1.18.0,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.18.0,1.14.0-mwo1,1.18.0,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.18.0,1.14.0-mwo1,1.18.0,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.18.0,1.14.0-mwo1,1.18.0,'Runner .globalProps() should include common non enumerable globals'
V1.18.0,1.14.0-mwo1,1.18.0,'Runner .globals() should white-list globals'
V1.18.0,1.14.0-mwo1,1.18.0,'Runner .checkGlobals(test) should emit "fail" when a single new disallowed global is introduced after a single extra global is allowed'
V1.18.0,1.14.0-mwo1,1.18.0,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.18.0,1.14.0-mwo1,1.18.0,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.18.0,1.14.0-mwo1,1.18.0,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.18.0,1.14.0-mwo1,1.18.0,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.18.0,1.14.0-mwo1,1.18.0,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.18.0,1.15.0,1.18.0,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.18.0,1.15.0,1.18.0,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.18.0,1.15.0,1.18.0,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.18.0,1.15.0,1.18.0,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.18.0,1.15.0,1.18.0,'Runner .globalProps() should include common non enumerable globals'
V1.18.0,1.15.0,1.18.0,'Runner .globals() should white-list globals'
V1.18.0,1.15.0,1.18.0,'Runner .checkGlobals(test) should emit "fail" when a single new disallowed global is introduced after a single extra global is allowed'
V1.18.0,1.15.0,1.18.0,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.18.0,1.15.0,1.18.0,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.18.0,1.15.0,1.18.0,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.18.0,1.15.0,1.18.0,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.18.0,1.15.1,1.18.0,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.18.0,1.15.1,1.18.0,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.18.0,1.15.1,1.18.0,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.18.0,1.15.1,1.18.0,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.18.0,1.15.1,1.18.0,'Runner .globalProps() should include common non enumerable globals'
V1.18.0,1.15.1,1.18.0,'Runner .globals() should white-list globals'
V1.18.0,1.15.1,1.18.0,'Runner .checkGlobals(test) should emit "fail" when a single new disallowed global is introduced after a single extra global is allowed'
V1.18.0,1.15.1,1.18.0,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.18.0,1.15.1,1.18.0,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.18.0,1.15.1,1.18.0,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.18.0,1.15.1,1.18.0,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.18.0,1.16.0,1.18.0,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.18.0,1.16.0,1.18.0,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.18.0,1.16.0,1.18.0,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.18.0,1.16.0,1.18.0,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.18.0,1.16.0,1.18.0,'Runner .globalProps() should include common non enumerable globals'
V1.18.0,1.16.0,1.18.0,'Runner .globals() should white-list globals'
V1.18.0,1.16.0,1.18.0,'Runner .checkGlobals(test) should emit "fail" when a single new disallowed global is introduced after a single extra global is allowed'
V1.18.0,1.16.0,1.18.0,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.18.0,1.16.1,1.18.0,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.18.0,1.16.1,1.18.0,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.18.0,1.16.1,1.18.0,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.18.0,1.16.1,1.18.0,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.18.0,1.16.1,1.18.0,'Runner .globalProps() should include common non enumerable globals'
V1.18.0,1.16.1,1.18.0,'Runner .globals() should white-list globals'
V1.18.0,1.16.1,1.18.0,'Runner .checkGlobals(test) should emit "fail" when a single new disallowed global is introduced after a single extra global is allowed'
V1.18.0,1.16.1,1.18.0,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.18.0,1.16.2,1.18.0,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.18.0,1.16.2,1.18.0,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.18.0,1.16.2,1.18.0,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.18.0,1.16.2,1.18.0,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.18.0,1.16.2,1.18.0,'Runner .globalProps() should include common non enumerable globals'
V1.18.0,1.16.2,1.18.0,'Runner .globals() should white-list globals'
V1.18.0,1.16.2,1.18.0,'Runner .checkGlobals(test) should emit "fail" when a single new disallowed global is introduced after a single extra global is allowed'
V1.18.0,1.16.2,1.18.0,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.18.0,1.17.0,1.18.0,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.18.0,1.17.0,1.18.0,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.18.0,1.17.0,1.18.0,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.18.0,1.17.0,1.18.0,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.18.0,1.17.0,1.18.0,'Runner .globalProps() should include common non enumerable globals'
V1.18.0,1.17.0,1.18.0,'Runner .globals() should white-list globals'
V1.18.0,1.17.0,1.18.0,'Runner .checkGlobals(test) should emit "fail" when a single new disallowed global is introduced after a single extra global is allowed'
V1.18.0,1.17.0,1.18.0,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.18.0,1.17.1,1.18.0,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.18.0,1.17.1,1.18.0,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.18.0,1.17.1,1.18.0,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.18.0,1.17.1,1.18.0,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.18.0,1.17.1,1.18.0,'Runner .globalProps() should include common non enumerable globals'
V1.18.0,1.17.1,1.18.0,'Runner .globals() should white-list globals'
V1.18.0,1.17.1,1.18.0,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.18.1,1.18.1,1.18.0,'Runner .globalProps() should include common non enumerable globals'
V1.18.1,1.18.1,1.18.0,'Runner .globals() should white-list globals'
V1.18.1,1.0.0,1.18.1,'Suite .clone() should copy the slow value'
V1.18.1,1.0.0,1.18.1,'Suite .slow() when given a string should parse it'
V1.18.1,1.0.0,1.18.1,'Suite .slow() when no argument is passed should return the slow value'
V1.18.1,1.0.0,1.18.1,'Suite .slow() when argument is passed should return the Suite object'
V1.18.1,1.0.0,1.18.1,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.18.1,1.0.0,1.18.1,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.18.1,1.0.0,1.18.1,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.18.1,1.0.0,1.18.1,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.18.1,1.0.0,1.18.1,'Suite .addSuite() "before each" hook'
V1.18.1,1.0.1,1.18.1,'Suite .clone() should copy the slow value'
V1.18.1,1.0.1,1.18.1,'Suite .slow() when given a string should parse it'
V1.18.1,1.0.1,1.18.1,'Suite .slow() when no argument is passed should return the slow value'
V1.18.1,1.0.1,1.18.1,'Suite .slow() when argument is passed should return the Suite object'
V1.18.1,1.0.1,1.18.1,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.18.1,1.0.1,1.18.1,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.18.1,1.0.1,1.18.1,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.18.1,1.0.1,1.18.1,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.18.1,1.0.1,1.18.1,'Suite .addSuite() "before each" hook'
V1.18.1,1.0.2,1.18.1,'Suite .clone() should copy the slow value'
V1.18.1,1.0.2,1.18.1,'Suite .slow() when given a string should parse it'
V1.18.1,1.0.2,1.18.1,'Suite .slow() when no argument is passed should return the slow value'
V1.18.1,1.0.2,1.18.1,'Suite .slow() when argument is passed should return the Suite object'
V1.18.1,1.0.2,1.18.1,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.18.1,1.0.2,1.18.1,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.18.1,1.0.2,1.18.1,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.18.1,1.0.2,1.18.1,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.18.1,1.0.2,1.18.1,'Suite .addSuite() "before each" hook'
V1.18.1,1.0.3,1.18.1,'Suite .clone() should copy the slow value'
V1.18.1,1.0.3,1.18.1,'Suite .slow() when given a string should parse it'
V1.18.1,1.0.3,1.18.1,'Suite .slow() when no argument is passed should return the slow value'
V1.18.1,1.0.3,1.18.1,'Suite .slow() when argument is passed should return the Suite object'
V1.18.1,1.0.3,1.18.1,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.18.1,1.0.3,1.18.1,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.18.1,1.0.3,1.18.1,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.18.1,1.0.3,1.18.1,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.18.1,1.0.3,1.18.1,'Suite .addSuite() "before each" hook'
V1.18.1,1.1.0,1.18.1,'Suite .clone() should copy the slow value'
V1.18.1,1.1.0,1.18.1,'Suite .slow() when given a string should parse it'
V1.18.1,1.1.0,1.18.1,'Suite .slow() when no argument is passed should return the slow value'
V1.18.1,1.1.0,1.18.1,'Suite .slow() when argument is passed should return the Suite object'
V1.18.1,1.1.0,1.18.1,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.18.1,1.1.0,1.18.1,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.18.1,1.1.0,1.18.1,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.18.1,1.1.0,1.18.1,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.18.1,1.1.0,1.18.1,'Suite .addSuite() "before each" hook'
V1.18.1,1.2.0,1.18.1,'Suite .clone() should copy the slow value'
V1.18.1,1.2.0,1.18.1,'Suite .slow() when given a string should parse it'
V1.18.1,1.2.0,1.18.1,'Suite .slow() when no argument is passed should return the slow value'
V1.18.1,1.2.0,1.18.1,'Suite .slow() when argument is passed should return the Suite object'
V1.18.1,1.2.0,1.18.1,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.18.1,1.2.0,1.18.1,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.18.1,1.2.0,1.18.1,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.18.1,1.2.0,1.18.1,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.18.1,1.2.0,1.18.1,'Suite .addSuite() "before each" hook'
V1.18.1,1.2.1,1.18.1,'Suite .clone() should copy the slow value'
V1.18.1,1.2.1,1.18.1,'Suite .slow() when given a string should parse it'
V1.18.1,1.2.1,1.18.1,'Suite .slow() when no argument is passed should return the slow value'
V1.18.1,1.2.1,1.18.1,'Suite .slow() when argument is passed should return the Suite object'
V1.18.1,1.2.1,1.18.1,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.18.1,1.2.1,1.18.1,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.18.1,1.2.1,1.18.1,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.18.1,1.2.1,1.18.1,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.18.1,1.2.1,1.18.1,'Suite .addSuite() "before each" hook'
V1.18.1,1.2.2,1.18.1,'Suite .clone() should copy the slow value'
V1.18.1,1.2.2,1.18.1,'Suite .slow() when given a string should parse it'
V1.18.1,1.2.2,1.18.1,'Suite .slow() when no argument is passed should return the slow value'
V1.18.1,1.2.2,1.18.1,'Suite .slow() when argument is passed should return the Suite object'
V1.18.1,1.2.2,1.18.1,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.18.1,1.2.2,1.18.1,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.18.1,1.2.2,1.18.1,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.18.1,1.2.2,1.18.1,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.18.1,1.2.2,1.18.1,'Suite .addSuite() "before each" hook'
V1.18.1,1.3.0,1.18.1,'Suite .clone() should copy the slow value'
V1.18.1,1.3.0,1.18.1,'Suite .slow() when given a string should parse it'
V1.18.1,1.3.0,1.18.1,'Suite .slow() when no argument is passed should return the slow value'
V1.18.1,1.3.0,1.18.1,'Suite .slow() when argument is passed should return the Suite object'
V1.18.1,1.3.0,1.18.1,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.18.1,1.3.0,1.18.1,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.18.1,1.3.0,1.18.1,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.18.1,1.3.0,1.18.1,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.18.1,1.3.0,1.18.1,'Suite .addSuite() "before each" hook'
V1.18.1,1.3.1,1.18.1,'Suite .clone() should copy the slow value'
V1.18.1,1.3.1,1.18.1,'Suite .slow() when given a string should parse it'
V1.18.1,1.3.1,1.18.1,'Suite .slow() when no argument is passed should return the slow value'
V1.18.1,1.3.1,1.18.1,'Suite .slow() when argument is passed should return the Suite object'
V1.18.1,1.3.1,1.18.1,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.18.1,1.3.1,1.18.1,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.18.1,1.3.1,1.18.1,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.18.1,1.3.1,1.18.1,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.18.1,1.3.1,1.18.1,'Suite .addSuite() "before each" hook'
V1.18.1,1.3.2,1.18.1,'Suite .clone() should copy the slow value'
V1.18.1,1.3.2,1.18.1,'Suite .slow() when given a string should parse it'
V1.18.1,1.3.2,1.18.1,'Suite .slow() when no argument is passed should return the slow value'
V1.18.1,1.3.2,1.18.1,'Suite .slow() when argument is passed should return the Suite object'
V1.18.1,1.3.2,1.18.1,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.18.1,1.3.2,1.18.1,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.18.1,1.3.2,1.18.1,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.18.1,1.3.2,1.18.1,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.18.1,1.3.2,1.18.1,'Suite .addSuite() "before each" hook'
V1.18.1,1.4.0,1.18.1,'Suite .clone() should copy the slow value'
V1.18.1,1.4.0,1.18.1,'Suite .slow() when given a string should parse it'
V1.18.1,1.4.0,1.18.1,'Suite .slow() when no argument is passed should return the slow value'
V1.18.1,1.4.0,1.18.1,'Suite .slow() when argument is passed should return the Suite object'
V1.18.1,1.4.0,1.18.1,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.18.1,1.4.0,1.18.1,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.18.1,1.4.0,1.18.1,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.18.1,1.4.0,1.18.1,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.18.1,1.4.0,1.18.1,'Suite .addSuite() "before each" hook'
V1.18.1,1.4.1,1.18.1,'Suite .clone() should copy the slow value'
V1.18.1,1.4.1,1.18.1,'Suite .slow() when given a string should parse it'
V1.18.1,1.4.1,1.18.1,'Suite .slow() when no argument is passed should return the slow value'
V1.18.1,1.4.1,1.18.1,'Suite .slow() when argument is passed should return the Suite object'
V1.18.1,1.4.1,1.18.1,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.18.1,1.4.1,1.18.1,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.18.1,1.4.1,1.18.1,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.18.1,1.4.1,1.18.1,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.18.1,1.4.1,1.18.1,'Suite .addSuite() "before each" hook'
V1.18.1,1.4.2,1.18.1,'Suite .clone() should copy the slow value'
V1.18.1,1.4.2,1.18.1,'Suite .slow() when given a string should parse it'
V1.18.1,1.4.2,1.18.1,'Suite .slow() when no argument is passed should return the slow value'
V1.18.1,1.4.2,1.18.1,'Suite .slow() when argument is passed should return the Suite object'
V1.18.1,1.4.2,1.18.1,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.18.1,1.4.2,1.18.1,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.18.1,1.4.2,1.18.1,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.18.1,1.4.2,1.18.1,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.18.1,1.4.2,1.18.1,'Suite .addSuite() "before each" hook'
V1.18.1,1.5.0,1.18.1,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.18.1,1.5.0,1.18.1,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.18.1,1.5.0,1.18.1,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.18.1,1.5.0,1.18.1,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.18.1,1.5.0,1.18.1,'Runner .globalProps() should include common non enumerable globals'
V1.18.1,1.5.0,1.18.1,'Runner .globals() should white-list globals'
V1.18.1,1.5.0,1.18.1,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.18.1,1.5.0,1.18.1,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.18.1,1.5.0,1.18.1,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.18.1,1.5.0,1.18.1,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.18.1,1.5.0,1.18.1,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.18.1,1.5.0,1.18.1,'serial hooks one'
V1.18.1,1.5.0,1.18.1,'serial hooks two'
V1.18.1,1.5.0,1.18.1,'serial hooks three'
V1.18.1,1.5.0,1.18.1,'serial hooks "after all" hook'
V1.18.1,1.6.0,1.18.1,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.18.1,1.6.0,1.18.1,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.18.1,1.6.0,1.18.1,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.18.1,1.6.0,1.18.1,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.18.1,1.6.0,1.18.1,'Runner .globalProps() should include common non enumerable globals'
V1.18.1,1.6.0,1.18.1,'Runner .globals() should white-list globals'
V1.18.1,1.6.0,1.18.1,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.18.1,1.6.0,1.18.1,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.18.1,1.6.0,1.18.1,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.18.1,1.6.0,1.18.1,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.18.1,1.6.0,1.18.1,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.18.1,1.6.0,1.18.1,'serial hooks one'
V1.18.1,1.6.0,1.18.1,'serial hooks two'
V1.18.1,1.6.0,1.18.1,'serial hooks three'
V1.18.1,1.6.0,1.18.1,'serial hooks "after all" hook'
V1.18.1,1.7.0,1.18.1,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.18.1,1.7.0,1.18.1,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.18.1,1.7.0,1.18.1,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.18.1,1.7.0,1.18.1,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.18.1,1.7.0,1.18.1,'Runner .globalProps() should include common non enumerable globals'
V1.18.1,1.7.0,1.18.1,'Runner .globals() should white-list globals'
V1.18.1,1.7.0,1.18.1,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.18.1,1.7.0,1.18.1,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.18.1,1.7.0,1.18.1,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.18.1,1.7.0,1.18.1,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.18.1,1.7.0,1.18.1,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.18.1,1.7.0,1.18.1,'serial hooks one'
V1.18.1,1.7.0,1.18.1,'serial hooks two'
V1.18.1,1.7.0,1.18.1,'serial hooks three'
V1.18.1,1.7.0,1.18.1,'serial hooks "after all" hook'
V1.18.1,1.7.1,1.18.1,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.18.1,1.7.1,1.18.1,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.18.1,1.7.1,1.18.1,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.18.1,1.7.1,1.18.1,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.18.1,1.7.1,1.18.1,'Runner .globalProps() should include common non enumerable globals'
V1.18.1,1.7.1,1.18.1,'Runner .globals() should white-list globals'
V1.18.1,1.7.1,1.18.1,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.18.1,1.7.1,1.18.1,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.18.1,1.7.1,1.18.1,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.18.1,1.7.1,1.18.1,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.18.1,1.7.1,1.18.1,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.18.1,1.7.1,1.18.1,'serial hooks one'
V1.18.1,1.7.1,1.18.1,'serial hooks two'
V1.18.1,1.7.1,1.18.1,'serial hooks three'
V1.18.1,1.7.1,1.18.1,'serial hooks "after all" hook'
V1.18.1,1.7.2,1.18.1,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.18.1,1.7.2,1.18.1,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.18.1,1.7.2,1.18.1,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.18.1,1.7.2,1.18.1,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.18.1,1.7.2,1.18.1,'Runner .globalProps() should include common non enumerable globals'
V1.18.1,1.7.2,1.18.1,'Runner .globals() should white-list globals'
V1.18.1,1.7.2,1.18.1,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.18.1,1.7.2,1.18.1,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.18.1,1.7.2,1.18.1,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.18.1,1.7.2,1.18.1,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.18.1,1.7.2,1.18.1,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.18.1,1.7.2,1.18.1,'serial hooks one'
V1.18.1,1.7.2,1.18.1,'serial hooks two'
V1.18.1,1.7.2,1.18.1,'serial hooks three'
V1.18.1,1.7.2,1.18.1,'serial hooks "after all" hook'
V1.18.1,1.7.3,1.18.1,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.18.1,1.7.3,1.18.1,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.18.1,1.7.3,1.18.1,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.18.1,1.7.3,1.18.1,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.18.1,1.7.3,1.18.1,'Runner .globalProps() should include common non enumerable globals'
V1.18.1,1.7.3,1.18.1,'Runner .globals() should white-list globals'
V1.18.1,1.7.3,1.18.1,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.18.1,1.7.3,1.18.1,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.18.1,1.7.3,1.18.1,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.18.1,1.7.3,1.18.1,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.18.1,1.7.3,1.18.1,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.18.1,1.7.3,1.18.1,'serial hooks one'
V1.18.1,1.7.3,1.18.1,'serial hooks two'
V1.18.1,1.7.3,1.18.1,'serial hooks three'
V1.18.1,1.7.3,1.18.1,'serial hooks "after all" hook'
V1.18.1,1.7.4,1.18.1,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.18.1,1.7.4,1.18.1,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.18.1,1.7.4,1.18.1,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.18.1,1.7.4,1.18.1,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.18.1,1.7.4,1.18.1,'Runner .globalProps() should include common non enumerable globals'
V1.18.1,1.7.4,1.18.1,'Runner .globals() should white-list globals'
V1.18.1,1.7.4,1.18.1,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.18.1,1.7.4,1.18.1,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.18.1,1.7.4,1.18.1,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.18.1,1.7.4,1.18.1,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.18.1,1.7.4,1.18.1,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.18.1,1.7.4,1.18.1,'serial hooks one'
V1.18.1,1.7.4,1.18.1,'serial hooks two'
V1.18.1,1.7.4,1.18.1,'serial hooks three'
V1.18.1,1.7.4,1.18.1,'serial hooks "after all" hook'
V1.18.1,1.8.0,1.18.1,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.18.1,1.8.0,1.18.1,'serial hooks "after all" hook'
V1.18.1,1.8.1,1.18.1,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.18.1,1.8.1,1.18.1,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.18.1,1.8.1,1.18.1,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.18.1,1.8.1,1.18.1,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.18.1,1.8.1,1.18.1,'Runner .globalProps() should include common non enumerable globals'
V1.18.1,1.8.1,1.18.1,'Runner .globals() should white-list globals'
V1.18.1,1.8.1,1.18.1,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.18.1,1.8.1,1.18.1,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.18.1,1.8.1,1.18.1,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.18.1,1.8.1,1.18.1,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.18.1,1.8.1,1.18.1,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.18.1,1.8.1,1.18.1,'serial hooks one'
V1.18.1,1.8.1,1.18.1,'serial hooks two'
V1.18.1,1.8.1,1.18.1,'serial hooks three'
V1.18.1,1.8.1,1.18.1,'serial hooks "after all" hook'
V1.18.1,1.8.2,1.18.1,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.18.1,1.8.2,1.18.1,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.18.1,1.8.2,1.18.1,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.18.1,1.8.2,1.18.1,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.18.1,1.8.2,1.18.1,'Runner .globalProps() should include common non enumerable globals'
V1.18.1,1.8.2,1.18.1,'Runner .globals() should white-list globals'
V1.18.1,1.8.2,1.18.1,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.18.1,1.8.2,1.18.1,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.18.1,1.8.2,1.18.1,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.18.1,1.8.2,1.18.1,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.18.1,1.8.2,1.18.1,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.18.1,1.8.2,1.18.1,'serial hooks one'
V1.18.1,1.8.2,1.18.1,'serial hooks two'
V1.18.1,1.8.2,1.18.1,'serial hooks three'
V1.18.1,1.8.2,1.18.1,'serial hooks "after all" hook'
V1.18.1,1.9.0,1.18.1,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.18.1,1.9.0,1.18.1,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.18.1,1.9.0,1.18.1,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.18.1,1.9.0,1.18.1,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.18.1,1.9.0,1.18.1,'Runner .globalProps() should include common non enumerable globals'
V1.18.1,1.9.0,1.18.1,'Runner .globals() should white-list globals'
V1.18.1,1.9.0,1.18.1,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.18.1,1.9.0,1.18.1,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.18.1,1.9.0,1.18.1,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.18.1,1.9.0,1.18.1,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.18.1,1.9.0,1.18.1,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.18.1,1.9.0,1.18.1,'serial hooks one'
V1.18.1,1.9.0,1.18.1,'serial hooks two'
V1.18.1,1.9.0,1.18.1,'serial hooks three'
V1.18.1,1.9.0,1.18.1,'serial hooks "after all" hook'
V1.18.1,1.10.0,1.18.1,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.18.1,1.10.0,1.18.1,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.18.1,1.10.0,1.18.1,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.18.1,1.10.0,1.18.1,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.18.1,1.10.0,1.18.1,'Runner .globalProps() should include common non enumerable globals'
V1.18.1,1.10.0,1.18.1,'Runner .globals() should white-list globals'
V1.18.1,1.10.0,1.18.1,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.18.1,1.10.0,1.18.1,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.18.1,1.10.0,1.18.1,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.18.1,1.10.0,1.18.1,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.18.1,1.10.0,1.18.1,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.18.1,1.10.0,1.18.1,'serial hooks one'
V1.18.1,1.10.0,1.18.1,'serial hooks two'
V1.18.1,1.10.0,1.18.1,'serial hooks three'
V1.18.1,1.10.0,1.18.1,'serial hooks "after all" hook'
V1.18.1,1.11.0,1.18.1,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.18.1,1.11.0,1.18.1,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.18.1,1.11.0,1.18.1,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.18.1,1.11.0,1.18.1,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.18.1,1.11.0,1.18.1,'Runner .globalProps() should include common non enumerable globals'
V1.18.1,1.11.0,1.18.1,'Runner .globals() should white-list globals'
V1.18.1,1.11.0,1.18.1,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.18.1,1.11.0,1.18.1,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.18.1,1.11.0,1.18.1,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.18.1,1.11.0,1.18.1,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.18.1,1.11.0,1.18.1,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.18.1,1.11.0,1.18.1,'serial hooks one'
V1.18.1,1.11.0,1.18.1,'serial hooks two'
V1.18.1,1.11.0,1.18.1,'serial hooks three'
V1.18.1,1.11.0,1.18.1,'serial hooks "after all" hook'
V1.18.1,1.12.0,1.18.1,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.18.1,1.12.0,1.18.1,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.18.1,1.12.0,1.18.1,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.18.1,1.12.0,1.18.1,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.18.1,1.12.0,1.18.1,'Runner .globalProps() should include common non enumerable globals'
V1.18.1,1.12.0,1.18.1,'Runner .globals() should white-list globals'
V1.18.1,1.12.0,1.18.1,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.18.1,1.12.0,1.18.1,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.18.1,1.12.0,1.18.1,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.18.1,1.12.0,1.18.1,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.18.1,1.12.0,1.18.1,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.18.1,1.12.1,1.18.1,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.18.1,1.12.1,1.18.1,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.18.1,1.12.1,1.18.1,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.18.1,1.12.1,1.18.1,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.18.1,1.12.1,1.18.1,'Runner .globalProps() should include common non enumerable globals'
V1.18.1,1.12.1,1.18.1,'Runner .globals() should white-list globals'
V1.18.1,1.12.1,1.18.1,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.18.1,1.12.1,1.18.1,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.18.1,1.12.1,1.18.1,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.18.1,1.12.1,1.18.1,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.18.1,1.12.1,1.18.1,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.18.1,1.13.0,1.18.1,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.18.1,1.13.0,1.18.1,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.18.1,1.13.0,1.18.1,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.18.1,1.13.0,1.18.1,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.18.1,1.13.0,1.18.1,'Runner .globalProps() should include common non enumerable globals'
V1.18.1,1.13.0,1.18.1,'Runner .globals() should white-list globals'
V1.18.1,1.13.0,1.18.1,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.18.1,1.13.0,1.18.1,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.18.1,1.13.0,1.18.1,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.18.1,1.13.0,1.18.1,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.18.1,1.13.0,1.18.1,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.18.1,1.14.0,1.18.1,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.18.1,1.14.0,1.18.1,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.18.1,1.14.0,1.18.1,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.18.1,1.14.0,1.18.1,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.18.1,1.14.0,1.18.1,'Runner .globalProps() should include common non enumerable globals'
V1.18.1,1.14.0,1.18.1,'Runner .globals() should white-list globals'
V1.18.1,1.14.0,1.18.1,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.18.1,1.14.0,1.18.1,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.18.1,1.14.0,1.18.1,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.18.1,1.14.0,1.18.1,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.18.1,1.14.0,1.18.1,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.18.1,1.14.0-mwo1,1.18.1,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.18.1,1.14.0-mwo1,1.18.1,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.18.1,1.14.0-mwo1,1.18.1,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.18.1,1.14.0-mwo1,1.18.1,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.18.1,1.14.0-mwo1,1.18.1,'Runner .globalProps() should include common non enumerable globals'
V1.18.1,1.14.0-mwo1,1.18.1,'Runner .globals() should white-list globals'
V1.18.1,1.14.0-mwo1,1.18.1,'Runner .checkGlobals(test) should emit "fail" when a single new disallowed global is introduced after a single extra global is allowed'
V1.18.1,1.14.0-mwo1,1.18.1,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.18.1,1.14.0-mwo1,1.18.1,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.18.1,1.14.0-mwo1,1.18.1,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.18.1,1.14.0-mwo1,1.18.1,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.18.1,1.14.0-mwo1,1.18.1,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.18.1,1.15.0,1.18.1,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.18.1,1.15.0,1.18.1,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.18.1,1.15.0,1.18.1,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.18.1,1.15.0,1.18.1,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.18.1,1.15.0,1.18.1,'Runner .globalProps() should include common non enumerable globals'
V1.18.1,1.15.0,1.18.1,'Runner .globals() should white-list globals'
V1.18.1,1.15.0,1.18.1,'Runner .checkGlobals(test) should emit "fail" when a single new disallowed global is introduced after a single extra global is allowed'
V1.18.1,1.15.0,1.18.1,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.18.1,1.15.0,1.18.1,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.18.1,1.15.0,1.18.1,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.18.1,1.15.0,1.18.1,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.18.1,1.15.1,1.18.1,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.18.1,1.15.1,1.18.1,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.18.1,1.15.1,1.18.1,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.18.1,1.15.1,1.18.1,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.18.1,1.15.1,1.18.1,'Runner .globalProps() should include common non enumerable globals'
V1.18.1,1.15.1,1.18.1,'Runner .globals() should white-list globals'
V1.18.1,1.15.1,1.18.1,'Runner .checkGlobals(test) should emit "fail" when a single new disallowed global is introduced after a single extra global is allowed'
V1.18.1,1.15.1,1.18.1,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.18.1,1.15.1,1.18.1,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.18.1,1.15.1,1.18.1,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.18.1,1.15.1,1.18.1,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.18.1,1.16.0,1.18.1,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.18.1,1.16.0,1.18.1,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.18.1,1.16.0,1.18.1,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.18.1,1.16.0,1.18.1,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.18.1,1.16.0,1.18.1,'Runner .globalProps() should include common non enumerable globals'
V1.18.1,1.16.0,1.18.1,'Runner .globals() should white-list globals'
V1.18.1,1.16.0,1.18.1,'Runner .checkGlobals(test) should emit "fail" when a single new disallowed global is introduced after a single extra global is allowed'
V1.18.1,1.16.0,1.18.1,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.18.1,1.16.1,1.18.1,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.18.1,1.16.1,1.18.1,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.18.1,1.16.1,1.18.1,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.18.1,1.16.1,1.18.1,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.18.1,1.16.1,1.18.1,'Runner .globalProps() should include common non enumerable globals'
V1.18.1,1.16.1,1.18.1,'Runner .globals() should white-list globals'
V1.18.1,1.16.1,1.18.1,'Runner .checkGlobals(test) should emit "fail" when a single new disallowed global is introduced after a single extra global is allowed'
V1.18.1,1.16.1,1.18.1,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.18.1,1.16.2,1.18.1,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.18.1,1.16.2,1.18.1,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.18.1,1.16.2,1.18.1,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.18.1,1.16.2,1.18.1,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.18.1,1.16.2,1.18.1,'Runner .globalProps() should include common non enumerable globals'
V1.18.1,1.16.2,1.18.1,'Runner .globals() should white-list globals'
V1.18.1,1.16.2,1.18.1,'Runner .checkGlobals(test) should emit "fail" when a single new disallowed global is introduced after a single extra global is allowed'
V1.18.1,1.16.2,1.18.1,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.18.1,1.17.0,1.18.1,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.18.1,1.17.0,1.18.1,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.18.1,1.17.0,1.18.1,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.18.1,1.17.0,1.18.1,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.18.1,1.17.0,1.18.1,'Runner .globalProps() should include common non enumerable globals'
V1.18.1,1.17.0,1.18.1,'Runner .globals() should white-list globals'
V1.18.1,1.17.0,1.18.1,'Runner .checkGlobals(test) should emit "fail" when a single new disallowed global is introduced after a single extra global is allowed'
V1.18.1,1.17.0,1.18.1,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.18.1,1.17.1,1.18.1,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.18.1,1.17.1,1.18.1,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.18.1,1.17.1,1.18.1,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.18.1,1.17.1,1.18.1,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.18.1,1.17.1,1.18.1,'Runner .globalProps() should include common non enumerable globals'
V1.18.1,1.17.1,1.18.1,'Runner .globals() should white-list globals'
V1.18.1,1.17.1,1.18.1,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.18.1,1.18.0,1.18.1,'Runner .globalProps() should include common non enumerable globals'
V1.18.1,1.18.0,1.18.1,'Runner .globals() should white-list globals'
V1.18.2,1.18.2,1.18.0,'Runner .globalProps() should include common non enumerable globals'
V1.18.2,1.18.2,1.18.0,'Runner .globals() should white-list globals'
V1.18.2,1.18.2,1.18.1,'Runner .globalProps() should include common non enumerable globals'
V1.18.2,1.18.2,1.18.1,'Runner .globals() should white-list globals'
V1.18.2,1.0.0,1.18.2,'Suite .clone() should copy the slow value'
V1.18.2,1.0.0,1.18.2,'Suite .slow() when given a string should parse it'
V1.18.2,1.0.0,1.18.2,'Suite .slow() when no argument is passed should return the slow value'
V1.18.2,1.0.0,1.18.2,'Suite .slow() when argument is passed should return the Suite object'
V1.18.2,1.0.0,1.18.2,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.18.2,1.0.0,1.18.2,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.18.2,1.0.0,1.18.2,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.18.2,1.0.0,1.18.2,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.18.2,1.0.0,1.18.2,'Suite .addSuite() "before each" hook'
V1.18.2,1.0.1,1.18.2,'Suite .clone() should copy the slow value'
V1.18.2,1.0.1,1.18.2,'Suite .slow() when given a string should parse it'
V1.18.2,1.0.1,1.18.2,'Suite .slow() when no argument is passed should return the slow value'
V1.18.2,1.0.1,1.18.2,'Suite .slow() when argument is passed should return the Suite object'
V1.18.2,1.0.1,1.18.2,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.18.2,1.0.1,1.18.2,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.18.2,1.0.1,1.18.2,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.18.2,1.0.1,1.18.2,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.18.2,1.0.1,1.18.2,'Suite .addSuite() "before each" hook'
V1.18.2,1.0.2,1.18.2,'Suite .clone() should copy the slow value'
V1.18.2,1.0.2,1.18.2,'Suite .slow() when given a string should parse it'
V1.18.2,1.0.2,1.18.2,'Suite .slow() when no argument is passed should return the slow value'
V1.18.2,1.0.2,1.18.2,'Suite .slow() when argument is passed should return the Suite object'
V1.18.2,1.0.2,1.18.2,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.18.2,1.0.2,1.18.2,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.18.2,1.0.2,1.18.2,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.18.2,1.0.2,1.18.2,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.18.2,1.0.2,1.18.2,'Suite .addSuite() "before each" hook'
V1.18.2,1.0.3,1.18.2,'Suite .clone() should copy the slow value'
V1.18.2,1.0.3,1.18.2,'Suite .slow() when given a string should parse it'
V1.18.2,1.0.3,1.18.2,'Suite .slow() when no argument is passed should return the slow value'
V1.18.2,1.0.3,1.18.2,'Suite .slow() when argument is passed should return the Suite object'
V1.18.2,1.0.3,1.18.2,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.18.2,1.0.3,1.18.2,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.18.2,1.0.3,1.18.2,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.18.2,1.0.3,1.18.2,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.18.2,1.0.3,1.18.2,'Suite .addSuite() "before each" hook'
V1.18.2,1.1.0,1.18.2,'Suite .clone() should copy the slow value'
V1.18.2,1.1.0,1.18.2,'Suite .slow() when given a string should parse it'
V1.18.2,1.1.0,1.18.2,'Suite .slow() when no argument is passed should return the slow value'
V1.18.2,1.1.0,1.18.2,'Suite .slow() when argument is passed should return the Suite object'
V1.18.2,1.1.0,1.18.2,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.18.2,1.1.0,1.18.2,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.18.2,1.1.0,1.18.2,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.18.2,1.1.0,1.18.2,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.18.2,1.1.0,1.18.2,'Suite .addSuite() "before each" hook'
V1.18.2,1.2.0,1.18.2,'Suite .clone() should copy the slow value'
V1.18.2,1.2.0,1.18.2,'Suite .slow() when given a string should parse it'
V1.18.2,1.2.0,1.18.2,'Suite .slow() when no argument is passed should return the slow value'
V1.18.2,1.2.0,1.18.2,'Suite .slow() when argument is passed should return the Suite object'
V1.18.2,1.2.0,1.18.2,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.18.2,1.2.0,1.18.2,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.18.2,1.2.0,1.18.2,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.18.2,1.2.0,1.18.2,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.18.2,1.2.0,1.18.2,'Suite .addSuite() "before each" hook'
V1.18.2,1.2.1,1.18.2,'Suite .clone() should copy the slow value'
V1.18.2,1.2.1,1.18.2,'Suite .slow() when given a string should parse it'
V1.18.2,1.2.1,1.18.2,'Suite .slow() when no argument is passed should return the slow value'
V1.18.2,1.2.1,1.18.2,'Suite .slow() when argument is passed should return the Suite object'
V1.18.2,1.2.1,1.18.2,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.18.2,1.2.1,1.18.2,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.18.2,1.2.1,1.18.2,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.18.2,1.2.1,1.18.2,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.18.2,1.2.1,1.18.2,'Suite .addSuite() "before each" hook'
V1.18.2,1.2.2,1.18.2,'Suite .clone() should copy the slow value'
V1.18.2,1.2.2,1.18.2,'Suite .slow() when given a string should parse it'
V1.18.2,1.2.2,1.18.2,'Suite .slow() when no argument is passed should return the slow value'
V1.18.2,1.2.2,1.18.2,'Suite .slow() when argument is passed should return the Suite object'
V1.18.2,1.2.2,1.18.2,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.18.2,1.2.2,1.18.2,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.18.2,1.2.2,1.18.2,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.18.2,1.2.2,1.18.2,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.18.2,1.2.2,1.18.2,'Suite .addSuite() "before each" hook'
V1.18.2,1.3.0,1.18.2,'Suite .clone() should copy the slow value'
V1.18.2,1.3.0,1.18.2,'Suite .slow() when given a string should parse it'
V1.18.2,1.3.0,1.18.2,'Suite .slow() when no argument is passed should return the slow value'
V1.18.2,1.3.0,1.18.2,'Suite .slow() when argument is passed should return the Suite object'
V1.18.2,1.3.0,1.18.2,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.18.2,1.3.0,1.18.2,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.18.2,1.3.0,1.18.2,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.18.2,1.3.0,1.18.2,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.18.2,1.3.0,1.18.2,'Suite .addSuite() "before each" hook'
V1.18.2,1.3.1,1.18.2,'Suite .clone() should copy the slow value'
V1.18.2,1.3.1,1.18.2,'Suite .slow() when given a string should parse it'
V1.18.2,1.3.1,1.18.2,'Suite .slow() when no argument is passed should return the slow value'
V1.18.2,1.3.1,1.18.2,'Suite .slow() when argument is passed should return the Suite object'
V1.18.2,1.3.1,1.18.2,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.18.2,1.3.1,1.18.2,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.18.2,1.3.1,1.18.2,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.18.2,1.3.1,1.18.2,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.18.2,1.3.1,1.18.2,'Suite .addSuite() "before each" hook'
V1.18.2,1.3.2,1.18.2,'Suite .clone() should copy the slow value'
V1.18.2,1.3.2,1.18.2,'Suite .slow() when given a string should parse it'
V1.18.2,1.3.2,1.18.2,'Suite .slow() when no argument is passed should return the slow value'
V1.18.2,1.3.2,1.18.2,'Suite .slow() when argument is passed should return the Suite object'
V1.18.2,1.3.2,1.18.2,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.18.2,1.3.2,1.18.2,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.18.2,1.3.2,1.18.2,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.18.2,1.3.2,1.18.2,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.18.2,1.3.2,1.18.2,'Suite .addSuite() "before each" hook'
V1.18.2,1.4.0,1.18.2,'Suite .clone() should copy the slow value'
V1.18.2,1.4.0,1.18.2,'Suite .slow() when given a string should parse it'
V1.18.2,1.4.0,1.18.2,'Suite .slow() when no argument is passed should return the slow value'
V1.18.2,1.4.0,1.18.2,'Suite .slow() when argument is passed should return the Suite object'
V1.18.2,1.4.0,1.18.2,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.18.2,1.4.0,1.18.2,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.18.2,1.4.0,1.18.2,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.18.2,1.4.0,1.18.2,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.18.2,1.4.0,1.18.2,'Suite .addSuite() "before each" hook'
V1.18.2,1.4.1,1.18.2,'Suite .clone() should copy the slow value'
V1.18.2,1.4.1,1.18.2,'Suite .slow() when given a string should parse it'
V1.18.2,1.4.1,1.18.2,'Suite .slow() when no argument is passed should return the slow value'
V1.18.2,1.4.1,1.18.2,'Suite .slow() when argument is passed should return the Suite object'
V1.18.2,1.4.1,1.18.2,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.18.2,1.4.1,1.18.2,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.18.2,1.4.1,1.18.2,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.18.2,1.4.1,1.18.2,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.18.2,1.4.1,1.18.2,'Suite .addSuite() "before each" hook'
V1.18.2,1.4.2,1.18.2,'Suite .clone() should copy the slow value'
V1.18.2,1.4.2,1.18.2,'Suite .slow() when given a string should parse it'
V1.18.2,1.4.2,1.18.2,'Suite .slow() when no argument is passed should return the slow value'
V1.18.2,1.4.2,1.18.2,'Suite .slow() when argument is passed should return the Suite object'
V1.18.2,1.4.2,1.18.2,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.18.2,1.4.2,1.18.2,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.18.2,1.4.2,1.18.2,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.18.2,1.4.2,1.18.2,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.18.2,1.4.2,1.18.2,'Suite .addSuite() "before each" hook'
V1.18.2,1.5.0,1.18.2,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.18.2,1.5.0,1.18.2,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.18.2,1.5.0,1.18.2,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.18.2,1.5.0,1.18.2,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.18.2,1.5.0,1.18.2,'Runner .globalProps() should include common non enumerable globals'
V1.18.2,1.5.0,1.18.2,'Runner .globals() should white-list globals'
V1.18.2,1.5.0,1.18.2,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.18.2,1.5.0,1.18.2,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.18.2,1.5.0,1.18.2,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.18.2,1.5.0,1.18.2,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.18.2,1.5.0,1.18.2,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.18.2,1.5.0,1.18.2,'serial hooks one'
V1.18.2,1.5.0,1.18.2,'serial hooks two'
V1.18.2,1.5.0,1.18.2,'serial hooks three'
V1.18.2,1.5.0,1.18.2,'serial hooks "after all" hook'
V1.18.2,1.6.0,1.18.2,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.18.2,1.6.0,1.18.2,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.18.2,1.6.0,1.18.2,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.18.2,1.6.0,1.18.2,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.18.2,1.6.0,1.18.2,'Runner .globalProps() should include common non enumerable globals'
V1.18.2,1.6.0,1.18.2,'Runner .globals() should white-list globals'
V1.18.2,1.6.0,1.18.2,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.18.2,1.6.0,1.18.2,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.18.2,1.6.0,1.18.2,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.18.2,1.6.0,1.18.2,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.18.2,1.6.0,1.18.2,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.18.2,1.6.0,1.18.2,'serial hooks one'
V1.18.2,1.6.0,1.18.2,'serial hooks two'
V1.18.2,1.6.0,1.18.2,'serial hooks three'
V1.18.2,1.6.0,1.18.2,'serial hooks "after all" hook'
V1.18.2,1.7.0,1.18.2,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.18.2,1.7.0,1.18.2,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.18.2,1.7.0,1.18.2,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.18.2,1.7.0,1.18.2,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.18.2,1.7.0,1.18.2,'Runner .globalProps() should include common non enumerable globals'
V1.18.2,1.7.0,1.18.2,'Runner .globals() should white-list globals'
V1.18.2,1.7.0,1.18.2,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.18.2,1.7.0,1.18.2,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.18.2,1.7.0,1.18.2,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.18.2,1.7.0,1.18.2,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.18.2,1.7.0,1.18.2,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.18.2,1.7.0,1.18.2,'serial hooks one'
V1.18.2,1.7.0,1.18.2,'serial hooks two'
V1.18.2,1.7.0,1.18.2,'serial hooks three'
V1.18.2,1.7.0,1.18.2,'serial hooks "after all" hook'
V1.18.2,1.7.1,1.18.2,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.18.2,1.7.1,1.18.2,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.18.2,1.7.1,1.18.2,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.18.2,1.7.1,1.18.2,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.18.2,1.7.1,1.18.2,'Runner .globalProps() should include common non enumerable globals'
V1.18.2,1.7.1,1.18.2,'Runner .globals() should white-list globals'
V1.18.2,1.7.1,1.18.2,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.18.2,1.7.1,1.18.2,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.18.2,1.7.1,1.18.2,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.18.2,1.7.1,1.18.2,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.18.2,1.7.1,1.18.2,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.18.2,1.7.1,1.18.2,'serial hooks one'
V1.18.2,1.7.1,1.18.2,'serial hooks two'
V1.18.2,1.7.1,1.18.2,'serial hooks three'
V1.18.2,1.7.1,1.18.2,'serial hooks "after all" hook'
V1.18.2,1.7.2,1.18.2,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.18.2,1.7.2,1.18.2,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.18.2,1.7.2,1.18.2,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.18.2,1.7.2,1.18.2,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.18.2,1.7.2,1.18.2,'Runner .globalProps() should include common non enumerable globals'
V1.18.2,1.7.2,1.18.2,'Runner .globals() should white-list globals'
V1.18.2,1.7.2,1.18.2,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.18.2,1.7.2,1.18.2,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.18.2,1.7.2,1.18.2,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.18.2,1.7.2,1.18.2,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.18.2,1.7.2,1.18.2,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.18.2,1.7.2,1.18.2,'serial hooks one'
V1.18.2,1.7.2,1.18.2,'serial hooks two'
V1.18.2,1.7.2,1.18.2,'serial hooks three'
V1.18.2,1.7.2,1.18.2,'serial hooks "after all" hook'
V1.18.2,1.7.3,1.18.2,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.18.2,1.7.3,1.18.2,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.18.2,1.7.3,1.18.2,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.18.2,1.7.3,1.18.2,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.18.2,1.7.3,1.18.2,'Runner .globalProps() should include common non enumerable globals'
V1.18.2,1.7.3,1.18.2,'Runner .globals() should white-list globals'
V1.18.2,1.7.3,1.18.2,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.18.2,1.7.3,1.18.2,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.18.2,1.7.3,1.18.2,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.18.2,1.7.3,1.18.2,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.18.2,1.7.3,1.18.2,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.18.2,1.7.3,1.18.2,'serial hooks one'
V1.18.2,1.7.3,1.18.2,'serial hooks two'
V1.18.2,1.7.3,1.18.2,'serial hooks three'
V1.18.2,1.7.3,1.18.2,'serial hooks "after all" hook'
V1.18.2,1.7.4,1.18.2,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.18.2,1.7.4,1.18.2,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.18.2,1.7.4,1.18.2,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.18.2,1.7.4,1.18.2,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.18.2,1.7.4,1.18.2,'Runner .globalProps() should include common non enumerable globals'
V1.18.2,1.7.4,1.18.2,'Runner .globals() should white-list globals'
V1.18.2,1.7.4,1.18.2,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.18.2,1.7.4,1.18.2,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.18.2,1.7.4,1.18.2,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.18.2,1.7.4,1.18.2,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.18.2,1.7.4,1.18.2,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.18.2,1.7.4,1.18.2,'serial hooks one'
V1.18.2,1.7.4,1.18.2,'serial hooks two'
V1.18.2,1.7.4,1.18.2,'serial hooks three'
V1.18.2,1.7.4,1.18.2,'serial hooks "after all" hook'
V1.18.2,1.8.0,1.18.2,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.18.2,1.8.0,1.18.2,'serial hooks "after all" hook'
V1.18.2,1.8.1,1.18.2,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.18.2,1.8.1,1.18.2,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.18.2,1.8.1,1.18.2,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.18.2,1.8.1,1.18.2,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.18.2,1.8.1,1.18.2,'Runner .globalProps() should include common non enumerable globals'
V1.18.2,1.8.1,1.18.2,'Runner .globals() should white-list globals'
V1.18.2,1.8.1,1.18.2,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.18.2,1.8.1,1.18.2,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.18.2,1.8.1,1.18.2,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.18.2,1.8.1,1.18.2,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.18.2,1.8.1,1.18.2,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.18.2,1.8.1,1.18.2,'serial hooks one'
V1.18.2,1.8.1,1.18.2,'serial hooks two'
V1.18.2,1.8.1,1.18.2,'serial hooks three'
V1.18.2,1.8.1,1.18.2,'serial hooks "after all" hook'
V1.18.2,1.8.2,1.18.2,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.18.2,1.8.2,1.18.2,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.18.2,1.8.2,1.18.2,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.18.2,1.8.2,1.18.2,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.18.2,1.8.2,1.18.2,'Runner .globalProps() should include common non enumerable globals'
V1.18.2,1.8.2,1.18.2,'Runner .globals() should white-list globals'
V1.18.2,1.8.2,1.18.2,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.18.2,1.8.2,1.18.2,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.18.2,1.8.2,1.18.2,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.18.2,1.8.2,1.18.2,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.18.2,1.8.2,1.18.2,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.18.2,1.8.2,1.18.2,'serial hooks one'
V1.18.2,1.8.2,1.18.2,'serial hooks two'
V1.18.2,1.8.2,1.18.2,'serial hooks three'
V1.18.2,1.8.2,1.18.2,'serial hooks "after all" hook'
V1.18.2,1.9.0,1.18.2,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.18.2,1.9.0,1.18.2,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.18.2,1.9.0,1.18.2,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.18.2,1.9.0,1.18.2,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.18.2,1.9.0,1.18.2,'Runner .globalProps() should include common non enumerable globals'
V1.18.2,1.9.0,1.18.2,'Runner .globals() should white-list globals'
V1.18.2,1.9.0,1.18.2,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.18.2,1.9.0,1.18.2,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.18.2,1.9.0,1.18.2,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.18.2,1.9.0,1.18.2,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.18.2,1.9.0,1.18.2,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.18.2,1.9.0,1.18.2,'serial hooks one'
V1.18.2,1.9.0,1.18.2,'serial hooks two'
V1.18.2,1.9.0,1.18.2,'serial hooks three'
V1.18.2,1.9.0,1.18.2,'serial hooks "after all" hook'
V1.18.2,1.10.0,1.18.2,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.18.2,1.10.0,1.18.2,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.18.2,1.10.0,1.18.2,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.18.2,1.10.0,1.18.2,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.18.2,1.10.0,1.18.2,'Runner .globalProps() should include common non enumerable globals'
V1.18.2,1.10.0,1.18.2,'Runner .globals() should white-list globals'
V1.18.2,1.10.0,1.18.2,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.18.2,1.10.0,1.18.2,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.18.2,1.10.0,1.18.2,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.18.2,1.10.0,1.18.2,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.18.2,1.10.0,1.18.2,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.18.2,1.10.0,1.18.2,'serial hooks one'
V1.18.2,1.10.0,1.18.2,'serial hooks two'
V1.18.2,1.10.0,1.18.2,'serial hooks three'
V1.18.2,1.10.0,1.18.2,'serial hooks "after all" hook'
V1.18.2,1.11.0,1.18.2,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.18.2,1.11.0,1.18.2,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.18.2,1.11.0,1.18.2,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.18.2,1.11.0,1.18.2,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.18.2,1.11.0,1.18.2,'Runner .globalProps() should include common non enumerable globals'
V1.18.2,1.11.0,1.18.2,'Runner .globals() should white-list globals'
V1.18.2,1.11.0,1.18.2,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.18.2,1.11.0,1.18.2,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.18.2,1.11.0,1.18.2,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.18.2,1.11.0,1.18.2,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.18.2,1.11.0,1.18.2,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.18.2,1.11.0,1.18.2,'serial hooks one'
V1.18.2,1.11.0,1.18.2,'serial hooks two'
V1.18.2,1.11.0,1.18.2,'serial hooks three'
V1.18.2,1.11.0,1.18.2,'serial hooks "after all" hook'
V1.18.2,1.12.0,1.18.2,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.18.2,1.12.0,1.18.2,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.18.2,1.12.0,1.18.2,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.18.2,1.12.0,1.18.2,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.18.2,1.12.0,1.18.2,'Runner .globalProps() should include common non enumerable globals'
V1.18.2,1.12.0,1.18.2,'Runner .globals() should white-list globals'
V1.18.2,1.12.0,1.18.2,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.18.2,1.12.0,1.18.2,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.18.2,1.12.0,1.18.2,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.18.2,1.12.0,1.18.2,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.18.2,1.12.0,1.18.2,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.18.2,1.12.1,1.18.2,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.18.2,1.12.1,1.18.2,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.18.2,1.12.1,1.18.2,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.18.2,1.12.1,1.18.2,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.18.2,1.12.1,1.18.2,'Runner .globalProps() should include common non enumerable globals'
V1.18.2,1.12.1,1.18.2,'Runner .globals() should white-list globals'
V1.18.2,1.12.1,1.18.2,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.18.2,1.12.1,1.18.2,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.18.2,1.12.1,1.18.2,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.18.2,1.12.1,1.18.2,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.18.2,1.12.1,1.18.2,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.18.2,1.13.0,1.18.2,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.18.2,1.13.0,1.18.2,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.18.2,1.13.0,1.18.2,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.18.2,1.13.0,1.18.2,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.18.2,1.13.0,1.18.2,'Runner .globalProps() should include common non enumerable globals'
V1.18.2,1.13.0,1.18.2,'Runner .globals() should white-list globals'
V1.18.2,1.13.0,1.18.2,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.18.2,1.13.0,1.18.2,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.18.2,1.13.0,1.18.2,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.18.2,1.13.0,1.18.2,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.18.2,1.13.0,1.18.2,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.18.2,1.14.0,1.18.2,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.18.2,1.14.0,1.18.2,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.18.2,1.14.0,1.18.2,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.18.2,1.14.0,1.18.2,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.18.2,1.14.0,1.18.2,'Runner .globalProps() should include common non enumerable globals'
V1.18.2,1.14.0,1.18.2,'Runner .globals() should white-list globals'
V1.18.2,1.14.0,1.18.2,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.18.2,1.14.0,1.18.2,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.18.2,1.14.0,1.18.2,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.18.2,1.14.0,1.18.2,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.18.2,1.14.0,1.18.2,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.18.2,1.14.0-mwo1,1.18.2,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.18.2,1.14.0-mwo1,1.18.2,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.18.2,1.14.0-mwo1,1.18.2,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.18.2,1.14.0-mwo1,1.18.2,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.18.2,1.14.0-mwo1,1.18.2,'Runner .globalProps() should include common non enumerable globals'
V1.18.2,1.14.0-mwo1,1.18.2,'Runner .globals() should white-list globals'
V1.18.2,1.14.0-mwo1,1.18.2,'Runner .checkGlobals(test) should emit "fail" when a single new disallowed global is introduced after a single extra global is allowed'
V1.18.2,1.14.0-mwo1,1.18.2,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.18.2,1.14.0-mwo1,1.18.2,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.18.2,1.14.0-mwo1,1.18.2,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.18.2,1.14.0-mwo1,1.18.2,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.18.2,1.14.0-mwo1,1.18.2,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.18.2,1.15.0,1.18.2,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.18.2,1.15.0,1.18.2,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.18.2,1.15.0,1.18.2,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.18.2,1.15.0,1.18.2,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.18.2,1.15.0,1.18.2,'Runner .globalProps() should include common non enumerable globals'
V1.18.2,1.15.0,1.18.2,'Runner .globals() should white-list globals'
V1.18.2,1.15.0,1.18.2,'Runner .checkGlobals(test) should emit "fail" when a single new disallowed global is introduced after a single extra global is allowed'
V1.18.2,1.15.0,1.18.2,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.18.2,1.15.0,1.18.2,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.18.2,1.15.0,1.18.2,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.18.2,1.15.0,1.18.2,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.18.2,1.15.1,1.18.2,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.18.2,1.15.1,1.18.2,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.18.2,1.15.1,1.18.2,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.18.2,1.15.1,1.18.2,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.18.2,1.15.1,1.18.2,'Runner .globalProps() should include common non enumerable globals'
V1.18.2,1.15.1,1.18.2,'Runner .globals() should white-list globals'
V1.18.2,1.15.1,1.18.2,'Runner .checkGlobals(test) should emit "fail" when a single new disallowed global is introduced after a single extra global is allowed'
V1.18.2,1.15.1,1.18.2,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.18.2,1.15.1,1.18.2,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.18.2,1.15.1,1.18.2,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.18.2,1.15.1,1.18.2,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.18.2,1.16.0,1.18.2,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.18.2,1.16.0,1.18.2,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.18.2,1.16.0,1.18.2,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.18.2,1.16.0,1.18.2,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.18.2,1.16.0,1.18.2,'Runner .globalProps() should include common non enumerable globals'
V1.18.2,1.16.0,1.18.2,'Runner .globals() should white-list globals'
V1.18.2,1.16.0,1.18.2,'Runner .checkGlobals(test) should emit "fail" when a single new disallowed global is introduced after a single extra global is allowed'
V1.18.2,1.16.0,1.18.2,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.18.2,1.16.1,1.18.2,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.18.2,1.16.1,1.18.2,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.18.2,1.16.1,1.18.2,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.18.2,1.16.1,1.18.2,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.18.2,1.16.1,1.18.2,'Runner .globalProps() should include common non enumerable globals'
V1.18.2,1.16.1,1.18.2,'Runner .globals() should white-list globals'
V1.18.2,1.16.1,1.18.2,'Runner .checkGlobals(test) should emit "fail" when a single new disallowed global is introduced after a single extra global is allowed'
V1.18.2,1.16.1,1.18.2,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.18.2,1.16.2,1.18.2,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.18.2,1.16.2,1.18.2,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.18.2,1.16.2,1.18.2,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.18.2,1.16.2,1.18.2,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.18.2,1.16.2,1.18.2,'Runner .globalProps() should include common non enumerable globals'
V1.18.2,1.16.2,1.18.2,'Runner .globals() should white-list globals'
V1.18.2,1.16.2,1.18.2,'Runner .checkGlobals(test) should emit "fail" when a single new disallowed global is introduced after a single extra global is allowed'
V1.18.2,1.16.2,1.18.2,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.18.2,1.17.0,1.18.2,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.18.2,1.17.0,1.18.2,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.18.2,1.17.0,1.18.2,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.18.2,1.17.0,1.18.2,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.18.2,1.17.0,1.18.2,'Runner .globalProps() should include common non enumerable globals'
V1.18.2,1.17.0,1.18.2,'Runner .globals() should white-list globals'
V1.18.2,1.17.0,1.18.2,'Runner .checkGlobals(test) should emit "fail" when a single new disallowed global is introduced after a single extra global is allowed'
V1.18.2,1.17.0,1.18.2,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.18.2,1.17.1,1.18.2,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.18.2,1.17.1,1.18.2,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.18.2,1.17.1,1.18.2,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.18.2,1.17.1,1.18.2,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.18.2,1.17.1,1.18.2,'Runner .globalProps() should include common non enumerable globals'
V1.18.2,1.17.1,1.18.2,'Runner .globals() should white-list globals'
V1.18.2,1.17.1,1.18.2,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.18.2,1.18.0,1.18.2,'Runner .globalProps() should include common non enumerable globals'
V1.18.2,1.18.0,1.18.2,'Runner .globals() should white-list globals'
V1.18.2,1.18.1,1.18.2,'Runner .globalProps() should include common non enumerable globals'
V1.18.2,1.18.1,1.18.2,'Runner .globals() should white-list globals'
V1.19.0,1.0.0,1.19.0,'Suite .clone() should copy the slow value'
V1.19.0,1.0.0,1.19.0,'Suite .slow() when given a string should parse it'
V1.19.0,1.0.0,1.19.0,'Suite .slow() when no argument is passed should return the slow value'
V1.19.0,1.0.0,1.19.0,'Suite .slow() when argument is passed should return the Suite object'
V1.19.0,1.0.0,1.19.0,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.19.0,1.0.0,1.19.0,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.19.0,1.0.0,1.19.0,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.19.0,1.0.0,1.19.0,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.19.0,1.0.0,1.19.0,'Suite .addSuite() "before each" hook'
V1.19.0,1.0.1,1.19.0,'Suite .clone() should copy the slow value'
V1.19.0,1.0.1,1.19.0,'Suite .slow() when given a string should parse it'
V1.19.0,1.0.1,1.19.0,'Suite .slow() when no argument is passed should return the slow value'
V1.19.0,1.0.1,1.19.0,'Suite .slow() when argument is passed should return the Suite object'
V1.19.0,1.0.1,1.19.0,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.19.0,1.0.1,1.19.0,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.19.0,1.0.1,1.19.0,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.19.0,1.0.1,1.19.0,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.19.0,1.0.1,1.19.0,'Suite .addSuite() "before each" hook'
V1.19.0,1.0.2,1.19.0,'Suite .clone() should copy the slow value'
V1.19.0,1.0.2,1.19.0,'Suite .slow() when given a string should parse it'
V1.19.0,1.0.2,1.19.0,'Suite .slow() when no argument is passed should return the slow value'
V1.19.0,1.0.2,1.19.0,'Suite .slow() when argument is passed should return the Suite object'
V1.19.0,1.0.2,1.19.0,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.19.0,1.0.2,1.19.0,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.19.0,1.0.2,1.19.0,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.19.0,1.0.2,1.19.0,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.19.0,1.0.2,1.19.0,'Suite .addSuite() "before each" hook'
V1.19.0,1.0.3,1.19.0,'Suite .clone() should copy the slow value'
V1.19.0,1.0.3,1.19.0,'Suite .slow() when given a string should parse it'
V1.19.0,1.0.3,1.19.0,'Suite .slow() when no argument is passed should return the slow value'
V1.19.0,1.0.3,1.19.0,'Suite .slow() when argument is passed should return the Suite object'
V1.19.0,1.0.3,1.19.0,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.19.0,1.0.3,1.19.0,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.19.0,1.0.3,1.19.0,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.19.0,1.0.3,1.19.0,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.19.0,1.0.3,1.19.0,'Suite .addSuite() "before each" hook'
V1.19.0,1.1.0,1.19.0,'Suite .clone() should copy the slow value'
V1.19.0,1.1.0,1.19.0,'Suite .slow() when given a string should parse it'
V1.19.0,1.1.0,1.19.0,'Suite .slow() when no argument is passed should return the slow value'
V1.19.0,1.1.0,1.19.0,'Suite .slow() when argument is passed should return the Suite object'
V1.19.0,1.1.0,1.19.0,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.19.0,1.1.0,1.19.0,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.19.0,1.1.0,1.19.0,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.19.0,1.1.0,1.19.0,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.19.0,1.1.0,1.19.0,'Suite .addSuite() "before each" hook'
V1.19.0,1.2.0,1.19.0,'Suite .clone() should copy the slow value'
V1.19.0,1.2.0,1.19.0,'Suite .slow() when given a string should parse it'
V1.19.0,1.2.0,1.19.0,'Suite .slow() when no argument is passed should return the slow value'
V1.19.0,1.2.0,1.19.0,'Suite .slow() when argument is passed should return the Suite object'
V1.19.0,1.2.0,1.19.0,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.19.0,1.2.0,1.19.0,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.19.0,1.2.0,1.19.0,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.19.0,1.2.0,1.19.0,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.19.0,1.2.0,1.19.0,'Suite .addSuite() "before each" hook'
V1.19.0,1.2.1,1.19.0,'Suite .clone() should copy the slow value'
V1.19.0,1.2.1,1.19.0,'Suite .slow() when given a string should parse it'
V1.19.0,1.2.1,1.19.0,'Suite .slow() when no argument is passed should return the slow value'
V1.19.0,1.2.1,1.19.0,'Suite .slow() when argument is passed should return the Suite object'
V1.19.0,1.2.1,1.19.0,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.19.0,1.2.1,1.19.0,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.19.0,1.2.1,1.19.0,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.19.0,1.2.1,1.19.0,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.19.0,1.2.1,1.19.0,'Suite .addSuite() "before each" hook'
V1.19.0,1.2.2,1.19.0,'Suite .clone() should copy the slow value'
V1.19.0,1.2.2,1.19.0,'Suite .slow() when given a string should parse it'
V1.19.0,1.2.2,1.19.0,'Suite .slow() when no argument is passed should return the slow value'
V1.19.0,1.2.2,1.19.0,'Suite .slow() when argument is passed should return the Suite object'
V1.19.0,1.2.2,1.19.0,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.19.0,1.2.2,1.19.0,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.19.0,1.2.2,1.19.0,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.19.0,1.2.2,1.19.0,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.19.0,1.2.2,1.19.0,'Suite .addSuite() "before each" hook'
V1.19.0,1.3.0,1.19.0,'Suite .clone() should copy the slow value'
V1.19.0,1.3.0,1.19.0,'Suite .slow() when given a string should parse it'
V1.19.0,1.3.0,1.19.0,'Suite .slow() when no argument is passed should return the slow value'
V1.19.0,1.3.0,1.19.0,'Suite .slow() when argument is passed should return the Suite object'
V1.19.0,1.3.0,1.19.0,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.19.0,1.3.0,1.19.0,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.19.0,1.3.0,1.19.0,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.19.0,1.3.0,1.19.0,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.19.0,1.3.0,1.19.0,'Suite .addSuite() "before each" hook'
V1.19.0,1.3.1,1.19.0,'Suite .clone() should copy the slow value'
V1.19.0,1.3.1,1.19.0,'Suite .slow() when given a string should parse it'
V1.19.0,1.3.1,1.19.0,'Suite .slow() when no argument is passed should return the slow value'
V1.19.0,1.3.1,1.19.0,'Suite .slow() when argument is passed should return the Suite object'
V1.19.0,1.3.1,1.19.0,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.19.0,1.3.1,1.19.0,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.19.0,1.3.1,1.19.0,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.19.0,1.3.1,1.19.0,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.19.0,1.3.1,1.19.0,'Suite .addSuite() "before each" hook'
V1.19.0,1.3.2,1.19.0,'Suite .clone() should copy the slow value'
V1.19.0,1.3.2,1.19.0,'Suite .slow() when given a string should parse it'
V1.19.0,1.3.2,1.19.0,'Suite .slow() when no argument is passed should return the slow value'
V1.19.0,1.3.2,1.19.0,'Suite .slow() when argument is passed should return the Suite object'
V1.19.0,1.3.2,1.19.0,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.19.0,1.3.2,1.19.0,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.19.0,1.3.2,1.19.0,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.19.0,1.3.2,1.19.0,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.19.0,1.3.2,1.19.0,'Suite .addSuite() "before each" hook'
V1.19.0,1.4.0,1.19.0,'Suite .clone() should copy the slow value'
V1.19.0,1.4.0,1.19.0,'Suite .slow() when given a string should parse it'
V1.19.0,1.4.0,1.19.0,'Suite .slow() when no argument is passed should return the slow value'
V1.19.0,1.4.0,1.19.0,'Suite .slow() when argument is passed should return the Suite object'
V1.19.0,1.4.0,1.19.0,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.19.0,1.4.0,1.19.0,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.19.0,1.4.0,1.19.0,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.19.0,1.4.0,1.19.0,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.19.0,1.4.0,1.19.0,'Suite .addSuite() "before each" hook'
V1.19.0,1.4.1,1.19.0,'Suite .clone() should copy the slow value'
V1.19.0,1.4.1,1.19.0,'Suite .slow() when given a string should parse it'
V1.19.0,1.4.1,1.19.0,'Suite .slow() when no argument is passed should return the slow value'
V1.19.0,1.4.1,1.19.0,'Suite .slow() when argument is passed should return the Suite object'
V1.19.0,1.4.1,1.19.0,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.19.0,1.4.1,1.19.0,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.19.0,1.4.1,1.19.0,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.19.0,1.4.1,1.19.0,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.19.0,1.4.1,1.19.0,'Suite .addSuite() "before each" hook'
V1.19.0,1.4.2,1.19.0,'Suite .clone() should copy the slow value'
V1.19.0,1.4.2,1.19.0,'Suite .slow() when given a string should parse it'
V1.19.0,1.4.2,1.19.0,'Suite .slow() when no argument is passed should return the slow value'
V1.19.0,1.4.2,1.19.0,'Suite .slow() when argument is passed should return the Suite object'
V1.19.0,1.4.2,1.19.0,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.19.0,1.4.2,1.19.0,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.19.0,1.4.2,1.19.0,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.19.0,1.4.2,1.19.0,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.19.0,1.4.2,1.19.0,'Suite .addSuite() "before each" hook'
V1.19.0,1.5.0,1.19.0,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.19.0,1.5.0,1.19.0,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.19.0,1.5.0,1.19.0,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.19.0,1.5.0,1.19.0,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.19.0,1.5.0,1.19.0,'Runner .globalProps() should include common non enumerable globals'
V1.19.0,1.5.0,1.19.0,'Runner .globals() should white-list globals'
V1.19.0,1.5.0,1.19.0,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.19.0,1.5.0,1.19.0,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.19.0,1.5.0,1.19.0,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.19.0,1.5.0,1.19.0,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.19.0,1.5.0,1.19.0,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.19.0,1.5.0,1.19.0,'serial hooks one'
V1.19.0,1.5.0,1.19.0,'serial hooks two'
V1.19.0,1.5.0,1.19.0,'serial hooks three'
V1.19.0,1.5.0,1.19.0,'serial hooks "after all" hook'
V1.19.0,1.6.0,1.19.0,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.19.0,1.6.0,1.19.0,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.19.0,1.6.0,1.19.0,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.19.0,1.6.0,1.19.0,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.19.0,1.6.0,1.19.0,'Runner .globalProps() should include common non enumerable globals'
V1.19.0,1.6.0,1.19.0,'Runner .globals() should white-list globals'
V1.19.0,1.6.0,1.19.0,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.19.0,1.6.0,1.19.0,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.19.0,1.6.0,1.19.0,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.19.0,1.6.0,1.19.0,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.19.0,1.6.0,1.19.0,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.19.0,1.6.0,1.19.0,'serial hooks one'
V1.19.0,1.6.0,1.19.0,'serial hooks two'
V1.19.0,1.6.0,1.19.0,'serial hooks three'
V1.19.0,1.6.0,1.19.0,'serial hooks "after all" hook'
V1.19.0,1.7.0,1.19.0,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.19.0,1.7.0,1.19.0,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.19.0,1.7.0,1.19.0,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.19.0,1.7.0,1.19.0,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.19.0,1.7.0,1.19.0,'Runner .globalProps() should include common non enumerable globals'
V1.19.0,1.7.0,1.19.0,'Runner .globals() should white-list globals'
V1.19.0,1.7.0,1.19.0,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.19.0,1.7.0,1.19.0,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.19.0,1.7.0,1.19.0,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.19.0,1.7.0,1.19.0,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.19.0,1.7.0,1.19.0,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.19.0,1.7.0,1.19.0,'serial hooks one'
V1.19.0,1.7.0,1.19.0,'serial hooks two'
V1.19.0,1.7.0,1.19.0,'serial hooks three'
V1.19.0,1.7.0,1.19.0,'serial hooks "after all" hook'
V1.19.0,1.7.1,1.19.0,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.19.0,1.7.1,1.19.0,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.19.0,1.7.1,1.19.0,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.19.0,1.7.1,1.19.0,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.19.0,1.7.1,1.19.0,'Runner .globalProps() should include common non enumerable globals'
V1.19.0,1.7.1,1.19.0,'Runner .globals() should white-list globals'
V1.19.0,1.7.1,1.19.0,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.19.0,1.7.1,1.19.0,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.19.0,1.7.1,1.19.0,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.19.0,1.7.1,1.19.0,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.19.0,1.7.1,1.19.0,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.19.0,1.7.1,1.19.0,'serial hooks one'
V1.19.0,1.7.1,1.19.0,'serial hooks two'
V1.19.0,1.7.1,1.19.0,'serial hooks three'
V1.19.0,1.7.1,1.19.0,'serial hooks "after all" hook'
V1.19.0,1.7.2,1.19.0,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.19.0,1.7.2,1.19.0,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.19.0,1.7.2,1.19.0,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.19.0,1.7.2,1.19.0,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.19.0,1.7.2,1.19.0,'Runner .globalProps() should include common non enumerable globals'
V1.19.0,1.7.2,1.19.0,'Runner .globals() should white-list globals'
V1.19.0,1.7.2,1.19.0,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.19.0,1.7.2,1.19.0,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.19.0,1.7.2,1.19.0,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.19.0,1.7.2,1.19.0,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.19.0,1.7.2,1.19.0,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.19.0,1.7.2,1.19.0,'serial hooks one'
V1.19.0,1.7.2,1.19.0,'serial hooks two'
V1.19.0,1.7.2,1.19.0,'serial hooks three'
V1.19.0,1.7.2,1.19.0,'serial hooks "after all" hook'
V1.19.0,1.7.3,1.19.0,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.19.0,1.7.3,1.19.0,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.19.0,1.7.3,1.19.0,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.19.0,1.7.3,1.19.0,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.19.0,1.7.3,1.19.0,'Runner .globalProps() should include common non enumerable globals'
V1.19.0,1.7.3,1.19.0,'Runner .globals() should white-list globals'
V1.19.0,1.7.3,1.19.0,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.19.0,1.7.3,1.19.0,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.19.0,1.7.3,1.19.0,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.19.0,1.7.3,1.19.0,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.19.0,1.7.3,1.19.0,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.19.0,1.7.3,1.19.0,'serial hooks one'
V1.19.0,1.7.3,1.19.0,'serial hooks two'
V1.19.0,1.7.3,1.19.0,'serial hooks three'
V1.19.0,1.7.3,1.19.0,'serial hooks "after all" hook'
V1.19.0,1.7.4,1.19.0,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.19.0,1.7.4,1.19.0,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.19.0,1.7.4,1.19.0,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.19.0,1.7.4,1.19.0,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.19.0,1.7.4,1.19.0,'Runner .globalProps() should include common non enumerable globals'
V1.19.0,1.7.4,1.19.0,'Runner .globals() should white-list globals'
V1.19.0,1.7.4,1.19.0,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.19.0,1.7.4,1.19.0,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.19.0,1.7.4,1.19.0,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.19.0,1.7.4,1.19.0,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.19.0,1.7.4,1.19.0,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.19.0,1.7.4,1.19.0,'serial hooks one'
V1.19.0,1.7.4,1.19.0,'serial hooks two'
V1.19.0,1.7.4,1.19.0,'serial hooks three'
V1.19.0,1.7.4,1.19.0,'serial hooks "after all" hook'
V1.19.0,1.8.0,1.19.0,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.19.0,1.8.0,1.19.0,'serial hooks "after all" hook'
V1.19.0,1.8.1,1.19.0,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.19.0,1.8.1,1.19.0,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.19.0,1.8.1,1.19.0,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.19.0,1.8.1,1.19.0,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.19.0,1.8.1,1.19.0,'Runner .globalProps() should include common non enumerable globals'
V1.19.0,1.8.1,1.19.0,'Runner .globals() should white-list globals'
V1.19.0,1.8.1,1.19.0,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.19.0,1.8.1,1.19.0,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.19.0,1.8.1,1.19.0,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.19.0,1.8.1,1.19.0,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.19.0,1.8.1,1.19.0,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.19.0,1.8.1,1.19.0,'serial hooks one'
V1.19.0,1.8.1,1.19.0,'serial hooks two'
V1.19.0,1.8.1,1.19.0,'serial hooks three'
V1.19.0,1.8.1,1.19.0,'serial hooks "after all" hook'
V1.19.0,1.8.2,1.19.0,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.19.0,1.8.2,1.19.0,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.19.0,1.8.2,1.19.0,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.19.0,1.8.2,1.19.0,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.19.0,1.8.2,1.19.0,'Runner .globalProps() should include common non enumerable globals'
V1.19.0,1.8.2,1.19.0,'Runner .globals() should white-list globals'
V1.19.0,1.8.2,1.19.0,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.19.0,1.8.2,1.19.0,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.19.0,1.8.2,1.19.0,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.19.0,1.8.2,1.19.0,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.19.0,1.8.2,1.19.0,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.19.0,1.8.2,1.19.0,'serial hooks one'
V1.19.0,1.8.2,1.19.0,'serial hooks two'
V1.19.0,1.8.2,1.19.0,'serial hooks three'
V1.19.0,1.8.2,1.19.0,'serial hooks "after all" hook'
V1.19.0,1.9.0,1.19.0,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.19.0,1.9.0,1.19.0,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.19.0,1.9.0,1.19.0,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.19.0,1.9.0,1.19.0,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.19.0,1.9.0,1.19.0,'Runner .globalProps() should include common non enumerable globals'
V1.19.0,1.9.0,1.19.0,'Runner .globals() should white-list globals'
V1.19.0,1.9.0,1.19.0,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.19.0,1.9.0,1.19.0,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.19.0,1.9.0,1.19.0,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.19.0,1.9.0,1.19.0,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.19.0,1.9.0,1.19.0,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.19.0,1.9.0,1.19.0,'serial hooks one'
V1.19.0,1.9.0,1.19.0,'serial hooks two'
V1.19.0,1.9.0,1.19.0,'serial hooks three'
V1.19.0,1.9.0,1.19.0,'serial hooks "after all" hook'
V1.19.0,1.10.0,1.19.0,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.19.0,1.10.0,1.19.0,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.19.0,1.10.0,1.19.0,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.19.0,1.10.0,1.19.0,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.19.0,1.10.0,1.19.0,'Runner .globalProps() should include common non enumerable globals'
V1.19.0,1.10.0,1.19.0,'Runner .globals() should white-list globals'
V1.19.0,1.10.0,1.19.0,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.19.0,1.10.0,1.19.0,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.19.0,1.10.0,1.19.0,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.19.0,1.10.0,1.19.0,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.19.0,1.10.0,1.19.0,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.19.0,1.10.0,1.19.0,'serial hooks one'
V1.19.0,1.10.0,1.19.0,'serial hooks two'
V1.19.0,1.10.0,1.19.0,'serial hooks three'
V1.19.0,1.10.0,1.19.0,'serial hooks "after all" hook'
V1.19.0,1.11.0,1.19.0,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.19.0,1.11.0,1.19.0,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.19.0,1.11.0,1.19.0,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.19.0,1.11.0,1.19.0,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.19.0,1.11.0,1.19.0,'Runner .globalProps() should include common non enumerable globals'
V1.19.0,1.11.0,1.19.0,'Runner .globals() should white-list globals'
V1.19.0,1.11.0,1.19.0,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.19.0,1.11.0,1.19.0,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.19.0,1.11.0,1.19.0,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.19.0,1.11.0,1.19.0,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.19.0,1.11.0,1.19.0,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.19.0,1.11.0,1.19.0,'serial hooks one'
V1.19.0,1.11.0,1.19.0,'serial hooks two'
V1.19.0,1.11.0,1.19.0,'serial hooks three'
V1.19.0,1.11.0,1.19.0,'serial hooks "after all" hook'
V1.19.0,1.12.0,1.19.0,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.19.0,1.12.0,1.19.0,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.19.0,1.12.0,1.19.0,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.19.0,1.12.0,1.19.0,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.19.0,1.12.0,1.19.0,'Runner .globalProps() should include common non enumerable globals'
V1.19.0,1.12.0,1.19.0,'Runner .globals() should white-list globals'
V1.19.0,1.12.0,1.19.0,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.19.0,1.12.0,1.19.0,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.19.0,1.12.0,1.19.0,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.19.0,1.12.0,1.19.0,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.19.0,1.12.0,1.19.0,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.19.0,1.12.1,1.19.0,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.19.0,1.12.1,1.19.0,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.19.0,1.12.1,1.19.0,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.19.0,1.12.1,1.19.0,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.19.0,1.12.1,1.19.0,'Runner .globalProps() should include common non enumerable globals'
V1.19.0,1.12.1,1.19.0,'Runner .globals() should white-list globals'
V1.19.0,1.12.1,1.19.0,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.19.0,1.12.1,1.19.0,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.19.0,1.12.1,1.19.0,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.19.0,1.12.1,1.19.0,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.19.0,1.12.1,1.19.0,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.19.0,1.13.0,1.19.0,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.19.0,1.13.0,1.19.0,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.19.0,1.13.0,1.19.0,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.19.0,1.13.0,1.19.0,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.19.0,1.13.0,1.19.0,'Runner .globalProps() should include common non enumerable globals'
V1.19.0,1.13.0,1.19.0,'Runner .globals() should white-list globals'
V1.19.0,1.13.0,1.19.0,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.19.0,1.13.0,1.19.0,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.19.0,1.13.0,1.19.0,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.19.0,1.13.0,1.19.0,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.19.0,1.13.0,1.19.0,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.19.0,1.14.0,1.19.0,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.19.0,1.14.0,1.19.0,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.19.0,1.14.0,1.19.0,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.19.0,1.14.0,1.19.0,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.19.0,1.14.0,1.19.0,'Runner .globalProps() should include common non enumerable globals'
V1.19.0,1.14.0,1.19.0,'Runner .globals() should white-list globals'
V1.19.0,1.14.0,1.19.0,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.19.0,1.14.0,1.19.0,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.19.0,1.14.0,1.19.0,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.19.0,1.14.0,1.19.0,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.19.0,1.14.0,1.19.0,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.19.0,1.14.0-mwo1,1.19.0,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.19.0,1.14.0-mwo1,1.19.0,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.19.0,1.14.0-mwo1,1.19.0,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.19.0,1.14.0-mwo1,1.19.0,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.19.0,1.14.0-mwo1,1.19.0,'Runner .globalProps() should include common non enumerable globals'
V1.19.0,1.14.0-mwo1,1.19.0,'Runner .globals() should white-list globals'
V1.19.0,1.14.0-mwo1,1.19.0,'Runner .checkGlobals(test) should emit "fail" when a single new disallowed global is introduced after a single extra global is allowed'
V1.19.0,1.14.0-mwo1,1.19.0,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.19.0,1.14.0-mwo1,1.19.0,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.19.0,1.14.0-mwo1,1.19.0,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.19.0,1.14.0-mwo1,1.19.0,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.19.0,1.14.0-mwo1,1.19.0,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.19.0,1.15.0,1.19.0,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.19.0,1.15.0,1.19.0,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.19.0,1.15.0,1.19.0,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.19.0,1.15.0,1.19.0,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.19.0,1.15.0,1.19.0,'Runner .globalProps() should include common non enumerable globals'
V1.19.0,1.15.0,1.19.0,'Runner .globals() should white-list globals'
V1.19.0,1.15.0,1.19.0,'Runner .checkGlobals(test) should emit "fail" when a single new disallowed global is introduced after a single extra global is allowed'
V1.19.0,1.15.0,1.19.0,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.19.0,1.15.0,1.19.0,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.19.0,1.15.0,1.19.0,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.19.0,1.15.0,1.19.0,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.19.0,1.15.1,1.19.0,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.19.0,1.15.1,1.19.0,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.19.0,1.15.1,1.19.0,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.19.0,1.15.1,1.19.0,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.19.0,1.15.1,1.19.0,'Runner .globalProps() should include common non enumerable globals'
V1.19.0,1.15.1,1.19.0,'Runner .globals() should white-list globals'
V1.19.0,1.15.1,1.19.0,'Runner .checkGlobals(test) should emit "fail" when a single new disallowed global is introduced after a single extra global is allowed'
V1.19.0,1.15.1,1.19.0,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.19.0,1.15.1,1.19.0,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.19.0,1.15.1,1.19.0,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.19.0,1.15.1,1.19.0,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.19.0,1.16.0,1.19.0,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.19.0,1.16.0,1.19.0,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.19.0,1.16.0,1.19.0,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.19.0,1.16.0,1.19.0,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.19.0,1.16.0,1.19.0,'Runner .globalProps() should include common non enumerable globals'
V1.19.0,1.16.0,1.19.0,'Runner .globals() should white-list globals'
V1.19.0,1.16.0,1.19.0,'Runner .checkGlobals(test) should emit "fail" when a single new disallowed global is introduced after a single extra global is allowed'
V1.19.0,1.16.0,1.19.0,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.19.0,1.16.1,1.19.0,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.19.0,1.16.1,1.19.0,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.19.0,1.16.1,1.19.0,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.19.0,1.16.1,1.19.0,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.19.0,1.16.1,1.19.0,'Runner .globalProps() should include common non enumerable globals'
V1.19.0,1.16.1,1.19.0,'Runner .globals() should white-list globals'
V1.19.0,1.16.1,1.19.0,'Runner .checkGlobals(test) should emit "fail" when a single new disallowed global is introduced after a single extra global is allowed'
V1.19.0,1.16.1,1.19.0,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.19.0,1.16.2,1.19.0,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.19.0,1.16.2,1.19.0,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.19.0,1.16.2,1.19.0,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.19.0,1.16.2,1.19.0,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.19.0,1.16.2,1.19.0,'Runner .globalProps() should include common non enumerable globals'
V1.19.0,1.16.2,1.19.0,'Runner .globals() should white-list globals'
V1.19.0,1.16.2,1.19.0,'Runner .checkGlobals(test) should emit "fail" when a single new disallowed global is introduced after a single extra global is allowed'
V1.19.0,1.16.2,1.19.0,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.19.0,1.17.0,1.19.0,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.19.0,1.17.0,1.19.0,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.19.0,1.17.0,1.19.0,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.19.0,1.17.0,1.19.0,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.19.0,1.17.0,1.19.0,'Runner .globalProps() should include common non enumerable globals'
V1.19.0,1.17.0,1.19.0,'Runner .globals() should white-list globals'
V1.19.0,1.17.0,1.19.0,'Runner .checkGlobals(test) should emit "fail" when a single new disallowed global is introduced after a single extra global is allowed'
V1.19.0,1.17.0,1.19.0,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.19.0,1.17.1,1.19.0,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.19.0,1.17.1,1.19.0,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.19.0,1.17.1,1.19.0,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.19.0,1.17.1,1.19.0,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.19.0,1.17.1,1.19.0,'Runner .globalProps() should include common non enumerable globals'
V1.19.0,1.17.1,1.19.0,'Runner .globals() should white-list globals'
V1.19.0,1.17.1,1.19.0,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.19.0,1.18.0,1.19.0,'Runner .globalProps() should include common non enumerable globals'
V1.19.0,1.18.0,1.19.0,'Runner .globals() should white-list globals'
V1.19.0,1.18.1,1.19.0,'Runner .globalProps() should include common non enumerable globals'
V1.19.0,1.18.1,1.19.0,'Runner .globals() should white-list globals'
V1.19.0,1.18.2,1.19.0,'Runner .globalProps() should include common non enumerable globals'
V1.19.0,1.18.2,1.19.0,'Runner .globals() should white-list globals'
V1.20.0,1.0.0,1.20.0,'Suite .clone() should copy the slow value'
V1.20.0,1.0.0,1.20.0,'Suite .slow() when given a string should parse it'
V1.20.0,1.0.0,1.20.0,'Suite .slow() when no argument is passed should return the slow value'
V1.20.0,1.0.0,1.20.0,'Suite .slow() when argument is passed should return the Suite object'
V1.20.0,1.0.0,1.20.0,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.20.0,1.0.0,1.20.0,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.20.0,1.0.0,1.20.0,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.20.0,1.0.0,1.20.0,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.20.0,1.0.0,1.20.0,'Suite .addSuite() "before each" hook'
V1.20.0,1.0.1,1.20.0,'Suite .clone() should copy the slow value'
V1.20.0,1.0.1,1.20.0,'Suite .slow() when given a string should parse it'
V1.20.0,1.0.1,1.20.0,'Suite .slow() when no argument is passed should return the slow value'
V1.20.0,1.0.1,1.20.0,'Suite .slow() when argument is passed should return the Suite object'
V1.20.0,1.0.1,1.20.0,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.20.0,1.0.1,1.20.0,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.20.0,1.0.1,1.20.0,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.20.0,1.0.1,1.20.0,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.20.0,1.0.1,1.20.0,'Suite .addSuite() "before each" hook'
V1.20.0,1.0.2,1.20.0,'Suite .clone() should copy the slow value'
V1.20.0,1.0.2,1.20.0,'Suite .slow() when given a string should parse it'
V1.20.0,1.0.2,1.20.0,'Suite .slow() when no argument is passed should return the slow value'
V1.20.0,1.0.2,1.20.0,'Suite .slow() when argument is passed should return the Suite object'
V1.20.0,1.0.2,1.20.0,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.20.0,1.0.2,1.20.0,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.20.0,1.0.2,1.20.0,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.20.0,1.0.2,1.20.0,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.20.0,1.0.2,1.20.0,'Suite .addSuite() "before each" hook'
V1.20.0,1.0.3,1.20.0,'Suite .clone() should copy the slow value'
V1.20.0,1.0.3,1.20.0,'Suite .slow() when given a string should parse it'
V1.20.0,1.0.3,1.20.0,'Suite .slow() when no argument is passed should return the slow value'
V1.20.0,1.0.3,1.20.0,'Suite .slow() when argument is passed should return the Suite object'
V1.20.0,1.0.3,1.20.0,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.20.0,1.0.3,1.20.0,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.20.0,1.0.3,1.20.0,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.20.0,1.0.3,1.20.0,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.20.0,1.0.3,1.20.0,'Suite .addSuite() "before each" hook'
V1.20.0,1.1.0,1.20.0,'Suite .clone() should copy the slow value'
V1.20.0,1.1.0,1.20.0,'Suite .slow() when given a string should parse it'
V1.20.0,1.1.0,1.20.0,'Suite .slow() when no argument is passed should return the slow value'
V1.20.0,1.1.0,1.20.0,'Suite .slow() when argument is passed should return the Suite object'
V1.20.0,1.1.0,1.20.0,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.20.0,1.1.0,1.20.0,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.20.0,1.1.0,1.20.0,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.20.0,1.1.0,1.20.0,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.20.0,1.1.0,1.20.0,'Suite .addSuite() "before each" hook'
V1.20.0,1.2.0,1.20.0,'Suite .clone() should copy the slow value'
V1.20.0,1.2.0,1.20.0,'Suite .slow() when given a string should parse it'
V1.20.0,1.2.0,1.20.0,'Suite .slow() when no argument is passed should return the slow value'
V1.20.0,1.2.0,1.20.0,'Suite .slow() when argument is passed should return the Suite object'
V1.20.0,1.2.0,1.20.0,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.20.0,1.2.0,1.20.0,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.20.0,1.2.0,1.20.0,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.20.0,1.2.0,1.20.0,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.20.0,1.2.0,1.20.0,'Suite .addSuite() "before each" hook'
V1.20.0,1.2.1,1.20.0,'Suite .clone() should copy the slow value'
V1.20.0,1.2.1,1.20.0,'Suite .slow() when given a string should parse it'
V1.20.0,1.2.1,1.20.0,'Suite .slow() when no argument is passed should return the slow value'
V1.20.0,1.2.1,1.20.0,'Suite .slow() when argument is passed should return the Suite object'
V1.20.0,1.2.1,1.20.0,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.20.0,1.2.1,1.20.0,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.20.0,1.2.1,1.20.0,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.20.0,1.2.1,1.20.0,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.20.0,1.2.1,1.20.0,'Suite .addSuite() "before each" hook'
V1.20.0,1.2.2,1.20.0,'Suite .clone() should copy the slow value'
V1.20.0,1.2.2,1.20.0,'Suite .slow() when given a string should parse it'
V1.20.0,1.2.2,1.20.0,'Suite .slow() when no argument is passed should return the slow value'
V1.20.0,1.2.2,1.20.0,'Suite .slow() when argument is passed should return the Suite object'
V1.20.0,1.2.2,1.20.0,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.20.0,1.2.2,1.20.0,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.20.0,1.2.2,1.20.0,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.20.0,1.2.2,1.20.0,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.20.0,1.2.2,1.20.0,'Suite .addSuite() "before each" hook'
V1.20.0,1.3.0,1.20.0,'Suite .clone() should copy the slow value'
V1.20.0,1.3.0,1.20.0,'Suite .slow() when given a string should parse it'
V1.20.0,1.3.0,1.20.0,'Suite .slow() when no argument is passed should return the slow value'
V1.20.0,1.3.0,1.20.0,'Suite .slow() when argument is passed should return the Suite object'
V1.20.0,1.3.0,1.20.0,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.20.0,1.3.0,1.20.0,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.20.0,1.3.0,1.20.0,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.20.0,1.3.0,1.20.0,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.20.0,1.3.0,1.20.0,'Suite .addSuite() "before each" hook'
V1.20.0,1.3.1,1.20.0,'Suite .clone() should copy the slow value'
V1.20.0,1.3.1,1.20.0,'Suite .slow() when given a string should parse it'
V1.20.0,1.3.1,1.20.0,'Suite .slow() when no argument is passed should return the slow value'
V1.20.0,1.3.1,1.20.0,'Suite .slow() when argument is passed should return the Suite object'
V1.20.0,1.3.1,1.20.0,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.20.0,1.3.1,1.20.0,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.20.0,1.3.1,1.20.0,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.20.0,1.3.1,1.20.0,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.20.0,1.3.1,1.20.0,'Suite .addSuite() "before each" hook'
V1.20.0,1.3.2,1.20.0,'Suite .clone() should copy the slow value'
V1.20.0,1.3.2,1.20.0,'Suite .slow() when given a string should parse it'
V1.20.0,1.3.2,1.20.0,'Suite .slow() when no argument is passed should return the slow value'
V1.20.0,1.3.2,1.20.0,'Suite .slow() when argument is passed should return the Suite object'
V1.20.0,1.3.2,1.20.0,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.20.0,1.3.2,1.20.0,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.20.0,1.3.2,1.20.0,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.20.0,1.3.2,1.20.0,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.20.0,1.3.2,1.20.0,'Suite .addSuite() "before each" hook'
V1.20.0,1.4.0,1.20.0,'Suite .clone() should copy the slow value'
V1.20.0,1.4.0,1.20.0,'Suite .slow() when given a string should parse it'
V1.20.0,1.4.0,1.20.0,'Suite .slow() when no argument is passed should return the slow value'
V1.20.0,1.4.0,1.20.0,'Suite .slow() when argument is passed should return the Suite object'
V1.20.0,1.4.0,1.20.0,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.20.0,1.4.0,1.20.0,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.20.0,1.4.0,1.20.0,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.20.0,1.4.0,1.20.0,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.20.0,1.4.0,1.20.0,'Suite .addSuite() "before each" hook'
V1.20.0,1.4.1,1.20.0,'Suite .clone() should copy the slow value'
V1.20.0,1.4.1,1.20.0,'Suite .slow() when given a string should parse it'
V1.20.0,1.4.1,1.20.0,'Suite .slow() when no argument is passed should return the slow value'
V1.20.0,1.4.1,1.20.0,'Suite .slow() when argument is passed should return the Suite object'
V1.20.0,1.4.1,1.20.0,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.20.0,1.4.1,1.20.0,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.20.0,1.4.1,1.20.0,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.20.0,1.4.1,1.20.0,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.20.0,1.4.1,1.20.0,'Suite .addSuite() "before each" hook'
V1.20.0,1.4.2,1.20.0,'Suite .clone() should copy the slow value'
V1.20.0,1.4.2,1.20.0,'Suite .slow() when given a string should parse it'
V1.20.0,1.4.2,1.20.0,'Suite .slow() when no argument is passed should return the slow value'
V1.20.0,1.4.2,1.20.0,'Suite .slow() when argument is passed should return the Suite object'
V1.20.0,1.4.2,1.20.0,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.20.0,1.4.2,1.20.0,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.20.0,1.4.2,1.20.0,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.20.0,1.4.2,1.20.0,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.20.0,1.4.2,1.20.0,'Suite .addSuite() "before each" hook'
V1.20.0,1.5.0,1.20.0,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.20.0,1.5.0,1.20.0,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.20.0,1.5.0,1.20.0,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.20.0,1.5.0,1.20.0,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.20.0,1.5.0,1.20.0,'Runner .globalProps() should include common non enumerable globals'
V1.20.0,1.5.0,1.20.0,'Runner .globals() should white-list globals'
V1.20.0,1.5.0,1.20.0,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.20.0,1.5.0,1.20.0,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.20.0,1.5.0,1.20.0,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.20.0,1.5.0,1.20.0,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.20.0,1.5.0,1.20.0,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.20.0,1.5.0,1.20.0,'serial hooks one'
V1.20.0,1.5.0,1.20.0,'serial hooks two'
V1.20.0,1.5.0,1.20.0,'serial hooks three'
V1.20.0,1.5.0,1.20.0,'serial hooks "after all" hook'
V1.20.0,1.6.0,1.20.0,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.20.0,1.6.0,1.20.0,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.20.0,1.6.0,1.20.0,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.20.0,1.6.0,1.20.0,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.20.0,1.6.0,1.20.0,'Runner .globalProps() should include common non enumerable globals'
V1.20.0,1.6.0,1.20.0,'Runner .globals() should white-list globals'
V1.20.0,1.6.0,1.20.0,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.20.0,1.6.0,1.20.0,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.20.0,1.6.0,1.20.0,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.20.0,1.6.0,1.20.0,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.20.0,1.6.0,1.20.0,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.20.0,1.6.0,1.20.0,'serial hooks one'
V1.20.0,1.6.0,1.20.0,'serial hooks two'
V1.20.0,1.6.0,1.20.0,'serial hooks three'
V1.20.0,1.6.0,1.20.0,'serial hooks "after all" hook'
V1.20.0,1.7.0,1.20.0,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.20.0,1.7.0,1.20.0,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.20.0,1.7.0,1.20.0,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.20.0,1.7.0,1.20.0,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.20.0,1.7.0,1.20.0,'Runner .globalProps() should include common non enumerable globals'
V1.20.0,1.7.0,1.20.0,'Runner .globals() should white-list globals'
V1.20.0,1.7.0,1.20.0,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.20.0,1.7.0,1.20.0,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.20.0,1.7.0,1.20.0,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.20.0,1.7.0,1.20.0,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.20.0,1.7.0,1.20.0,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.20.0,1.7.0,1.20.0,'serial hooks one'
V1.20.0,1.7.0,1.20.0,'serial hooks two'
V1.20.0,1.7.0,1.20.0,'serial hooks three'
V1.20.0,1.7.0,1.20.0,'serial hooks "after all" hook'
V1.20.0,1.7.1,1.20.0,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.20.0,1.7.1,1.20.0,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.20.0,1.7.1,1.20.0,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.20.0,1.7.1,1.20.0,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.20.0,1.7.1,1.20.0,'Runner .globalProps() should include common non enumerable globals'
V1.20.0,1.7.1,1.20.0,'Runner .globals() should white-list globals'
V1.20.0,1.7.1,1.20.0,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.20.0,1.7.1,1.20.0,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.20.0,1.7.1,1.20.0,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.20.0,1.7.1,1.20.0,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.20.0,1.7.1,1.20.0,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.20.0,1.7.1,1.20.0,'serial hooks one'
V1.20.0,1.7.1,1.20.0,'serial hooks two'
V1.20.0,1.7.1,1.20.0,'serial hooks three'
V1.20.0,1.7.1,1.20.0,'serial hooks "after all" hook'
V1.20.0,1.7.2,1.20.0,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.20.0,1.7.2,1.20.0,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.20.0,1.7.2,1.20.0,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.20.0,1.7.2,1.20.0,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.20.0,1.7.2,1.20.0,'Runner .globalProps() should include common non enumerable globals'
V1.20.0,1.7.2,1.20.0,'Runner .globals() should white-list globals'
V1.20.0,1.7.2,1.20.0,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.20.0,1.7.2,1.20.0,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.20.0,1.7.2,1.20.0,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.20.0,1.7.2,1.20.0,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.20.0,1.7.2,1.20.0,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.20.0,1.7.2,1.20.0,'serial hooks one'
V1.20.0,1.7.2,1.20.0,'serial hooks two'
V1.20.0,1.7.2,1.20.0,'serial hooks three'
V1.20.0,1.7.2,1.20.0,'serial hooks "after all" hook'
V1.20.0,1.7.3,1.20.0,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.20.0,1.7.3,1.20.0,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.20.0,1.7.3,1.20.0,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.20.0,1.7.3,1.20.0,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.20.0,1.7.3,1.20.0,'Runner .globalProps() should include common non enumerable globals'
V1.20.0,1.7.3,1.20.0,'Runner .globals() should white-list globals'
V1.20.0,1.7.3,1.20.0,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.20.0,1.7.3,1.20.0,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.20.0,1.7.3,1.20.0,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.20.0,1.7.3,1.20.0,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.20.0,1.7.3,1.20.0,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.20.0,1.7.3,1.20.0,'serial hooks one'
V1.20.0,1.7.3,1.20.0,'serial hooks two'
V1.20.0,1.7.3,1.20.0,'serial hooks three'
V1.20.0,1.7.3,1.20.0,'serial hooks "after all" hook'
V1.20.0,1.7.4,1.20.0,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.20.0,1.7.4,1.20.0,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.20.0,1.7.4,1.20.0,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.20.0,1.7.4,1.20.0,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.20.0,1.7.4,1.20.0,'Runner .globalProps() should include common non enumerable globals'
V1.20.0,1.7.4,1.20.0,'Runner .globals() should white-list globals'
V1.20.0,1.7.4,1.20.0,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.20.0,1.7.4,1.20.0,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.20.0,1.7.4,1.20.0,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.20.0,1.7.4,1.20.0,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.20.0,1.7.4,1.20.0,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.20.0,1.7.4,1.20.0,'serial hooks one'
V1.20.0,1.7.4,1.20.0,'serial hooks two'
V1.20.0,1.7.4,1.20.0,'serial hooks three'
V1.20.0,1.7.4,1.20.0,'serial hooks "after all" hook'
V1.20.0,1.8.0,1.20.0,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.20.0,1.8.0,1.20.0,'serial hooks "after all" hook'
V1.20.0,1.8.1,1.20.0,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.20.0,1.8.1,1.20.0,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.20.0,1.8.1,1.20.0,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.20.0,1.8.1,1.20.0,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.20.0,1.8.1,1.20.0,'Runner .globalProps() should include common non enumerable globals'
V1.20.0,1.8.1,1.20.0,'Runner .globals() should white-list globals'
V1.20.0,1.8.1,1.20.0,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.20.0,1.8.1,1.20.0,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.20.0,1.8.1,1.20.0,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.20.0,1.8.1,1.20.0,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.20.0,1.8.1,1.20.0,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.20.0,1.8.1,1.20.0,'serial hooks one'
V1.20.0,1.8.1,1.20.0,'serial hooks two'
V1.20.0,1.8.1,1.20.0,'serial hooks three'
V1.20.0,1.8.1,1.20.0,'serial hooks "after all" hook'
V1.20.0,1.8.2,1.20.0,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.20.0,1.8.2,1.20.0,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.20.0,1.8.2,1.20.0,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.20.0,1.8.2,1.20.0,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.20.0,1.8.2,1.20.0,'Runner .globalProps() should include common non enumerable globals'
V1.20.0,1.8.2,1.20.0,'Runner .globals() should white-list globals'
V1.20.0,1.8.2,1.20.0,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.20.0,1.8.2,1.20.0,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.20.0,1.8.2,1.20.0,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.20.0,1.8.2,1.20.0,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.20.0,1.8.2,1.20.0,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.20.0,1.8.2,1.20.0,'serial hooks one'
V1.20.0,1.8.2,1.20.0,'serial hooks two'
V1.20.0,1.8.2,1.20.0,'serial hooks three'
V1.20.0,1.8.2,1.20.0,'serial hooks "after all" hook'
V1.20.0,1.9.0,1.20.0,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.20.0,1.9.0,1.20.0,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.20.0,1.9.0,1.20.0,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.20.0,1.9.0,1.20.0,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.20.0,1.9.0,1.20.0,'Runner .globalProps() should include common non enumerable globals'
V1.20.0,1.9.0,1.20.0,'Runner .globals() should white-list globals'
V1.20.0,1.9.0,1.20.0,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.20.0,1.9.0,1.20.0,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.20.0,1.9.0,1.20.0,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.20.0,1.9.0,1.20.0,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.20.0,1.9.0,1.20.0,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.20.0,1.9.0,1.20.0,'serial hooks one'
V1.20.0,1.9.0,1.20.0,'serial hooks two'
V1.20.0,1.9.0,1.20.0,'serial hooks three'
V1.20.0,1.9.0,1.20.0,'serial hooks "after all" hook'
V1.20.0,1.10.0,1.20.0,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.20.0,1.10.0,1.20.0,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.20.0,1.10.0,1.20.0,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.20.0,1.10.0,1.20.0,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.20.0,1.10.0,1.20.0,'Runner .globalProps() should include common non enumerable globals'
V1.20.0,1.10.0,1.20.0,'Runner .globals() should white-list globals'
V1.20.0,1.10.0,1.20.0,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.20.0,1.10.0,1.20.0,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.20.0,1.10.0,1.20.0,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.20.0,1.10.0,1.20.0,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.20.0,1.10.0,1.20.0,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.20.0,1.10.0,1.20.0,'serial hooks one'
V1.20.0,1.10.0,1.20.0,'serial hooks two'
V1.20.0,1.10.0,1.20.0,'serial hooks three'
V1.20.0,1.10.0,1.20.0,'serial hooks "after all" hook'
V1.20.0,1.11.0,1.20.0,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.20.0,1.11.0,1.20.0,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.20.0,1.11.0,1.20.0,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.20.0,1.11.0,1.20.0,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.20.0,1.11.0,1.20.0,'Runner .globalProps() should include common non enumerable globals'
V1.20.0,1.11.0,1.20.0,'Runner .globals() should white-list globals'
V1.20.0,1.11.0,1.20.0,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.20.0,1.11.0,1.20.0,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.20.0,1.11.0,1.20.0,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.20.0,1.11.0,1.20.0,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.20.0,1.11.0,1.20.0,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.20.0,1.11.0,1.20.0,'serial hooks one'
V1.20.0,1.11.0,1.20.0,'serial hooks two'
V1.20.0,1.11.0,1.20.0,'serial hooks three'
V1.20.0,1.11.0,1.20.0,'serial hooks "after all" hook'
V1.20.0,1.12.0,1.20.0,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.20.0,1.12.0,1.20.0,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.20.0,1.12.0,1.20.0,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.20.0,1.12.0,1.20.0,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.20.0,1.12.0,1.20.0,'Runner .globalProps() should include common non enumerable globals'
V1.20.0,1.12.0,1.20.0,'Runner .globals() should white-list globals'
V1.20.0,1.12.0,1.20.0,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.20.0,1.12.0,1.20.0,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.20.0,1.12.0,1.20.0,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.20.0,1.12.0,1.20.0,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.20.0,1.12.0,1.20.0,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.20.0,1.12.1,1.20.0,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.20.0,1.12.1,1.20.0,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.20.0,1.12.1,1.20.0,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.20.0,1.12.1,1.20.0,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.20.0,1.12.1,1.20.0,'Runner .globalProps() should include common non enumerable globals'
V1.20.0,1.12.1,1.20.0,'Runner .globals() should white-list globals'
V1.20.0,1.12.1,1.20.0,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.20.0,1.12.1,1.20.0,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.20.0,1.12.1,1.20.0,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.20.0,1.12.1,1.20.0,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.20.0,1.12.1,1.20.0,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.20.0,1.13.0,1.20.0,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.20.0,1.13.0,1.20.0,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.20.0,1.13.0,1.20.0,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.20.0,1.13.0,1.20.0,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.20.0,1.13.0,1.20.0,'Runner .globalProps() should include common non enumerable globals'
V1.20.0,1.13.0,1.20.0,'Runner .globals() should white-list globals'
V1.20.0,1.13.0,1.20.0,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.20.0,1.13.0,1.20.0,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.20.0,1.13.0,1.20.0,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.20.0,1.13.0,1.20.0,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.20.0,1.13.0,1.20.0,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.20.0,1.14.0,1.20.0,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.20.0,1.14.0,1.20.0,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.20.0,1.14.0,1.20.0,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.20.0,1.14.0,1.20.0,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.20.0,1.14.0,1.20.0,'Runner .globalProps() should include common non enumerable globals'
V1.20.0,1.14.0,1.20.0,'Runner .globals() should white-list globals'
V1.20.0,1.14.0,1.20.0,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.20.0,1.14.0,1.20.0,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.20.0,1.14.0,1.20.0,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.20.0,1.14.0,1.20.0,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.20.0,1.14.0,1.20.0,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.20.0,1.14.0-mwo1,1.20.0,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.20.0,1.14.0-mwo1,1.20.0,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.20.0,1.14.0-mwo1,1.20.0,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.20.0,1.14.0-mwo1,1.20.0,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.20.0,1.14.0-mwo1,1.20.0,'Runner .globalProps() should include common non enumerable globals'
V1.20.0,1.14.0-mwo1,1.20.0,'Runner .globals() should white-list globals'
V1.20.0,1.14.0-mwo1,1.20.0,'Runner .checkGlobals(test) should emit "fail" when a single new disallowed global is introduced after a single extra global is allowed'
V1.20.0,1.14.0-mwo1,1.20.0,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.20.0,1.14.0-mwo1,1.20.0,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.20.0,1.14.0-mwo1,1.20.0,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.20.0,1.14.0-mwo1,1.20.0,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.20.0,1.14.0-mwo1,1.20.0,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.20.0,1.15.0,1.20.0,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.20.0,1.15.0,1.20.0,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.20.0,1.15.0,1.20.0,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.20.0,1.15.0,1.20.0,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.20.0,1.15.0,1.20.0,'Runner .globalProps() should include common non enumerable globals'
V1.20.0,1.15.0,1.20.0,'Runner .globals() should white-list globals'
V1.20.0,1.15.0,1.20.0,'Runner .checkGlobals(test) should emit "fail" when a single new disallowed global is introduced after a single extra global is allowed'
V1.20.0,1.15.0,1.20.0,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.20.0,1.15.0,1.20.0,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.20.0,1.15.0,1.20.0,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.20.0,1.15.0,1.20.0,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.20.0,1.15.1,1.20.0,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.20.0,1.15.1,1.20.0,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.20.0,1.15.1,1.20.0,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.20.0,1.15.1,1.20.0,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.20.0,1.15.1,1.20.0,'Runner .globalProps() should include common non enumerable globals'
V1.20.0,1.15.1,1.20.0,'Runner .globals() should white-list globals'
V1.20.0,1.15.1,1.20.0,'Runner .checkGlobals(test) should emit "fail" when a single new disallowed global is introduced after a single extra global is allowed'
V1.20.0,1.15.1,1.20.0,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.20.0,1.15.1,1.20.0,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.20.0,1.15.1,1.20.0,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.20.0,1.15.1,1.20.0,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.20.0,1.16.0,1.20.0,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.20.0,1.16.0,1.20.0,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.20.0,1.16.0,1.20.0,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.20.0,1.16.0,1.20.0,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.20.0,1.16.0,1.20.0,'Runner .globalProps() should include common non enumerable globals'
V1.20.0,1.16.0,1.20.0,'Runner .globals() should white-list globals'
V1.20.0,1.16.0,1.20.0,'Runner .checkGlobals(test) should emit "fail" when a single new disallowed global is introduced after a single extra global is allowed'
V1.20.0,1.16.0,1.20.0,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.20.0,1.16.1,1.20.0,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.20.0,1.16.1,1.20.0,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.20.0,1.16.1,1.20.0,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.20.0,1.16.1,1.20.0,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.20.0,1.16.1,1.20.0,'Runner .globalProps() should include common non enumerable globals'
V1.20.0,1.16.1,1.20.0,'Runner .globals() should white-list globals'
V1.20.0,1.16.1,1.20.0,'Runner .checkGlobals(test) should emit "fail" when a single new disallowed global is introduced after a single extra global is allowed'
V1.20.0,1.16.1,1.20.0,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.20.0,1.16.2,1.20.0,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.20.0,1.16.2,1.20.0,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.20.0,1.16.2,1.20.0,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.20.0,1.16.2,1.20.0,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.20.0,1.16.2,1.20.0,'Runner .globalProps() should include common non enumerable globals'
V1.20.0,1.16.2,1.20.0,'Runner .globals() should white-list globals'
V1.20.0,1.16.2,1.20.0,'Runner .checkGlobals(test) should emit "fail" when a single new disallowed global is introduced after a single extra global is allowed'
V1.20.0,1.16.2,1.20.0,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.20.0,1.17.0,1.20.0,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.20.0,1.17.0,1.20.0,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.20.0,1.17.0,1.20.0,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.20.0,1.17.0,1.20.0,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.20.0,1.17.0,1.20.0,'Runner .globalProps() should include common non enumerable globals'
V1.20.0,1.17.0,1.20.0,'Runner .globals() should white-list globals'
V1.20.0,1.17.0,1.20.0,'Runner .checkGlobals(test) should emit "fail" when a single new disallowed global is introduced after a single extra global is allowed'
V1.20.0,1.17.0,1.20.0,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.20.0,1.17.1,1.20.0,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.20.0,1.17.1,1.20.0,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.20.0,1.17.1,1.20.0,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.20.0,1.17.1,1.20.0,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.20.0,1.17.1,1.20.0,'Runner .globalProps() should include common non enumerable globals'
V1.20.0,1.17.1,1.20.0,'Runner .globals() should white-list globals'
V1.20.0,1.17.1,1.20.0,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.20.0,1.18.0,1.20.0,'Runner .globalProps() should include common non enumerable globals'
V1.20.0,1.18.0,1.20.0,'Runner .globals() should white-list globals'
V1.20.0,1.18.1,1.20.0,'Runner .globalProps() should include common non enumerable globals'
V1.20.0,1.18.1,1.20.0,'Runner .globals() should white-list globals'
V1.20.0,1.18.2,1.20.0,'Runner .globalProps() should include common non enumerable globals'
V1.20.0,1.18.2,1.20.0,'Runner .globals() should white-list globals'
V1.20.0,1.19.0,1.20.0,'Runner .globalProps() should include common non enumerable globals'
V1.20.0,1.19.0,1.20.0,'Runner .globals() should white-list globals'
V1.20.1,1.20.1,1.20.0,'Runner .globalProps() should include common non enumerable globals'
V1.20.1,1.20.1,1.20.0,'Runner .globals() should white-list globals'
V1.20.1,1.0.0,1.20.1,'Suite .clone() should copy the slow value'
V1.20.1,1.0.0,1.20.1,'Suite .slow() when given a string should parse it'
V1.20.1,1.0.0,1.20.1,'Suite .slow() when no argument is passed should return the slow value'
V1.20.1,1.0.0,1.20.1,'Suite .slow() when argument is passed should return the Suite object'
V1.20.1,1.0.0,1.20.1,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.20.1,1.0.0,1.20.1,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.20.1,1.0.0,1.20.1,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.20.1,1.0.0,1.20.1,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.20.1,1.0.0,1.20.1,'Suite .addSuite() "before each" hook'
V1.20.1,1.0.1,1.20.1,'Suite .clone() should copy the slow value'
V1.20.1,1.0.1,1.20.1,'Suite .slow() when given a string should parse it'
V1.20.1,1.0.1,1.20.1,'Suite .slow() when no argument is passed should return the slow value'
V1.20.1,1.0.1,1.20.1,'Suite .slow() when argument is passed should return the Suite object'
V1.20.1,1.0.1,1.20.1,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.20.1,1.0.1,1.20.1,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.20.1,1.0.1,1.20.1,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.20.1,1.0.1,1.20.1,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.20.1,1.0.1,1.20.1,'Suite .addSuite() "before each" hook'
V1.20.1,1.0.2,1.20.1,'Suite .clone() should copy the slow value'
V1.20.1,1.0.2,1.20.1,'Suite .slow() when given a string should parse it'
V1.20.1,1.0.2,1.20.1,'Suite .slow() when no argument is passed should return the slow value'
V1.20.1,1.0.2,1.20.1,'Suite .slow() when argument is passed should return the Suite object'
V1.20.1,1.0.2,1.20.1,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.20.1,1.0.2,1.20.1,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.20.1,1.0.2,1.20.1,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.20.1,1.0.2,1.20.1,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.20.1,1.0.2,1.20.1,'Suite .addSuite() "before each" hook'
V1.20.1,1.0.3,1.20.1,'Suite .clone() should copy the slow value'
V1.20.1,1.0.3,1.20.1,'Suite .slow() when given a string should parse it'
V1.20.1,1.0.3,1.20.1,'Suite .slow() when no argument is passed should return the slow value'
V1.20.1,1.0.3,1.20.1,'Suite .slow() when argument is passed should return the Suite object'
V1.20.1,1.0.3,1.20.1,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.20.1,1.0.3,1.20.1,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.20.1,1.0.3,1.20.1,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.20.1,1.0.3,1.20.1,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.20.1,1.0.3,1.20.1,'Suite .addSuite() "before each" hook'
V1.20.1,1.1.0,1.20.1,'Suite .clone() should copy the slow value'
V1.20.1,1.1.0,1.20.1,'Suite .slow() when given a string should parse it'
V1.20.1,1.1.0,1.20.1,'Suite .slow() when no argument is passed should return the slow value'
V1.20.1,1.1.0,1.20.1,'Suite .slow() when argument is passed should return the Suite object'
V1.20.1,1.1.0,1.20.1,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.20.1,1.1.0,1.20.1,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.20.1,1.1.0,1.20.1,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.20.1,1.1.0,1.20.1,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.20.1,1.1.0,1.20.1,'Suite .addSuite() "before each" hook'
V1.20.1,1.2.0,1.20.1,'Suite .clone() should copy the slow value'
V1.20.1,1.2.0,1.20.1,'Suite .slow() when given a string should parse it'
V1.20.1,1.2.0,1.20.1,'Suite .slow() when no argument is passed should return the slow value'
V1.20.1,1.2.0,1.20.1,'Suite .slow() when argument is passed should return the Suite object'
V1.20.1,1.2.0,1.20.1,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.20.1,1.2.0,1.20.1,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.20.1,1.2.0,1.20.1,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.20.1,1.2.0,1.20.1,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.20.1,1.2.0,1.20.1,'Suite .addSuite() "before each" hook'
V1.20.1,1.2.1,1.20.1,'Suite .clone() should copy the slow value'
V1.20.1,1.2.1,1.20.1,'Suite .slow() when given a string should parse it'
V1.20.1,1.2.1,1.20.1,'Suite .slow() when no argument is passed should return the slow value'
V1.20.1,1.2.1,1.20.1,'Suite .slow() when argument is passed should return the Suite object'
V1.20.1,1.2.1,1.20.1,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.20.1,1.2.1,1.20.1,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.20.1,1.2.1,1.20.1,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.20.1,1.2.1,1.20.1,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.20.1,1.2.1,1.20.1,'Suite .addSuite() "before each" hook'
V1.20.1,1.2.2,1.20.1,'Suite .clone() should copy the slow value'
V1.20.1,1.2.2,1.20.1,'Suite .slow() when given a string should parse it'
V1.20.1,1.2.2,1.20.1,'Suite .slow() when no argument is passed should return the slow value'
V1.20.1,1.2.2,1.20.1,'Suite .slow() when argument is passed should return the Suite object'
V1.20.1,1.2.2,1.20.1,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.20.1,1.2.2,1.20.1,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.20.1,1.2.2,1.20.1,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.20.1,1.2.2,1.20.1,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.20.1,1.2.2,1.20.1,'Suite .addSuite() "before each" hook'
V1.20.1,1.3.0,1.20.1,'Suite .clone() should copy the slow value'
V1.20.1,1.3.0,1.20.1,'Suite .slow() when given a string should parse it'
V1.20.1,1.3.0,1.20.1,'Suite .slow() when no argument is passed should return the slow value'
V1.20.1,1.3.0,1.20.1,'Suite .slow() when argument is passed should return the Suite object'
V1.20.1,1.3.0,1.20.1,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.20.1,1.3.0,1.20.1,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.20.1,1.3.0,1.20.1,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.20.1,1.3.0,1.20.1,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.20.1,1.3.0,1.20.1,'Suite .addSuite() "before each" hook'
V1.20.1,1.3.1,1.20.1,'Suite .clone() should copy the slow value'
V1.20.1,1.3.1,1.20.1,'Suite .slow() when given a string should parse it'
V1.20.1,1.3.1,1.20.1,'Suite .slow() when no argument is passed should return the slow value'
V1.20.1,1.3.1,1.20.1,'Suite .slow() when argument is passed should return the Suite object'
V1.20.1,1.3.1,1.20.1,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.20.1,1.3.1,1.20.1,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.20.1,1.3.1,1.20.1,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.20.1,1.3.1,1.20.1,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.20.1,1.3.1,1.20.1,'Suite .addSuite() "before each" hook'
V1.20.1,1.3.2,1.20.1,'Suite .clone() should copy the slow value'
V1.20.1,1.3.2,1.20.1,'Suite .slow() when given a string should parse it'
V1.20.1,1.3.2,1.20.1,'Suite .slow() when no argument is passed should return the slow value'
V1.20.1,1.3.2,1.20.1,'Suite .slow() when argument is passed should return the Suite object'
V1.20.1,1.3.2,1.20.1,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.20.1,1.3.2,1.20.1,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.20.1,1.3.2,1.20.1,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.20.1,1.3.2,1.20.1,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.20.1,1.3.2,1.20.1,'Suite .addSuite() "before each" hook'
V1.20.1,1.4.0,1.20.1,'Suite .clone() should copy the slow value'
V1.20.1,1.4.0,1.20.1,'Suite .slow() when given a string should parse it'
V1.20.1,1.4.0,1.20.1,'Suite .slow() when no argument is passed should return the slow value'
V1.20.1,1.4.0,1.20.1,'Suite .slow() when argument is passed should return the Suite object'
V1.20.1,1.4.0,1.20.1,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.20.1,1.4.0,1.20.1,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.20.1,1.4.0,1.20.1,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.20.1,1.4.0,1.20.1,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.20.1,1.4.0,1.20.1,'Suite .addSuite() "before each" hook'
V1.20.1,1.4.1,1.20.1,'Suite .clone() should copy the slow value'
V1.20.1,1.4.1,1.20.1,'Suite .slow() when given a string should parse it'
V1.20.1,1.4.1,1.20.1,'Suite .slow() when no argument is passed should return the slow value'
V1.20.1,1.4.1,1.20.1,'Suite .slow() when argument is passed should return the Suite object'
V1.20.1,1.4.1,1.20.1,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.20.1,1.4.1,1.20.1,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.20.1,1.4.1,1.20.1,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.20.1,1.4.1,1.20.1,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.20.1,1.4.1,1.20.1,'Suite .addSuite() "before each" hook'
V1.20.1,1.4.2,1.20.1,'Suite .clone() should copy the slow value'
V1.20.1,1.4.2,1.20.1,'Suite .slow() when given a string should parse it'
V1.20.1,1.4.2,1.20.1,'Suite .slow() when no argument is passed should return the slow value'
V1.20.1,1.4.2,1.20.1,'Suite .slow() when argument is passed should return the Suite object'
V1.20.1,1.4.2,1.20.1,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.20.1,1.4.2,1.20.1,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.20.1,1.4.2,1.20.1,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.20.1,1.4.2,1.20.1,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.20.1,1.4.2,1.20.1,'Suite .addSuite() "before each" hook'
V1.20.1,1.5.0,1.20.1,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.20.1,1.5.0,1.20.1,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.20.1,1.5.0,1.20.1,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.20.1,1.5.0,1.20.1,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.20.1,1.5.0,1.20.1,'Runner .globalProps() should include common non enumerable globals'
V1.20.1,1.5.0,1.20.1,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.20.1,1.5.0,1.20.1,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.20.1,1.5.0,1.20.1,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.20.1,1.5.0,1.20.1,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.20.1,1.5.0,1.20.1,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.20.1,1.5.0,1.20.1,'serial hooks one'
V1.20.1,1.5.0,1.20.1,'serial hooks two'
V1.20.1,1.5.0,1.20.1,'serial hooks three'
V1.20.1,1.5.0,1.20.1,'serial hooks "after all" hook'
V1.20.1,1.6.0,1.20.1,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.20.1,1.6.0,1.20.1,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.20.1,1.6.0,1.20.1,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.20.1,1.6.0,1.20.1,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.20.1,1.6.0,1.20.1,'Runner .globalProps() should include common non enumerable globals'
V1.20.1,1.6.0,1.20.1,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.20.1,1.6.0,1.20.1,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.20.1,1.6.0,1.20.1,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.20.1,1.6.0,1.20.1,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.20.1,1.6.0,1.20.1,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.20.1,1.6.0,1.20.1,'serial hooks one'
V1.20.1,1.6.0,1.20.1,'serial hooks two'
V1.20.1,1.6.0,1.20.1,'serial hooks three'
V1.20.1,1.6.0,1.20.1,'serial hooks "after all" hook'
V1.20.1,1.7.0,1.20.1,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.20.1,1.7.0,1.20.1,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.20.1,1.7.0,1.20.1,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.20.1,1.7.0,1.20.1,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.20.1,1.7.0,1.20.1,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.20.1,1.7.0,1.20.1,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.20.1,1.7.0,1.20.1,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.20.1,1.7.0,1.20.1,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.20.1,1.7.0,1.20.1,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.20.1,1.7.0,1.20.1,'serial hooks one'
V1.20.1,1.7.0,1.20.1,'serial hooks two'
V1.20.1,1.7.0,1.20.1,'serial hooks three'
V1.20.1,1.7.0,1.20.1,'serial hooks "after all" hook'
V1.20.1,1.7.1,1.20.1,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.20.1,1.7.1,1.20.1,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.20.1,1.7.1,1.20.1,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.20.1,1.7.1,1.20.1,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.20.1,1.7.1,1.20.1,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.20.1,1.7.1,1.20.1,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.20.1,1.7.1,1.20.1,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.20.1,1.7.1,1.20.1,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.20.1,1.7.1,1.20.1,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.20.1,1.7.1,1.20.1,'serial hooks one'
V1.20.1,1.7.1,1.20.1,'serial hooks two'
V1.20.1,1.7.1,1.20.1,'serial hooks three'
V1.20.1,1.7.1,1.20.1,'serial hooks "after all" hook'
V1.20.1,1.7.2,1.20.1,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.20.1,1.7.2,1.20.1,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.20.1,1.7.2,1.20.1,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.20.1,1.7.2,1.20.1,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.20.1,1.7.2,1.20.1,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.20.1,1.7.2,1.20.1,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.20.1,1.7.2,1.20.1,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.20.1,1.7.2,1.20.1,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.20.1,1.7.2,1.20.1,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.20.1,1.7.2,1.20.1,'serial hooks one'
V1.20.1,1.7.2,1.20.1,'serial hooks two'
V1.20.1,1.7.2,1.20.1,'serial hooks three'
V1.20.1,1.7.2,1.20.1,'serial hooks "after all" hook'
V1.20.1,1.7.3,1.20.1,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.20.1,1.7.3,1.20.1,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.20.1,1.7.3,1.20.1,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.20.1,1.7.3,1.20.1,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.20.1,1.7.3,1.20.1,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.20.1,1.7.3,1.20.1,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.20.1,1.7.3,1.20.1,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.20.1,1.7.3,1.20.1,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.20.1,1.7.3,1.20.1,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.20.1,1.7.3,1.20.1,'serial hooks one'
V1.20.1,1.7.3,1.20.1,'serial hooks two'
V1.20.1,1.7.3,1.20.1,'serial hooks three'
V1.20.1,1.7.3,1.20.1,'serial hooks "after all" hook'
V1.20.1,1.7.4,1.20.1,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.20.1,1.7.4,1.20.1,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.20.1,1.7.4,1.20.1,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.20.1,1.7.4,1.20.1,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.20.1,1.7.4,1.20.1,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.20.1,1.7.4,1.20.1,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.20.1,1.7.4,1.20.1,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.20.1,1.7.4,1.20.1,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.20.1,1.7.4,1.20.1,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.20.1,1.7.4,1.20.1,'serial hooks one'
V1.20.1,1.7.4,1.20.1,'serial hooks two'
V1.20.1,1.7.4,1.20.1,'serial hooks three'
V1.20.1,1.7.4,1.20.1,'serial hooks "after all" hook'
V1.20.1,1.8.0,1.20.1,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.20.1,1.8.0,1.20.1,'serial hooks "after all" hook'
V1.20.1,1.8.1,1.20.1,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.20.1,1.8.1,1.20.1,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.20.1,1.8.1,1.20.1,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.20.1,1.8.1,1.20.1,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.20.1,1.8.1,1.20.1,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.20.1,1.8.1,1.20.1,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.20.1,1.8.1,1.20.1,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.20.1,1.8.1,1.20.1,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.20.1,1.8.1,1.20.1,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.20.1,1.8.1,1.20.1,'serial hooks one'
V1.20.1,1.8.1,1.20.1,'serial hooks two'
V1.20.1,1.8.1,1.20.1,'serial hooks three'
V1.20.1,1.8.1,1.20.1,'serial hooks "after all" hook'
V1.20.1,1.8.2,1.20.1,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.20.1,1.8.2,1.20.1,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.20.1,1.8.2,1.20.1,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.20.1,1.8.2,1.20.1,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.20.1,1.8.2,1.20.1,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.20.1,1.8.2,1.20.1,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.20.1,1.8.2,1.20.1,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.20.1,1.8.2,1.20.1,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.20.1,1.8.2,1.20.1,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.20.1,1.8.2,1.20.1,'serial hooks one'
V1.20.1,1.8.2,1.20.1,'serial hooks two'
V1.20.1,1.8.2,1.20.1,'serial hooks three'
V1.20.1,1.8.2,1.20.1,'serial hooks "after all" hook'
V1.20.1,1.9.0,1.20.1,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.20.1,1.9.0,1.20.1,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.20.1,1.9.0,1.20.1,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.20.1,1.9.0,1.20.1,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.20.1,1.9.0,1.20.1,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.20.1,1.9.0,1.20.1,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.20.1,1.9.0,1.20.1,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.20.1,1.9.0,1.20.1,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.20.1,1.9.0,1.20.1,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.20.1,1.9.0,1.20.1,'serial hooks one'
V1.20.1,1.9.0,1.20.1,'serial hooks two'
V1.20.1,1.9.0,1.20.1,'serial hooks three'
V1.20.1,1.9.0,1.20.1,'serial hooks "after all" hook'
V1.20.1,1.10.0,1.20.1,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.20.1,1.10.0,1.20.1,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.20.1,1.10.0,1.20.1,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.20.1,1.10.0,1.20.1,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.20.1,1.10.0,1.20.1,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.20.1,1.10.0,1.20.1,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.20.1,1.10.0,1.20.1,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.20.1,1.10.0,1.20.1,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.20.1,1.10.0,1.20.1,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.20.1,1.10.0,1.20.1,'serial hooks one'
V1.20.1,1.10.0,1.20.1,'serial hooks two'
V1.20.1,1.10.0,1.20.1,'serial hooks three'
V1.20.1,1.10.0,1.20.1,'serial hooks "after all" hook'
V1.20.1,1.11.0,1.20.1,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.20.1,1.11.0,1.20.1,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.20.1,1.11.0,1.20.1,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.20.1,1.11.0,1.20.1,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.20.1,1.11.0,1.20.1,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.20.1,1.11.0,1.20.1,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.20.1,1.11.0,1.20.1,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.20.1,1.11.0,1.20.1,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.20.1,1.11.0,1.20.1,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.20.1,1.11.0,1.20.1,'serial hooks one'
V1.20.1,1.11.0,1.20.1,'serial hooks two'
V1.20.1,1.11.0,1.20.1,'serial hooks three'
V1.20.1,1.11.0,1.20.1,'serial hooks "after all" hook'
V1.20.1,1.12.0,1.20.1,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.20.1,1.12.0,1.20.1,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.20.1,1.12.0,1.20.1,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.20.1,1.12.0,1.20.1,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.20.1,1.12.0,1.20.1,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.20.1,1.12.0,1.20.1,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.20.1,1.12.0,1.20.1,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.20.1,1.12.0,1.20.1,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.20.1,1.12.0,1.20.1,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.20.1,1.12.1,1.20.1,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.20.1,1.12.1,1.20.1,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.20.1,1.12.1,1.20.1,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.20.1,1.12.1,1.20.1,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.20.1,1.12.1,1.20.1,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.20.1,1.12.1,1.20.1,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.20.1,1.12.1,1.20.1,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.20.1,1.12.1,1.20.1,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.20.1,1.12.1,1.20.1,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.20.1,1.13.0,1.20.1,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.20.1,1.13.0,1.20.1,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.20.1,1.13.0,1.20.1,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.20.1,1.13.0,1.20.1,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.20.1,1.13.0,1.20.1,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.20.1,1.13.0,1.20.1,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.20.1,1.13.0,1.20.1,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.20.1,1.13.0,1.20.1,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.20.1,1.13.0,1.20.1,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.20.1,1.14.0,1.20.1,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.20.1,1.14.0,1.20.1,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.20.1,1.14.0,1.20.1,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.20.1,1.14.0,1.20.1,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.20.1,1.14.0,1.20.1,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.20.1,1.14.0,1.20.1,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.20.1,1.14.0,1.20.1,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.20.1,1.14.0,1.20.1,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.20.1,1.14.0,1.20.1,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.20.1,1.14.0-mwo1,1.20.1,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.20.1,1.14.0-mwo1,1.20.1,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.20.1,1.14.0-mwo1,1.20.1,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.20.1,1.14.0-mwo1,1.20.1,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.20.1,1.14.0-mwo1,1.20.1,'Runner .checkGlobals(test) should emit "fail" when a single new disallowed global is introduced after a single extra global is allowed'
V1.20.1,1.14.0-mwo1,1.20.1,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.20.1,1.14.0-mwo1,1.20.1,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.20.1,1.14.0-mwo1,1.20.1,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.20.1,1.14.0-mwo1,1.20.1,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.20.1,1.14.0-mwo1,1.20.1,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.20.1,1.15.0,1.20.1,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.20.1,1.15.0,1.20.1,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.20.1,1.15.0,1.20.1,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.20.1,1.15.0,1.20.1,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.20.1,1.15.0,1.20.1,'Runner .checkGlobals(test) should emit "fail" when a single new disallowed global is introduced after a single extra global is allowed'
V1.20.1,1.15.0,1.20.1,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.20.1,1.15.0,1.20.1,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.20.1,1.15.0,1.20.1,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.20.1,1.15.0,1.20.1,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.20.1,1.15.1,1.20.1,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.20.1,1.15.1,1.20.1,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.20.1,1.15.1,1.20.1,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.20.1,1.15.1,1.20.1,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.20.1,1.15.1,1.20.1,'Runner .checkGlobals(test) should emit "fail" when a single new disallowed global is introduced after a single extra global is allowed'
V1.20.1,1.15.1,1.20.1,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.20.1,1.15.1,1.20.1,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.20.1,1.15.1,1.20.1,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.20.1,1.15.1,1.20.1,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.20.1,1.16.0,1.20.1,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.20.1,1.16.0,1.20.1,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.20.1,1.16.0,1.20.1,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.20.1,1.16.0,1.20.1,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.20.1,1.16.0,1.20.1,'Runner .checkGlobals(test) should emit "fail" when a single new disallowed global is introduced after a single extra global is allowed'
V1.20.1,1.16.0,1.20.1,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.20.1,1.16.1,1.20.1,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.20.1,1.16.1,1.20.1,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.20.1,1.16.1,1.20.1,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.20.1,1.16.1,1.20.1,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.20.1,1.16.1,1.20.1,'Runner .checkGlobals(test) should emit "fail" when a single new disallowed global is introduced after a single extra global is allowed'
V1.20.1,1.16.1,1.20.1,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.20.1,1.16.2,1.20.1,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.20.1,1.16.2,1.20.1,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.20.1,1.16.2,1.20.1,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.20.1,1.16.2,1.20.1,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.20.1,1.16.2,1.20.1,'Runner .checkGlobals(test) should emit "fail" when a single new disallowed global is introduced after a single extra global is allowed'
V1.20.1,1.16.2,1.20.1,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.20.1,1.17.0,1.20.1,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.20.1,1.17.0,1.20.1,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.20.1,1.17.0,1.20.1,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.20.1,1.17.0,1.20.1,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.20.1,1.17.0,1.20.1,'Runner .checkGlobals(test) should emit "fail" when a single new disallowed global is introduced after a single extra global is allowed'
V1.20.1,1.17.0,1.20.1,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.20.1,1.17.1,1.20.1,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.20.1,1.17.1,1.20.1,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.20.1,1.17.1,1.20.1,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.20.1,1.17.1,1.20.1,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.20.1,1.17.1,1.20.1,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.21.0,1.0.0,1.21.0,'Suite .clone() should copy the slow value'
V1.21.0,1.0.0,1.21.0,'Suite .slow() when given a string should parse it'
V1.21.0,1.0.0,1.21.0,'Suite .slow() when no argument is passed should return the slow value'
V1.21.0,1.0.0,1.21.0,'Suite .slow() when argument is passed should return the Suite object'
V1.21.0,1.0.0,1.21.0,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.0,1.0.0,1.21.0,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.0,1.0.0,1.21.0,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.0,1.0.0,1.21.0,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.0,1.0.0,1.21.0,'Suite .addSuite() "before each" hook'
V1.21.0,1.0.1,1.21.0,'Suite .clone() should copy the slow value'
V1.21.0,1.0.1,1.21.0,'Suite .slow() when given a string should parse it'
V1.21.0,1.0.1,1.21.0,'Suite .slow() when no argument is passed should return the slow value'
V1.21.0,1.0.1,1.21.0,'Suite .slow() when argument is passed should return the Suite object'
V1.21.0,1.0.1,1.21.0,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.0,1.0.1,1.21.0,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.0,1.0.1,1.21.0,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.0,1.0.1,1.21.0,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.0,1.0.1,1.21.0,'Suite .addSuite() "before each" hook'
V1.21.0,1.0.2,1.21.0,'Suite .clone() should copy the slow value'
V1.21.0,1.0.2,1.21.0,'Suite .slow() when given a string should parse it'
V1.21.0,1.0.2,1.21.0,'Suite .slow() when no argument is passed should return the slow value'
V1.21.0,1.0.2,1.21.0,'Suite .slow() when argument is passed should return the Suite object'
V1.21.0,1.0.2,1.21.0,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.0,1.0.2,1.21.0,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.0,1.0.2,1.21.0,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.0,1.0.2,1.21.0,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.0,1.0.2,1.21.0,'Suite .addSuite() "before each" hook'
V1.21.0,1.0.3,1.21.0,'Suite .clone() should copy the slow value'
V1.21.0,1.0.3,1.21.0,'Suite .slow() when given a string should parse it'
V1.21.0,1.0.3,1.21.0,'Suite .slow() when no argument is passed should return the slow value'
V1.21.0,1.0.3,1.21.0,'Suite .slow() when argument is passed should return the Suite object'
V1.21.0,1.0.3,1.21.0,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.0,1.0.3,1.21.0,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.0,1.0.3,1.21.0,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.0,1.0.3,1.21.0,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.0,1.0.3,1.21.0,'Suite .addSuite() "before each" hook'
V1.21.0,1.1.0,1.21.0,'Suite .clone() should copy the slow value'
V1.21.0,1.1.0,1.21.0,'Suite .slow() when given a string should parse it'
V1.21.0,1.1.0,1.21.0,'Suite .slow() when no argument is passed should return the slow value'
V1.21.0,1.1.0,1.21.0,'Suite .slow() when argument is passed should return the Suite object'
V1.21.0,1.1.0,1.21.0,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.0,1.1.0,1.21.0,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.0,1.1.0,1.21.0,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.0,1.1.0,1.21.0,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.0,1.1.0,1.21.0,'Suite .addSuite() "before each" hook'
V1.21.0,1.2.0,1.21.0,'Suite .clone() should copy the slow value'
V1.21.0,1.2.0,1.21.0,'Suite .slow() when given a string should parse it'
V1.21.0,1.2.0,1.21.0,'Suite .slow() when no argument is passed should return the slow value'
V1.21.0,1.2.0,1.21.0,'Suite .slow() when argument is passed should return the Suite object'
V1.21.0,1.2.0,1.21.0,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.0,1.2.0,1.21.0,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.0,1.2.0,1.21.0,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.0,1.2.0,1.21.0,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.0,1.2.0,1.21.0,'Suite .addSuite() "before each" hook'
V1.21.0,1.2.1,1.21.0,'Suite .clone() should copy the slow value'
V1.21.0,1.2.1,1.21.0,'Suite .slow() when given a string should parse it'
V1.21.0,1.2.1,1.21.0,'Suite .slow() when no argument is passed should return the slow value'
V1.21.0,1.2.1,1.21.0,'Suite .slow() when argument is passed should return the Suite object'
V1.21.0,1.2.1,1.21.0,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.0,1.2.1,1.21.0,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.0,1.2.1,1.21.0,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.0,1.2.1,1.21.0,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.0,1.2.1,1.21.0,'Suite .addSuite() "before each" hook'
V1.21.0,1.2.2,1.21.0,'Suite .clone() should copy the slow value'
V1.21.0,1.2.2,1.21.0,'Suite .slow() when given a string should parse it'
V1.21.0,1.2.2,1.21.0,'Suite .slow() when no argument is passed should return the slow value'
V1.21.0,1.2.2,1.21.0,'Suite .slow() when argument is passed should return the Suite object'
V1.21.0,1.2.2,1.21.0,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.0,1.2.2,1.21.0,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.0,1.2.2,1.21.0,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.0,1.2.2,1.21.0,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.0,1.2.2,1.21.0,'Suite .addSuite() "before each" hook'
V1.21.0,1.3.0,1.21.0,'Suite .clone() should copy the slow value'
V1.21.0,1.3.0,1.21.0,'Suite .slow() when given a string should parse it'
V1.21.0,1.3.0,1.21.0,'Suite .slow() when no argument is passed should return the slow value'
V1.21.0,1.3.0,1.21.0,'Suite .slow() when argument is passed should return the Suite object'
V1.21.0,1.3.0,1.21.0,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.0,1.3.0,1.21.0,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.0,1.3.0,1.21.0,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.0,1.3.0,1.21.0,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.0,1.3.0,1.21.0,'Suite .addSuite() "before each" hook'
V1.21.0,1.3.1,1.21.0,'Suite .clone() should copy the slow value'
V1.21.0,1.3.1,1.21.0,'Suite .slow() when given a string should parse it'
V1.21.0,1.3.1,1.21.0,'Suite .slow() when no argument is passed should return the slow value'
V1.21.0,1.3.1,1.21.0,'Suite .slow() when argument is passed should return the Suite object'
V1.21.0,1.3.1,1.21.0,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.0,1.3.1,1.21.0,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.0,1.3.1,1.21.0,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.0,1.3.1,1.21.0,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.0,1.3.1,1.21.0,'Suite .addSuite() "before each" hook'
V1.21.0,1.3.2,1.21.0,'Suite .clone() should copy the slow value'
V1.21.0,1.3.2,1.21.0,'Suite .slow() when given a string should parse it'
V1.21.0,1.3.2,1.21.0,'Suite .slow() when no argument is passed should return the slow value'
V1.21.0,1.3.2,1.21.0,'Suite .slow() when argument is passed should return the Suite object'
V1.21.0,1.3.2,1.21.0,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.0,1.3.2,1.21.0,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.0,1.3.2,1.21.0,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.0,1.3.2,1.21.0,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.0,1.3.2,1.21.0,'Suite .addSuite() "before each" hook'
V1.21.0,1.4.0,1.21.0,'Suite .clone() should copy the slow value'
V1.21.0,1.4.0,1.21.0,'Suite .slow() when given a string should parse it'
V1.21.0,1.4.0,1.21.0,'Suite .slow() when no argument is passed should return the slow value'
V1.21.0,1.4.0,1.21.0,'Suite .slow() when argument is passed should return the Suite object'
V1.21.0,1.4.0,1.21.0,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.0,1.4.0,1.21.0,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.0,1.4.0,1.21.0,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.0,1.4.0,1.21.0,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.0,1.4.0,1.21.0,'Suite .addSuite() "before each" hook'
V1.21.0,1.4.1,1.21.0,'Suite .clone() should copy the slow value'
V1.21.0,1.4.1,1.21.0,'Suite .slow() when given a string should parse it'
V1.21.0,1.4.1,1.21.0,'Suite .slow() when no argument is passed should return the slow value'
V1.21.0,1.4.1,1.21.0,'Suite .slow() when argument is passed should return the Suite object'
V1.21.0,1.4.1,1.21.0,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.0,1.4.1,1.21.0,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.0,1.4.1,1.21.0,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.0,1.4.1,1.21.0,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.0,1.4.1,1.21.0,'Suite .addSuite() "before each" hook'
V1.21.0,1.4.2,1.21.0,'Suite .clone() should copy the slow value'
V1.21.0,1.4.2,1.21.0,'Suite .slow() when given a string should parse it'
V1.21.0,1.4.2,1.21.0,'Suite .slow() when no argument is passed should return the slow value'
V1.21.0,1.4.2,1.21.0,'Suite .slow() when argument is passed should return the Suite object'
V1.21.0,1.4.2,1.21.0,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.0,1.4.2,1.21.0,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.0,1.4.2,1.21.0,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.0,1.4.2,1.21.0,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.0,1.4.2,1.21.0,'Suite .addSuite() "before each" hook'
V1.21.0,1.5.0,1.21.0,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.0,1.5.0,1.21.0,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.0,1.5.0,1.21.0,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.0,1.5.0,1.21.0,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.0,1.5.0,1.21.0,'Runner .globalProps() should include common non enumerable globals'
V1.21.0,1.5.0,1.21.0,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.21.0,1.5.0,1.21.0,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.21.0,1.5.0,1.21.0,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.21.0,1.5.0,1.21.0,'Runnable(title, fn) #enableTimeouts(enabled) should set enabled'
V1.21.0,1.5.0,1.21.0,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.21.0,1.5.0,1.21.0,'Runnable(title, fn) .run(fn) when timeouts are disabled should not error with timeout'
V1.21.0,1.5.0,1.21.0,'Runnable(title, fn) .run(fn) when async when done() is invoked with a non-Error object should invoke the callback'
V1.21.0,1.5.0,1.21.0,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.21.0,1.5.0,1.21.0,'serial hooks one'
V1.21.0,1.5.0,1.21.0,'serial hooks two'
V1.21.0,1.5.0,1.21.0,'serial hooks three'
V1.21.0,1.5.0,1.21.0,'serial hooks "after all" hook'
V1.21.0,1.6.0,1.21.0,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.0,1.6.0,1.21.0,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.0,1.6.0,1.21.0,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.0,1.6.0,1.21.0,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.0,1.6.0,1.21.0,'Runner .globalProps() should include common non enumerable globals'
V1.21.0,1.6.0,1.21.0,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.21.0,1.6.0,1.21.0,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.21.0,1.6.0,1.21.0,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.21.0,1.6.0,1.21.0,'Runnable(title, fn) #enableTimeouts(enabled) should set enabled'
V1.21.0,1.6.0,1.21.0,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.21.0,1.6.0,1.21.0,'Runnable(title, fn) .run(fn) when timeouts are disabled should not error with timeout'
V1.21.0,1.6.0,1.21.0,'Runnable(title, fn) .run(fn) when async when done() is invoked with a non-Error object should invoke the callback'
V1.21.0,1.6.0,1.21.0,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.21.0,1.6.0,1.21.0,'serial hooks one'
V1.21.0,1.6.0,1.21.0,'serial hooks two'
V1.21.0,1.6.0,1.21.0,'serial hooks three'
V1.21.0,1.6.0,1.21.0,'serial hooks "after all" hook'
V1.21.0,1.7.0,1.21.0,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.0,1.7.0,1.21.0,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.0,1.7.0,1.21.0,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.0,1.7.0,1.21.0,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.0,1.7.0,1.21.0,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.21.0,1.7.0,1.21.0,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.21.0,1.7.0,1.21.0,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.21.0,1.7.0,1.21.0,'Runnable(title, fn) #enableTimeouts(enabled) should set enabled'
V1.21.0,1.7.0,1.21.0,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.21.0,1.7.0,1.21.0,'Runnable(title, fn) .run(fn) when timeouts are disabled should not error with timeout'
V1.21.0,1.7.0,1.21.0,'Runnable(title, fn) .run(fn) when async when done() is invoked with a non-Error object should invoke the callback'
V1.21.0,1.7.0,1.21.0,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.21.0,1.7.0,1.21.0,'serial hooks one'
V1.21.0,1.7.0,1.21.0,'serial hooks two'
V1.21.0,1.7.0,1.21.0,'serial hooks three'
V1.21.0,1.7.0,1.21.0,'serial hooks "after all" hook'
V1.21.0,1.7.1,1.21.0,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.0,1.7.1,1.21.0,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.0,1.7.1,1.21.0,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.0,1.7.1,1.21.0,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.0,1.7.1,1.21.0,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.21.0,1.7.1,1.21.0,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.21.0,1.7.1,1.21.0,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.21.0,1.7.1,1.21.0,'Runnable(title, fn) #enableTimeouts(enabled) should set enabled'
V1.21.0,1.7.1,1.21.0,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.21.0,1.7.1,1.21.0,'Runnable(title, fn) .run(fn) when timeouts are disabled should not error with timeout'
V1.21.0,1.7.1,1.21.0,'Runnable(title, fn) .run(fn) when async when done() is invoked with a non-Error object should invoke the callback'
V1.21.0,1.7.1,1.21.0,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.21.0,1.7.1,1.21.0,'serial hooks one'
V1.21.0,1.7.1,1.21.0,'serial hooks two'
V1.21.0,1.7.1,1.21.0,'serial hooks three'
V1.21.0,1.7.1,1.21.0,'serial hooks "after all" hook'
V1.21.0,1.7.2,1.21.0,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.0,1.7.2,1.21.0,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.0,1.7.2,1.21.0,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.0,1.7.2,1.21.0,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.0,1.7.2,1.21.0,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.21.0,1.7.2,1.21.0,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.21.0,1.7.2,1.21.0,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.21.0,1.7.2,1.21.0,'Runnable(title, fn) #enableTimeouts(enabled) should set enabled'
V1.21.0,1.7.2,1.21.0,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.21.0,1.7.2,1.21.0,'Runnable(title, fn) .run(fn) when timeouts are disabled should not error with timeout'
V1.21.0,1.7.2,1.21.0,'Runnable(title, fn) .run(fn) when async when done() is invoked with a non-Error object should invoke the callback'
V1.21.0,1.7.2,1.21.0,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.21.0,1.7.2,1.21.0,'serial hooks one'
V1.21.0,1.7.2,1.21.0,'serial hooks two'
V1.21.0,1.7.2,1.21.0,'serial hooks three'
V1.21.0,1.7.2,1.21.0,'serial hooks "after all" hook'
V1.21.0,1.7.3,1.21.0,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.0,1.7.3,1.21.0,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.0,1.7.3,1.21.0,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.0,1.7.3,1.21.0,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.0,1.7.3,1.21.0,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.21.0,1.7.3,1.21.0,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.21.0,1.7.3,1.21.0,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.21.0,1.7.3,1.21.0,'Runnable(title, fn) #enableTimeouts(enabled) should set enabled'
V1.21.0,1.7.3,1.21.0,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.21.0,1.7.3,1.21.0,'Runnable(title, fn) .run(fn) when timeouts are disabled should not error with timeout'
V1.21.0,1.7.3,1.21.0,'Runnable(title, fn) .run(fn) when async when done() is invoked with a non-Error object should invoke the callback'
V1.21.0,1.7.3,1.21.0,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.21.0,1.7.3,1.21.0,'serial hooks one'
V1.21.0,1.7.3,1.21.0,'serial hooks two'
V1.21.0,1.7.3,1.21.0,'serial hooks three'
V1.21.0,1.7.3,1.21.0,'serial hooks "after all" hook'
V1.21.0,1.7.4,1.21.0,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.0,1.7.4,1.21.0,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.0,1.7.4,1.21.0,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.0,1.7.4,1.21.0,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.0,1.7.4,1.21.0,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.21.0,1.7.4,1.21.0,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.21.0,1.7.4,1.21.0,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.21.0,1.7.4,1.21.0,'Runnable(title, fn) #enableTimeouts(enabled) should set enabled'
V1.21.0,1.7.4,1.21.0,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.21.0,1.7.4,1.21.0,'Runnable(title, fn) .run(fn) when timeouts are disabled should not error with timeout'
V1.21.0,1.7.4,1.21.0,'Runnable(title, fn) .run(fn) when async when done() is invoked with a non-Error object should invoke the callback'
V1.21.0,1.7.4,1.21.0,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.21.0,1.7.4,1.21.0,'serial hooks one'
V1.21.0,1.7.4,1.21.0,'serial hooks two'
V1.21.0,1.7.4,1.21.0,'serial hooks three'
V1.21.0,1.7.4,1.21.0,'serial hooks "after all" hook'
V1.21.0,1.8.0,1.21.0,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.0,1.8.0,1.21.0,'serial hooks "after all" hook'
V1.21.0,1.8.1,1.21.0,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.0,1.8.1,1.21.0,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.0,1.8.1,1.21.0,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.0,1.8.1,1.21.0,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.0,1.8.1,1.21.0,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.21.0,1.8.1,1.21.0,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.21.0,1.8.1,1.21.0,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.21.0,1.8.1,1.21.0,'Runnable(title, fn) #enableTimeouts(enabled) should set enabled'
V1.21.0,1.8.1,1.21.0,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.21.0,1.8.1,1.21.0,'Runnable(title, fn) .run(fn) when timeouts are disabled should not error with timeout'
V1.21.0,1.8.1,1.21.0,'Runnable(title, fn) .run(fn) when async when done() is invoked with a non-Error object should invoke the callback'
V1.21.0,1.8.1,1.21.0,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.21.0,1.8.1,1.21.0,'serial hooks one'
V1.21.0,1.8.1,1.21.0,'serial hooks two'
V1.21.0,1.8.1,1.21.0,'serial hooks three'
V1.21.0,1.8.1,1.21.0,'serial hooks "after all" hook'
V1.21.0,1.8.2,1.21.0,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.0,1.8.2,1.21.0,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.0,1.8.2,1.21.0,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.0,1.8.2,1.21.0,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.0,1.8.2,1.21.0,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.21.0,1.8.2,1.21.0,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.21.0,1.8.2,1.21.0,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.21.0,1.8.2,1.21.0,'Runnable(title, fn) #enableTimeouts(enabled) should set enabled'
V1.21.0,1.8.2,1.21.0,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.21.0,1.8.2,1.21.0,'Runnable(title, fn) .run(fn) when timeouts are disabled should not error with timeout'
V1.21.0,1.8.2,1.21.0,'Runnable(title, fn) .run(fn) when async when done() is invoked with a non-Error object should invoke the callback'
V1.21.0,1.8.2,1.21.0,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.21.0,1.8.2,1.21.0,'serial hooks one'
V1.21.0,1.8.2,1.21.0,'serial hooks two'
V1.21.0,1.8.2,1.21.0,'serial hooks three'
V1.21.0,1.8.2,1.21.0,'serial hooks "after all" hook'
V1.21.0,1.9.0,1.21.0,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.0,1.9.0,1.21.0,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.0,1.9.0,1.21.0,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.0,1.9.0,1.21.0,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.0,1.9.0,1.21.0,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.21.0,1.9.0,1.21.0,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.21.0,1.9.0,1.21.0,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.21.0,1.9.0,1.21.0,'Runnable(title, fn) #enableTimeouts(enabled) should set enabled'
V1.21.0,1.9.0,1.21.0,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.21.0,1.9.0,1.21.0,'Runnable(title, fn) .run(fn) when timeouts are disabled should not error with timeout'
V1.21.0,1.9.0,1.21.0,'Runnable(title, fn) .run(fn) when async when done() is invoked with a non-Error object should invoke the callback'
V1.21.0,1.9.0,1.21.0,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.21.0,1.9.0,1.21.0,'serial hooks one'
V1.21.0,1.9.0,1.21.0,'serial hooks two'
V1.21.0,1.9.0,1.21.0,'serial hooks three'
V1.21.0,1.9.0,1.21.0,'serial hooks "after all" hook'
V1.21.0,1.10.0,1.21.0,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.0,1.10.0,1.21.0,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.0,1.10.0,1.21.0,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.0,1.10.0,1.21.0,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.0,1.10.0,1.21.0,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.21.0,1.10.0,1.21.0,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.21.0,1.10.0,1.21.0,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.21.0,1.10.0,1.21.0,'Runnable(title, fn) #enableTimeouts(enabled) should set enabled'
V1.21.0,1.10.0,1.21.0,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.21.0,1.10.0,1.21.0,'Runnable(title, fn) .run(fn) when timeouts are disabled should not error with timeout'
V1.21.0,1.10.0,1.21.0,'Runnable(title, fn) .run(fn) when async when done() is invoked with a non-Error object should invoke the callback'
V1.21.0,1.10.0,1.21.0,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.21.0,1.10.0,1.21.0,'serial hooks one'
V1.21.0,1.10.0,1.21.0,'serial hooks two'
V1.21.0,1.10.0,1.21.0,'serial hooks three'
V1.21.0,1.10.0,1.21.0,'serial hooks "after all" hook'
V1.21.0,1.11.0,1.21.0,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.0,1.11.0,1.21.0,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.0,1.11.0,1.21.0,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.0,1.11.0,1.21.0,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.0,1.11.0,1.21.0,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.21.0,1.11.0,1.21.0,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.21.0,1.11.0,1.21.0,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.21.0,1.11.0,1.21.0,'Runnable(title, fn) #enableTimeouts(enabled) should set enabled'
V1.21.0,1.11.0,1.21.0,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.21.0,1.11.0,1.21.0,'Runnable(title, fn) .run(fn) when timeouts are disabled should not error with timeout'
V1.21.0,1.11.0,1.21.0,'Runnable(title, fn) .run(fn) when async when done() is invoked with a non-Error object should invoke the callback'
V1.21.0,1.11.0,1.21.0,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.21.0,1.11.0,1.21.0,'serial hooks one'
V1.21.0,1.11.0,1.21.0,'serial hooks two'
V1.21.0,1.11.0,1.21.0,'serial hooks three'
V1.21.0,1.11.0,1.21.0,'serial hooks "after all" hook'
V1.21.0,1.12.0,1.21.0,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.0,1.12.0,1.21.0,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.0,1.12.0,1.21.0,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.0,1.12.0,1.21.0,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.0,1.12.0,1.21.0,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.21.0,1.12.0,1.21.0,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.21.0,1.12.0,1.21.0,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.21.0,1.12.0,1.21.0,'Runnable(title, fn) #enableTimeouts(enabled) should set enabled'
V1.21.0,1.12.0,1.21.0,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.21.0,1.12.0,1.21.0,'Runnable(title, fn) .run(fn) when timeouts are disabled should not error with timeout'
V1.21.0,1.12.0,1.21.0,'Runnable(title, fn) .run(fn) when async when done() is invoked with a non-Error object should invoke the callback'
V1.21.0,1.12.0,1.21.0,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.21.0,1.12.0,1.21.0,'timeouts disabling should allow overriding per-test'
V1.21.0,1.12.1,1.21.0,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.0,1.12.1,1.21.0,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.0,1.12.1,1.21.0,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.0,1.12.1,1.21.0,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.0,1.12.1,1.21.0,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.21.0,1.12.1,1.21.0,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.21.0,1.12.1,1.21.0,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.21.0,1.12.1,1.21.0,'Runnable(title, fn) #enableTimeouts(enabled) should set enabled'
V1.21.0,1.12.1,1.21.0,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.21.0,1.12.1,1.21.0,'Runnable(title, fn) .run(fn) when timeouts are disabled should not error with timeout'
V1.21.0,1.12.1,1.21.0,'Runnable(title, fn) .run(fn) when async when done() is invoked with a non-Error object should invoke the callback'
V1.21.0,1.12.1,1.21.0,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.21.0,1.12.1,1.21.0,'timeouts disabling should allow overriding per-test'
V1.21.0,1.13.0,1.21.0,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.0,1.13.0,1.21.0,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.0,1.13.0,1.21.0,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.0,1.13.0,1.21.0,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.0,1.13.0,1.21.0,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.21.0,1.13.0,1.21.0,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.21.0,1.13.0,1.21.0,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.21.0,1.13.0,1.21.0,'Runnable(title, fn) #enableTimeouts(enabled) should set enabled'
V1.21.0,1.13.0,1.21.0,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.21.0,1.13.0,1.21.0,'Runnable(title, fn) .run(fn) when timeouts are disabled should not error with timeout'
V1.21.0,1.13.0,1.21.0,'Runnable(title, fn) .run(fn) when async when done() is invoked with a non-Error object should invoke the callback'
V1.21.0,1.13.0,1.21.0,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.21.0,1.13.0,1.21.0,'timeouts disabling should allow overriding per-test'
V1.21.0,1.14.0,1.21.0,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.0,1.14.0,1.21.0,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.0,1.14.0,1.21.0,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.0,1.14.0,1.21.0,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.0,1.14.0,1.21.0,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.21.0,1.14.0,1.21.0,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.21.0,1.14.0,1.21.0,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.21.0,1.14.0,1.21.0,'Runnable(title, fn) #enableTimeouts(enabled) should set enabled'
V1.21.0,1.14.0,1.21.0,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.21.0,1.14.0,1.21.0,'Runnable(title, fn) .run(fn) when timeouts are disabled should not error with timeout'
V1.21.0,1.14.0,1.21.0,'Runnable(title, fn) .run(fn) when async when done() is invoked with a non-Error object should invoke the callback'
V1.21.0,1.14.0,1.21.0,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.21.0,1.14.0,1.21.0,'timeouts disabling should allow overriding per-test'
V1.21.0,1.14.0-mwo1,1.21.0,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.0,1.14.0-mwo1,1.21.0,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.0,1.14.0-mwo1,1.21.0,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.0,1.14.0-mwo1,1.21.0,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.0,1.14.0-mwo1,1.21.0,'Runner .checkGlobals(test) should emit "fail" when a single new disallowed global is introduced after a single extra global is allowed'
V1.21.0,1.14.0-mwo1,1.21.0,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.21.0,1.14.0-mwo1,1.21.0,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.21.0,1.14.0-mwo1,1.21.0,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.21.0,1.14.0-mwo1,1.21.0,'Runnable(title, fn) #enableTimeouts(enabled) should set enabled'
V1.21.0,1.14.0-mwo1,1.21.0,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.21.0,1.14.0-mwo1,1.21.0,'Runnable(title, fn) .run(fn) when timeouts are disabled should not error with timeout'
V1.21.0,1.14.0-mwo1,1.21.0,'Runnable(title, fn) .run(fn) when async when done() is invoked with a non-Error object should invoke the callback'
V1.21.0,1.14.0-mwo1,1.21.0,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.21.0,1.14.0-mwo1,1.21.0,'timeouts disabling should allow overriding per-test'
V1.21.0,1.15.0,1.21.0,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.0,1.15.0,1.21.0,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.0,1.15.0,1.21.0,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.0,1.15.0,1.21.0,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.0,1.15.0,1.21.0,'Runner .checkGlobals(test) should emit "fail" when a single new disallowed global is introduced after a single extra global is allowed'
V1.21.0,1.15.0,1.21.0,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.21.0,1.15.0,1.21.0,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.21.0,1.15.0,1.21.0,'Runnable(title, fn) #enableTimeouts(enabled) should set enabled'
V1.21.0,1.15.0,1.21.0,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.21.0,1.15.0,1.21.0,'Runnable(title, fn) .run(fn) when timeouts are disabled should not error with timeout'
V1.21.0,1.15.0,1.21.0,'Runnable(title, fn) .run(fn) when async when done() is invoked with a non-Error object should invoke the callback'
V1.21.0,1.15.0,1.21.0,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.21.0,1.15.0,1.21.0,'timeouts disabling should allow overriding per-test'
V1.21.0,1.15.1,1.21.0,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.0,1.15.1,1.21.0,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.0,1.15.1,1.21.0,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.0,1.15.1,1.21.0,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.0,1.15.1,1.21.0,'Runner .checkGlobals(test) should emit "fail" when a single new disallowed global is introduced after a single extra global is allowed'
V1.21.0,1.15.1,1.21.0,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.21.0,1.15.1,1.21.0,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.21.0,1.15.1,1.21.0,'Runnable(title, fn) #enableTimeouts(enabled) should set enabled'
V1.21.0,1.15.1,1.21.0,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.21.0,1.15.1,1.21.0,'Runnable(title, fn) .run(fn) when timeouts are disabled should not error with timeout'
V1.21.0,1.15.1,1.21.0,'Runnable(title, fn) .run(fn) when async when done() is invoked with a non-Error object should invoke the callback'
V1.21.0,1.15.1,1.21.0,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.21.0,1.15.1,1.21.0,'timeouts disabling should allow overriding per-test'
V1.21.0,1.16.0,1.21.0,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.0,1.16.0,1.21.0,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.0,1.16.0,1.21.0,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.0,1.16.0,1.21.0,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.0,1.16.0,1.21.0,'Runner .checkGlobals(test) should emit "fail" when a single new disallowed global is introduced after a single extra global is allowed'
V1.21.0,1.16.0,1.21.0,'Runnable(title, fn) #enableTimeouts(enabled) should set enabled'
V1.21.0,1.16.0,1.21.0,'Runnable(title, fn) .run(fn) when timeouts are disabled should not error with timeout'
V1.21.0,1.16.0,1.21.0,'Runnable(title, fn) .run(fn) when async when done() is invoked with a non-Error object should invoke the callback'
V1.21.0,1.16.0,1.21.0,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.21.0,1.16.0,1.21.0,'timeouts disabling should allow overriding per-test'
V1.21.0,1.16.1,1.21.0,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.0,1.16.1,1.21.0,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.0,1.16.1,1.21.0,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.0,1.16.1,1.21.0,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.0,1.16.1,1.21.0,'Runner .checkGlobals(test) should emit "fail" when a single new disallowed global is introduced after a single extra global is allowed'
V1.21.0,1.16.1,1.21.0,'Runnable(title, fn) #enableTimeouts(enabled) should set enabled'
V1.21.0,1.16.1,1.21.0,'Runnable(title, fn) .run(fn) when timeouts are disabled should not error with timeout'
V1.21.0,1.16.1,1.21.0,'Runnable(title, fn) .run(fn) when async when done() is invoked with a non-Error object should invoke the callback'
V1.21.0,1.16.1,1.21.0,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.21.0,1.16.1,1.21.0,'timeouts disabling should allow overriding per-test'
V1.21.0,1.16.2,1.21.0,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.0,1.16.2,1.21.0,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.0,1.16.2,1.21.0,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.0,1.16.2,1.21.0,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.0,1.16.2,1.21.0,'Runner .checkGlobals(test) should emit "fail" when a single new disallowed global is introduced after a single extra global is allowed'
V1.21.0,1.16.2,1.21.0,'Runnable(title, fn) #enableTimeouts(enabled) should set enabled'
V1.21.0,1.16.2,1.21.0,'Runnable(title, fn) .run(fn) when timeouts are disabled should not error with timeout'
V1.21.0,1.16.2,1.21.0,'Runnable(title, fn) .run(fn) when async when done() is invoked with a non-Error object should invoke the callback'
V1.21.0,1.16.2,1.21.0,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.21.0,1.16.2,1.21.0,'timeouts disabling should allow overriding per-test'
V1.21.0,1.17.0,1.21.0,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.0,1.17.0,1.21.0,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.0,1.17.0,1.21.0,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.0,1.17.0,1.21.0,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.0,1.17.0,1.21.0,'Runner .checkGlobals(test) should emit "fail" when a single new disallowed global is introduced after a single extra global is allowed'
V1.21.0,1.17.0,1.21.0,'Runnable(title, fn) #enableTimeouts(enabled) should set enabled'
V1.21.0,1.17.0,1.21.0,'Runnable(title, fn) .run(fn) when timeouts are disabled should not error with timeout'
V1.21.0,1.17.0,1.21.0,'Runnable(title, fn) .run(fn) when async when done() is invoked with a non-Error object should invoke the callback'
V1.21.0,1.17.0,1.21.0,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.21.0,1.17.0,1.21.0,'timeouts disabling should allow overriding per-test'
V1.21.0,1.17.1,1.21.0,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.0,1.17.1,1.21.0,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.0,1.17.1,1.21.0,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.0,1.17.1,1.21.0,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.0,1.17.1,1.21.0,'Runnable(title, fn) #enableTimeouts(enabled) should set enabled'
V1.21.0,1.17.1,1.21.0,'Runnable(title, fn) .run(fn) when timeouts are disabled should not error with timeout'
V1.21.0,1.17.1,1.21.0,'Runnable(title, fn) .run(fn) when async when done() is invoked with a non-Error object should invoke the callback'
V1.21.0,1.17.1,1.21.0,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.21.0,1.17.1,1.21.0,'timeouts disabling should allow overriding per-test'
V1.21.0,1.18.0,1.21.0,'Runnable(title, fn) #enableTimeouts(enabled) should set enabled'
V1.21.0,1.18.0,1.21.0,'Runnable(title, fn) .run(fn) when timeouts are disabled should not error with timeout'
V1.21.0,1.18.0,1.21.0,'Runnable(title, fn) .run(fn) when async when done() is invoked with a non-Error object should invoke the callback'
V1.21.0,1.18.0,1.21.0,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected without a reason should invoke the callback'
V1.21.0,1.18.0,1.21.0,'timeouts disabling should allow overriding per-test'
V1.21.0,1.18.1,1.21.0,'Runnable(title, fn) #enableTimeouts(enabled) should set enabled'
V1.21.0,1.18.1,1.21.0,'Runnable(title, fn) .run(fn) when timeouts are disabled should not error with timeout'
V1.21.0,1.18.1,1.21.0,'Runnable(title, fn) .run(fn) when async when done() is invoked with a non-Error object should invoke the callback'
V1.21.0,1.18.1,1.21.0,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected without a reason should invoke the callback'
V1.21.0,1.18.1,1.21.0,'timeouts disabling should allow overriding per-test'
V1.21.0,1.18.2,1.21.0,'Runnable(title, fn) #enableTimeouts(enabled) should set enabled'
V1.21.0,1.18.2,1.21.0,'Runnable(title, fn) .run(fn) when timeouts are disabled should not error with timeout'
V1.21.0,1.18.2,1.21.0,'Runnable(title, fn) .run(fn) when async when done() is invoked with a non-Error object should invoke the callback'
V1.21.0,1.18.2,1.21.0,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected without a reason should invoke the callback'
V1.21.0,1.18.2,1.21.0,'timeouts disabling should allow overriding per-test'
V1.21.0,1.19.0,1.21.0,'Runnable(title, fn) #enableTimeouts(enabled) should set enabled'
V1.21.0,1.19.0,1.21.0,'Runnable(title, fn) .run(fn) when timeouts are disabled should not error with timeout'
V1.21.0,1.19.0,1.21.0,'Runnable(title, fn) .run(fn) when async when done() is invoked with a non-Error object should invoke the callback'
V1.21.0,1.19.0,1.21.0,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected without a reason should invoke the callback'
V1.21.0,1.19.0,1.21.0,'timeouts disabling should allow overriding per-test'
V1.21.0,1.20.0,1.21.0,'Runnable(title, fn) #enableTimeouts(enabled) should set enabled'
V1.21.0,1.20.0,1.21.0,'Runnable(title, fn) .run(fn) when timeouts are disabled should not error with timeout'
V1.21.0,1.20.0,1.21.0,'Runnable(title, fn) .run(fn) when async when done() is invoked with a non-Error object should invoke the callback'
V1.21.0,1.20.0,1.21.0,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected without a reason should invoke the callback'
V1.21.0,1.20.0,1.21.0,'timeouts disabling should allow overriding per-test'
V1.21.0,1.20.1,1.21.0,'Runnable(title, fn) #enableTimeouts(enabled) should set enabled'
V1.21.0,1.20.1,1.21.0,'Runnable(title, fn) .run(fn) when timeouts are disabled should not error with timeout'
V1.21.0,1.20.1,1.21.0,'Runnable(title, fn) .run(fn) when async when done() is invoked with a non-Error object should invoke the callback'
V1.21.0,1.20.1,1.21.0,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected without a reason should invoke the callback'
V1.21.0,1.20.1,1.21.0,'timeouts disabling should allow overriding per-test'
V1.21.1,1.0.0,1.21.1,'Suite .clone() should copy the slow value'
V1.21.1,1.0.0,1.21.1,'Suite .slow() when given a string should parse it'
V1.21.1,1.0.0,1.21.1,'Suite .slow() when no argument is passed should return the slow value'
V1.21.1,1.0.0,1.21.1,'Suite .slow() when argument is passed should return the Suite object'
V1.21.1,1.0.0,1.21.1,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.1,1.0.0,1.21.1,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.1,1.0.0,1.21.1,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.1,1.0.0,1.21.1,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.1,1.0.0,1.21.1,'Suite .addSuite() "before each" hook'
V1.21.1,1.0.1,1.21.1,'Suite .clone() should copy the slow value'
V1.21.1,1.0.1,1.21.1,'Suite .slow() when given a string should parse it'
V1.21.1,1.0.1,1.21.1,'Suite .slow() when no argument is passed should return the slow value'
V1.21.1,1.0.1,1.21.1,'Suite .slow() when argument is passed should return the Suite object'
V1.21.1,1.0.1,1.21.1,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.1,1.0.1,1.21.1,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.1,1.0.1,1.21.1,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.1,1.0.1,1.21.1,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.1,1.0.1,1.21.1,'Suite .addSuite() "before each" hook'
V1.21.1,1.0.2,1.21.1,'Suite .clone() should copy the slow value'
V1.21.1,1.0.2,1.21.1,'Suite .slow() when given a string should parse it'
V1.21.1,1.0.2,1.21.1,'Suite .slow() when no argument is passed should return the slow value'
V1.21.1,1.0.2,1.21.1,'Suite .slow() when argument is passed should return the Suite object'
V1.21.1,1.0.2,1.21.1,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.1,1.0.2,1.21.1,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.1,1.0.2,1.21.1,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.1,1.0.2,1.21.1,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.1,1.0.2,1.21.1,'Suite .addSuite() "before each" hook'
V1.21.1,1.0.3,1.21.1,'Suite .clone() should copy the slow value'
V1.21.1,1.0.3,1.21.1,'Suite .slow() when given a string should parse it'
V1.21.1,1.0.3,1.21.1,'Suite .slow() when no argument is passed should return the slow value'
V1.21.1,1.0.3,1.21.1,'Suite .slow() when argument is passed should return the Suite object'
V1.21.1,1.0.3,1.21.1,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.1,1.0.3,1.21.1,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.1,1.0.3,1.21.1,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.1,1.0.3,1.21.1,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.1,1.0.3,1.21.1,'Suite .addSuite() "before each" hook'
V1.21.1,1.1.0,1.21.1,'Suite .clone() should copy the slow value'
V1.21.1,1.1.0,1.21.1,'Suite .slow() when given a string should parse it'
V1.21.1,1.1.0,1.21.1,'Suite .slow() when no argument is passed should return the slow value'
V1.21.1,1.1.0,1.21.1,'Suite .slow() when argument is passed should return the Suite object'
V1.21.1,1.1.0,1.21.1,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.1,1.1.0,1.21.1,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.1,1.1.0,1.21.1,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.1,1.1.0,1.21.1,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.1,1.1.0,1.21.1,'Suite .addSuite() "before each" hook'
V1.21.1,1.2.0,1.21.1,'Suite .clone() should copy the slow value'
V1.21.1,1.2.0,1.21.1,'Suite .slow() when given a string should parse it'
V1.21.1,1.2.0,1.21.1,'Suite .slow() when no argument is passed should return the slow value'
V1.21.1,1.2.0,1.21.1,'Suite .slow() when argument is passed should return the Suite object'
V1.21.1,1.2.0,1.21.1,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.1,1.2.0,1.21.1,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.1,1.2.0,1.21.1,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.1,1.2.0,1.21.1,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.1,1.2.0,1.21.1,'Suite .addSuite() "before each" hook'
V1.21.1,1.2.1,1.21.1,'Suite .clone() should copy the slow value'
V1.21.1,1.2.1,1.21.1,'Suite .slow() when given a string should parse it'
V1.21.1,1.2.1,1.21.1,'Suite .slow() when no argument is passed should return the slow value'
V1.21.1,1.2.1,1.21.1,'Suite .slow() when argument is passed should return the Suite object'
V1.21.1,1.2.1,1.21.1,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.1,1.2.1,1.21.1,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.1,1.2.1,1.21.1,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.1,1.2.1,1.21.1,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.1,1.2.1,1.21.1,'Suite .addSuite() "before each" hook'
V1.21.1,1.2.2,1.21.1,'Suite .clone() should copy the slow value'
V1.21.1,1.2.2,1.21.1,'Suite .slow() when given a string should parse it'
V1.21.1,1.2.2,1.21.1,'Suite .slow() when no argument is passed should return the slow value'
V1.21.1,1.2.2,1.21.1,'Suite .slow() when argument is passed should return the Suite object'
V1.21.1,1.2.2,1.21.1,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.1,1.2.2,1.21.1,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.1,1.2.2,1.21.1,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.1,1.2.2,1.21.1,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.1,1.2.2,1.21.1,'Suite .addSuite() "before each" hook'
V1.21.1,1.3.0,1.21.1,'Suite .clone() should copy the slow value'
V1.21.1,1.3.0,1.21.1,'Suite .slow() when given a string should parse it'
V1.21.1,1.3.0,1.21.1,'Suite .slow() when no argument is passed should return the slow value'
V1.21.1,1.3.0,1.21.1,'Suite .slow() when argument is passed should return the Suite object'
V1.21.1,1.3.0,1.21.1,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.1,1.3.0,1.21.1,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.1,1.3.0,1.21.1,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.1,1.3.0,1.21.1,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.1,1.3.0,1.21.1,'Suite .addSuite() "before each" hook'
V1.21.1,1.3.1,1.21.1,'Suite .clone() should copy the slow value'
V1.21.1,1.3.1,1.21.1,'Suite .slow() when given a string should parse it'
V1.21.1,1.3.1,1.21.1,'Suite .slow() when no argument is passed should return the slow value'
V1.21.1,1.3.1,1.21.1,'Suite .slow() when argument is passed should return the Suite object'
V1.21.1,1.3.1,1.21.1,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.1,1.3.1,1.21.1,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.1,1.3.1,1.21.1,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.1,1.3.1,1.21.1,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.1,1.3.1,1.21.1,'Suite .addSuite() "before each" hook'
V1.21.1,1.3.2,1.21.1,'Suite .clone() should copy the slow value'
V1.21.1,1.3.2,1.21.1,'Suite .slow() when given a string should parse it'
V1.21.1,1.3.2,1.21.1,'Suite .slow() when no argument is passed should return the slow value'
V1.21.1,1.3.2,1.21.1,'Suite .slow() when argument is passed should return the Suite object'
V1.21.1,1.3.2,1.21.1,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.1,1.3.2,1.21.1,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.1,1.3.2,1.21.1,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.1,1.3.2,1.21.1,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.1,1.3.2,1.21.1,'Suite .addSuite() "before each" hook'
V1.21.1,1.4.0,1.21.1,'Suite .clone() should copy the slow value'
V1.21.1,1.4.0,1.21.1,'Suite .slow() when given a string should parse it'
V1.21.1,1.4.0,1.21.1,'Suite .slow() when no argument is passed should return the slow value'
V1.21.1,1.4.0,1.21.1,'Suite .slow() when argument is passed should return the Suite object'
V1.21.1,1.4.0,1.21.1,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.1,1.4.0,1.21.1,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.1,1.4.0,1.21.1,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.1,1.4.0,1.21.1,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.1,1.4.0,1.21.1,'Suite .addSuite() "before each" hook'
V1.21.1,1.4.1,1.21.1,'Suite .clone() should copy the slow value'
V1.21.1,1.4.1,1.21.1,'Suite .slow() when given a string should parse it'
V1.21.1,1.4.1,1.21.1,'Suite .slow() when no argument is passed should return the slow value'
V1.21.1,1.4.1,1.21.1,'Suite .slow() when argument is passed should return the Suite object'
V1.21.1,1.4.1,1.21.1,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.1,1.4.1,1.21.1,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.1,1.4.1,1.21.1,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.1,1.4.1,1.21.1,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.1,1.4.1,1.21.1,'Suite .addSuite() "before each" hook'
V1.21.1,1.4.2,1.21.1,'Suite .clone() should copy the slow value'
V1.21.1,1.4.2,1.21.1,'Suite .slow() when given a string should parse it'
V1.21.1,1.4.2,1.21.1,'Suite .slow() when no argument is passed should return the slow value'
V1.21.1,1.4.2,1.21.1,'Suite .slow() when argument is passed should return the Suite object'
V1.21.1,1.4.2,1.21.1,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.1,1.4.2,1.21.1,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.1,1.4.2,1.21.1,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.1,1.4.2,1.21.1,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.1,1.4.2,1.21.1,'Suite .addSuite() "before each" hook'
V1.21.1,1.5.0,1.21.1,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.1,1.5.0,1.21.1,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.1,1.5.0,1.21.1,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.1,1.5.0,1.21.1,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.1,1.5.0,1.21.1,'Runner .globalProps() should include common non enumerable globals'
V1.21.1,1.5.0,1.21.1,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.21.1,1.5.0,1.21.1,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.21.1,1.5.0,1.21.1,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.21.1,1.5.0,1.21.1,'Runnable(title, fn) #enableTimeouts(enabled) should set enabled'
V1.21.1,1.5.0,1.21.1,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.21.1,1.5.0,1.21.1,'Runnable(title, fn) .run(fn) when timeouts are disabled should not error with timeout'
V1.21.1,1.5.0,1.21.1,'Runnable(title, fn) .run(fn) when async when done() is invoked with a non-Error object should invoke the callback'
V1.21.1,1.5.0,1.21.1,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.21.1,1.5.0,1.21.1,'serial hooks one'
V1.21.1,1.5.0,1.21.1,'serial hooks two'
V1.21.1,1.5.0,1.21.1,'serial hooks three'
V1.21.1,1.5.0,1.21.1,'serial hooks "after all" hook'
V1.21.1,1.6.0,1.21.1,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.1,1.6.0,1.21.1,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.1,1.6.0,1.21.1,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.1,1.6.0,1.21.1,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.1,1.6.0,1.21.1,'Runner .globalProps() should include common non enumerable globals'
V1.21.1,1.6.0,1.21.1,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.21.1,1.6.0,1.21.1,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.21.1,1.6.0,1.21.1,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.21.1,1.6.0,1.21.1,'Runnable(title, fn) #enableTimeouts(enabled) should set enabled'
V1.21.1,1.6.0,1.21.1,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.21.1,1.6.0,1.21.1,'Runnable(title, fn) .run(fn) when timeouts are disabled should not error with timeout'
V1.21.1,1.6.0,1.21.1,'Runnable(title, fn) .run(fn) when async when done() is invoked with a non-Error object should invoke the callback'
V1.21.1,1.6.0,1.21.1,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.21.1,1.6.0,1.21.1,'serial hooks one'
V1.21.1,1.6.0,1.21.1,'serial hooks two'
V1.21.1,1.6.0,1.21.1,'serial hooks three'
V1.21.1,1.6.0,1.21.1,'serial hooks "after all" hook'
V1.21.1,1.7.0,1.21.1,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.1,1.7.0,1.21.1,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.1,1.7.0,1.21.1,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.1,1.7.0,1.21.1,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.1,1.7.0,1.21.1,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.21.1,1.7.0,1.21.1,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.21.1,1.7.0,1.21.1,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.21.1,1.7.0,1.21.1,'Runnable(title, fn) #enableTimeouts(enabled) should set enabled'
V1.21.1,1.7.0,1.21.1,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.21.1,1.7.0,1.21.1,'Runnable(title, fn) .run(fn) when timeouts are disabled should not error with timeout'
V1.21.1,1.7.0,1.21.1,'Runnable(title, fn) .run(fn) when async when done() is invoked with a non-Error object should invoke the callback'
V1.21.1,1.7.0,1.21.1,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.21.1,1.7.0,1.21.1,'serial hooks one'
V1.21.1,1.7.0,1.21.1,'serial hooks two'
V1.21.1,1.7.0,1.21.1,'serial hooks three'
V1.21.1,1.7.0,1.21.1,'serial hooks "after all" hook'
V1.21.1,1.7.1,1.21.1,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.1,1.7.1,1.21.1,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.1,1.7.1,1.21.1,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.1,1.7.1,1.21.1,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.1,1.7.1,1.21.1,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.21.1,1.7.1,1.21.1,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.21.1,1.7.1,1.21.1,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.21.1,1.7.1,1.21.1,'Runnable(title, fn) #enableTimeouts(enabled) should set enabled'
V1.21.1,1.7.1,1.21.1,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.21.1,1.7.1,1.21.1,'Runnable(title, fn) .run(fn) when timeouts are disabled should not error with timeout'
V1.21.1,1.7.1,1.21.1,'Runnable(title, fn) .run(fn) when async when done() is invoked with a non-Error object should invoke the callback'
V1.21.1,1.7.1,1.21.1,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.21.1,1.7.1,1.21.1,'serial hooks one'
V1.21.1,1.7.1,1.21.1,'serial hooks two'
V1.21.1,1.7.1,1.21.1,'serial hooks three'
V1.21.1,1.7.1,1.21.1,'serial hooks "after all" hook'
V1.21.1,1.7.2,1.21.1,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.1,1.7.2,1.21.1,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.1,1.7.2,1.21.1,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.1,1.7.2,1.21.1,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.1,1.7.2,1.21.1,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.21.1,1.7.2,1.21.1,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.21.1,1.7.2,1.21.1,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.21.1,1.7.2,1.21.1,'Runnable(title, fn) #enableTimeouts(enabled) should set enabled'
V1.21.1,1.7.2,1.21.1,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.21.1,1.7.2,1.21.1,'Runnable(title, fn) .run(fn) when timeouts are disabled should not error with timeout'
V1.21.1,1.7.2,1.21.1,'Runnable(title, fn) .run(fn) when async when done() is invoked with a non-Error object should invoke the callback'
V1.21.1,1.7.2,1.21.1,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.21.1,1.7.2,1.21.1,'serial hooks one'
V1.21.1,1.7.2,1.21.1,'serial hooks two'
V1.21.1,1.7.2,1.21.1,'serial hooks three'
V1.21.1,1.7.2,1.21.1,'serial hooks "after all" hook'
V1.21.1,1.7.3,1.21.1,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.1,1.7.3,1.21.1,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.1,1.7.3,1.21.1,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.1,1.7.3,1.21.1,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.1,1.7.3,1.21.1,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.21.1,1.7.3,1.21.1,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.21.1,1.7.3,1.21.1,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.21.1,1.7.3,1.21.1,'Runnable(title, fn) #enableTimeouts(enabled) should set enabled'
V1.21.1,1.7.3,1.21.1,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.21.1,1.7.3,1.21.1,'Runnable(title, fn) .run(fn) when timeouts are disabled should not error with timeout'
V1.21.1,1.7.3,1.21.1,'Runnable(title, fn) .run(fn) when async when done() is invoked with a non-Error object should invoke the callback'
V1.21.1,1.7.3,1.21.1,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.21.1,1.7.3,1.21.1,'serial hooks one'
V1.21.1,1.7.3,1.21.1,'serial hooks two'
V1.21.1,1.7.3,1.21.1,'serial hooks three'
V1.21.1,1.7.3,1.21.1,'serial hooks "after all" hook'
V1.21.1,1.7.4,1.21.1,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.1,1.7.4,1.21.1,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.1,1.7.4,1.21.1,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.1,1.7.4,1.21.1,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.1,1.7.4,1.21.1,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.21.1,1.7.4,1.21.1,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.21.1,1.7.4,1.21.1,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.21.1,1.7.4,1.21.1,'Runnable(title, fn) #enableTimeouts(enabled) should set enabled'
V1.21.1,1.7.4,1.21.1,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.21.1,1.7.4,1.21.1,'Runnable(title, fn) .run(fn) when timeouts are disabled should not error with timeout'
V1.21.1,1.7.4,1.21.1,'Runnable(title, fn) .run(fn) when async when done() is invoked with a non-Error object should invoke the callback'
V1.21.1,1.7.4,1.21.1,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.21.1,1.7.4,1.21.1,'serial hooks one'
V1.21.1,1.7.4,1.21.1,'serial hooks two'
V1.21.1,1.7.4,1.21.1,'serial hooks three'
V1.21.1,1.7.4,1.21.1,'serial hooks "after all" hook'
V1.21.1,1.8.0,1.21.1,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.1,1.8.0,1.21.1,'serial hooks "after all" hook'
V1.21.1,1.8.1,1.21.1,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.1,1.8.1,1.21.1,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.1,1.8.1,1.21.1,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.1,1.8.1,1.21.1,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.1,1.8.1,1.21.1,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.21.1,1.8.1,1.21.1,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.21.1,1.8.1,1.21.1,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.21.1,1.8.1,1.21.1,'Runnable(title, fn) #enableTimeouts(enabled) should set enabled'
V1.21.1,1.8.1,1.21.1,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.21.1,1.8.1,1.21.1,'Runnable(title, fn) .run(fn) when timeouts are disabled should not error with timeout'
V1.21.1,1.8.1,1.21.1,'Runnable(title, fn) .run(fn) when async when done() is invoked with a non-Error object should invoke the callback'
V1.21.1,1.8.1,1.21.1,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.21.1,1.8.1,1.21.1,'serial hooks one'
V1.21.1,1.8.1,1.21.1,'serial hooks two'
V1.21.1,1.8.1,1.21.1,'serial hooks three'
V1.21.1,1.8.1,1.21.1,'serial hooks "after all" hook'
V1.21.1,1.8.2,1.21.1,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.1,1.8.2,1.21.1,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.1,1.8.2,1.21.1,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.1,1.8.2,1.21.1,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.1,1.8.2,1.21.1,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.21.1,1.8.2,1.21.1,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.21.1,1.8.2,1.21.1,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.21.1,1.8.2,1.21.1,'Runnable(title, fn) #enableTimeouts(enabled) should set enabled'
V1.21.1,1.8.2,1.21.1,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.21.1,1.8.2,1.21.1,'Runnable(title, fn) .run(fn) when timeouts are disabled should not error with timeout'
V1.21.1,1.8.2,1.21.1,'Runnable(title, fn) .run(fn) when async when done() is invoked with a non-Error object should invoke the callback'
V1.21.1,1.8.2,1.21.1,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.21.1,1.8.2,1.21.1,'serial hooks one'
V1.21.1,1.8.2,1.21.1,'serial hooks two'
V1.21.1,1.8.2,1.21.1,'serial hooks three'
V1.21.1,1.8.2,1.21.1,'serial hooks "after all" hook'
V1.21.1,1.9.0,1.21.1,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.1,1.9.0,1.21.1,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.1,1.9.0,1.21.1,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.1,1.9.0,1.21.1,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.1,1.9.0,1.21.1,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.21.1,1.9.0,1.21.1,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.21.1,1.9.0,1.21.1,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.21.1,1.9.0,1.21.1,'Runnable(title, fn) #enableTimeouts(enabled) should set enabled'
V1.21.1,1.9.0,1.21.1,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.21.1,1.9.0,1.21.1,'Runnable(title, fn) .run(fn) when timeouts are disabled should not error with timeout'
V1.21.1,1.9.0,1.21.1,'Runnable(title, fn) .run(fn) when async when done() is invoked with a non-Error object should invoke the callback'
V1.21.1,1.9.0,1.21.1,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.21.1,1.9.0,1.21.1,'serial hooks one'
V1.21.1,1.9.0,1.21.1,'serial hooks two'
V1.21.1,1.9.0,1.21.1,'serial hooks three'
V1.21.1,1.9.0,1.21.1,'serial hooks "after all" hook'
V1.21.1,1.10.0,1.21.1,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.1,1.10.0,1.21.1,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.1,1.10.0,1.21.1,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.1,1.10.0,1.21.1,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.1,1.10.0,1.21.1,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.21.1,1.10.0,1.21.1,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.21.1,1.10.0,1.21.1,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.21.1,1.10.0,1.21.1,'Runnable(title, fn) #enableTimeouts(enabled) should set enabled'
V1.21.1,1.10.0,1.21.1,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.21.1,1.10.0,1.21.1,'Runnable(title, fn) .run(fn) when timeouts are disabled should not error with timeout'
V1.21.1,1.10.0,1.21.1,'Runnable(title, fn) .run(fn) when async when done() is invoked with a non-Error object should invoke the callback'
V1.21.1,1.10.0,1.21.1,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.21.1,1.10.0,1.21.1,'serial hooks one'
V1.21.1,1.10.0,1.21.1,'serial hooks two'
V1.21.1,1.10.0,1.21.1,'serial hooks three'
V1.21.1,1.10.0,1.21.1,'serial hooks "after all" hook'
V1.21.1,1.11.0,1.21.1,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.1,1.11.0,1.21.1,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.1,1.11.0,1.21.1,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.1,1.11.0,1.21.1,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.1,1.11.0,1.21.1,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.21.1,1.11.0,1.21.1,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.21.1,1.11.0,1.21.1,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.21.1,1.11.0,1.21.1,'Runnable(title, fn) #enableTimeouts(enabled) should set enabled'
V1.21.1,1.11.0,1.21.1,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.21.1,1.11.0,1.21.1,'Runnable(title, fn) .run(fn) when timeouts are disabled should not error with timeout'
V1.21.1,1.11.0,1.21.1,'Runnable(title, fn) .run(fn) when async when done() is invoked with a non-Error object should invoke the callback'
V1.21.1,1.11.0,1.21.1,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.21.1,1.11.0,1.21.1,'serial hooks one'
V1.21.1,1.11.0,1.21.1,'serial hooks two'
V1.21.1,1.11.0,1.21.1,'serial hooks three'
V1.21.1,1.11.0,1.21.1,'serial hooks "after all" hook'
V1.21.1,1.12.0,1.21.1,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.1,1.12.0,1.21.1,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.1,1.12.0,1.21.1,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.1,1.12.0,1.21.1,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.1,1.12.0,1.21.1,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.21.1,1.12.0,1.21.1,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.21.1,1.12.0,1.21.1,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.21.1,1.12.0,1.21.1,'Runnable(title, fn) #enableTimeouts(enabled) should set enabled'
V1.21.1,1.12.0,1.21.1,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.21.1,1.12.0,1.21.1,'Runnable(title, fn) .run(fn) when timeouts are disabled should not error with timeout'
V1.21.1,1.12.0,1.21.1,'Runnable(title, fn) .run(fn) when async when done() is invoked with a non-Error object should invoke the callback'
V1.21.1,1.12.0,1.21.1,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.21.1,1.12.0,1.21.1,'timeouts disabling should allow overriding per-test'
V1.21.1,1.12.1,1.21.1,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.1,1.12.1,1.21.1,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.1,1.12.1,1.21.1,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.1,1.12.1,1.21.1,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.1,1.12.1,1.21.1,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.21.1,1.12.1,1.21.1,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.21.1,1.12.1,1.21.1,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.21.1,1.12.1,1.21.1,'Runnable(title, fn) #enableTimeouts(enabled) should set enabled'
V1.21.1,1.12.1,1.21.1,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.21.1,1.12.1,1.21.1,'Runnable(title, fn) .run(fn) when timeouts are disabled should not error with timeout'
V1.21.1,1.12.1,1.21.1,'Runnable(title, fn) .run(fn) when async when done() is invoked with a non-Error object should invoke the callback'
V1.21.1,1.12.1,1.21.1,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.21.1,1.12.1,1.21.1,'timeouts disabling should allow overriding per-test'
V1.21.1,1.13.0,1.21.1,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.1,1.13.0,1.21.1,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.1,1.13.0,1.21.1,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.1,1.13.0,1.21.1,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.1,1.13.0,1.21.1,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.21.1,1.13.0,1.21.1,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.21.1,1.13.0,1.21.1,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.21.1,1.13.0,1.21.1,'Runnable(title, fn) #enableTimeouts(enabled) should set enabled'
V1.21.1,1.13.0,1.21.1,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.21.1,1.13.0,1.21.1,'Runnable(title, fn) .run(fn) when timeouts are disabled should not error with timeout'
V1.21.1,1.13.0,1.21.1,'Runnable(title, fn) .run(fn) when async when done() is invoked with a non-Error object should invoke the callback'
V1.21.1,1.13.0,1.21.1,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.21.1,1.13.0,1.21.1,'timeouts disabling should allow overriding per-test'
V1.21.1,1.14.0,1.21.1,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.1,1.14.0,1.21.1,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.1,1.14.0,1.21.1,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.1,1.14.0,1.21.1,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.1,1.14.0,1.21.1,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.21.1,1.14.0,1.21.1,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.21.1,1.14.0,1.21.1,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.21.1,1.14.0,1.21.1,'Runnable(title, fn) #enableTimeouts(enabled) should set enabled'
V1.21.1,1.14.0,1.21.1,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.21.1,1.14.0,1.21.1,'Runnable(title, fn) .run(fn) when timeouts are disabled should not error with timeout'
V1.21.1,1.14.0,1.21.1,'Runnable(title, fn) .run(fn) when async when done() is invoked with a non-Error object should invoke the callback'
V1.21.1,1.14.0,1.21.1,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.21.1,1.14.0,1.21.1,'timeouts disabling should allow overriding per-test'
V1.21.1,1.14.0-mwo1,1.21.1,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.1,1.14.0-mwo1,1.21.1,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.1,1.14.0-mwo1,1.21.1,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.1,1.14.0-mwo1,1.21.1,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.1,1.14.0-mwo1,1.21.1,'Runner .checkGlobals(test) should emit "fail" when a single new disallowed global is introduced after a single extra global is allowed'
V1.21.1,1.14.0-mwo1,1.21.1,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.21.1,1.14.0-mwo1,1.21.1,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.21.1,1.14.0-mwo1,1.21.1,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.21.1,1.14.0-mwo1,1.21.1,'Runnable(title, fn) #enableTimeouts(enabled) should set enabled'
V1.21.1,1.14.0-mwo1,1.21.1,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.21.1,1.14.0-mwo1,1.21.1,'Runnable(title, fn) .run(fn) when timeouts are disabled should not error with timeout'
V1.21.1,1.14.0-mwo1,1.21.1,'Runnable(title, fn) .run(fn) when async when done() is invoked with a non-Error object should invoke the callback'
V1.21.1,1.14.0-mwo1,1.21.1,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.21.1,1.14.0-mwo1,1.21.1,'timeouts disabling should allow overriding per-test'
V1.21.1,1.15.0,1.21.1,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.1,1.15.0,1.21.1,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.1,1.15.0,1.21.1,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.1,1.15.0,1.21.1,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.1,1.15.0,1.21.1,'Runner .checkGlobals(test) should emit "fail" when a single new disallowed global is introduced after a single extra global is allowed'
V1.21.1,1.15.0,1.21.1,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.21.1,1.15.0,1.21.1,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.21.1,1.15.0,1.21.1,'Runnable(title, fn) #enableTimeouts(enabled) should set enabled'
V1.21.1,1.15.0,1.21.1,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.21.1,1.15.0,1.21.1,'Runnable(title, fn) .run(fn) when timeouts are disabled should not error with timeout'
V1.21.1,1.15.0,1.21.1,'Runnable(title, fn) .run(fn) when async when done() is invoked with a non-Error object should invoke the callback'
V1.21.1,1.15.0,1.21.1,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.21.1,1.15.0,1.21.1,'timeouts disabling should allow overriding per-test'
V1.21.1,1.15.1,1.21.1,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.1,1.15.1,1.21.1,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.1,1.15.1,1.21.1,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.1,1.15.1,1.21.1,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.1,1.15.1,1.21.1,'Runner .checkGlobals(test) should emit "fail" when a single new disallowed global is introduced after a single extra global is allowed'
V1.21.1,1.15.1,1.21.1,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.21.1,1.15.1,1.21.1,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.21.1,1.15.1,1.21.1,'Runnable(title, fn) #enableTimeouts(enabled) should set enabled'
V1.21.1,1.15.1,1.21.1,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.21.1,1.15.1,1.21.1,'Runnable(title, fn) .run(fn) when timeouts are disabled should not error with timeout'
V1.21.1,1.15.1,1.21.1,'Runnable(title, fn) .run(fn) when async when done() is invoked with a non-Error object should invoke the callback'
V1.21.1,1.15.1,1.21.1,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.21.1,1.15.1,1.21.1,'timeouts disabling should allow overriding per-test'
V1.21.1,1.16.0,1.21.1,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.1,1.16.0,1.21.1,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.1,1.16.0,1.21.1,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.1,1.16.0,1.21.1,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.1,1.16.0,1.21.1,'Runner .checkGlobals(test) should emit "fail" when a single new disallowed global is introduced after a single extra global is allowed'
V1.21.1,1.16.0,1.21.1,'Runnable(title, fn) #enableTimeouts(enabled) should set enabled'
V1.21.1,1.16.0,1.21.1,'Runnable(title, fn) .run(fn) when timeouts are disabled should not error with timeout'
V1.21.1,1.16.0,1.21.1,'Runnable(title, fn) .run(fn) when async when done() is invoked with a non-Error object should invoke the callback'
V1.21.1,1.16.0,1.21.1,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.21.1,1.16.0,1.21.1,'timeouts disabling should allow overriding per-test'
V1.21.1,1.16.1,1.21.1,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.1,1.16.1,1.21.1,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.1,1.16.1,1.21.1,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.1,1.16.1,1.21.1,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.1,1.16.1,1.21.1,'Runner .checkGlobals(test) should emit "fail" when a single new disallowed global is introduced after a single extra global is allowed'
V1.21.1,1.16.1,1.21.1,'Runnable(title, fn) #enableTimeouts(enabled) should set enabled'
V1.21.1,1.16.1,1.21.1,'Runnable(title, fn) .run(fn) when timeouts are disabled should not error with timeout'
V1.21.1,1.16.1,1.21.1,'Runnable(title, fn) .run(fn) when async when done() is invoked with a non-Error object should invoke the callback'
V1.21.1,1.16.1,1.21.1,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.21.1,1.16.1,1.21.1,'timeouts disabling should allow overriding per-test'
V1.21.1,1.16.2,1.21.1,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.1,1.16.2,1.21.1,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.1,1.16.2,1.21.1,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.1,1.16.2,1.21.1,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.1,1.16.2,1.21.1,'Runner .checkGlobals(test) should emit "fail" when a single new disallowed global is introduced after a single extra global is allowed'
V1.21.1,1.16.2,1.21.1,'Runnable(title, fn) #enableTimeouts(enabled) should set enabled'
V1.21.1,1.16.2,1.21.1,'Runnable(title, fn) .run(fn) when timeouts are disabled should not error with timeout'
V1.21.1,1.16.2,1.21.1,'Runnable(title, fn) .run(fn) when async when done() is invoked with a non-Error object should invoke the callback'
V1.21.1,1.16.2,1.21.1,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.21.1,1.16.2,1.21.1,'timeouts disabling should allow overriding per-test'
V1.21.1,1.17.0,1.21.1,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.1,1.17.0,1.21.1,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.1,1.17.0,1.21.1,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.1,1.17.0,1.21.1,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.1,1.17.0,1.21.1,'Runner .checkGlobals(test) should emit "fail" when a single new disallowed global is introduced after a single extra global is allowed'
V1.21.1,1.17.0,1.21.1,'Runnable(title, fn) #enableTimeouts(enabled) should set enabled'
V1.21.1,1.17.0,1.21.1,'Runnable(title, fn) .run(fn) when timeouts are disabled should not error with timeout'
V1.21.1,1.17.0,1.21.1,'Runnable(title, fn) .run(fn) when async when done() is invoked with a non-Error object should invoke the callback'
V1.21.1,1.17.0,1.21.1,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.21.1,1.17.0,1.21.1,'timeouts disabling should allow overriding per-test'
V1.21.1,1.17.1,1.21.1,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.1,1.17.1,1.21.1,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.1,1.17.1,1.21.1,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.1,1.17.1,1.21.1,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.1,1.17.1,1.21.1,'Runnable(title, fn) #enableTimeouts(enabled) should set enabled'
V1.21.1,1.17.1,1.21.1,'Runnable(title, fn) .run(fn) when timeouts are disabled should not error with timeout'
V1.21.1,1.17.1,1.21.1,'Runnable(title, fn) .run(fn) when async when done() is invoked with a non-Error object should invoke the callback'
V1.21.1,1.17.1,1.21.1,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.21.1,1.17.1,1.21.1,'timeouts disabling should allow overriding per-test'
V1.21.1,1.18.0,1.21.1,'Runnable(title, fn) #enableTimeouts(enabled) should set enabled'
V1.21.1,1.18.0,1.21.1,'Runnable(title, fn) .run(fn) when timeouts are disabled should not error with timeout'
V1.21.1,1.18.0,1.21.1,'Runnable(title, fn) .run(fn) when async when done() is invoked with a non-Error object should invoke the callback'
V1.21.1,1.18.0,1.21.1,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected without a reason should invoke the callback'
V1.21.1,1.18.0,1.21.1,'timeouts disabling should allow overriding per-test'
V1.21.1,1.18.1,1.21.1,'Runnable(title, fn) #enableTimeouts(enabled) should set enabled'
V1.21.1,1.18.1,1.21.1,'Runnable(title, fn) .run(fn) when timeouts are disabled should not error with timeout'
V1.21.1,1.18.1,1.21.1,'Runnable(title, fn) .run(fn) when async when done() is invoked with a non-Error object should invoke the callback'
V1.21.1,1.18.1,1.21.1,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected without a reason should invoke the callback'
V1.21.1,1.18.1,1.21.1,'timeouts disabling should allow overriding per-test'
V1.21.1,1.18.2,1.21.1,'Runnable(title, fn) #enableTimeouts(enabled) should set enabled'
V1.21.1,1.18.2,1.21.1,'Runnable(title, fn) .run(fn) when timeouts are disabled should not error with timeout'
V1.21.1,1.18.2,1.21.1,'Runnable(title, fn) .run(fn) when async when done() is invoked with a non-Error object should invoke the callback'
V1.21.1,1.18.2,1.21.1,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected without a reason should invoke the callback'
V1.21.1,1.18.2,1.21.1,'timeouts disabling should allow overriding per-test'
V1.21.1,1.19.0,1.21.1,'Runnable(title, fn) #enableTimeouts(enabled) should set enabled'
V1.21.1,1.19.0,1.21.1,'Runnable(title, fn) .run(fn) when timeouts are disabled should not error with timeout'
V1.21.1,1.19.0,1.21.1,'Runnable(title, fn) .run(fn) when async when done() is invoked with a non-Error object should invoke the callback'
V1.21.1,1.19.0,1.21.1,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected without a reason should invoke the callback'
V1.21.1,1.19.0,1.21.1,'timeouts disabling should allow overriding per-test'
V1.21.1,1.20.0,1.21.1,'Runnable(title, fn) #enableTimeouts(enabled) should set enabled'
V1.21.1,1.20.0,1.21.1,'Runnable(title, fn) .run(fn) when timeouts are disabled should not error with timeout'
V1.21.1,1.20.0,1.21.1,'Runnable(title, fn) .run(fn) when async when done() is invoked with a non-Error object should invoke the callback'
V1.21.1,1.20.0,1.21.1,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected without a reason should invoke the callback'
V1.21.1,1.20.0,1.21.1,'timeouts disabling should allow overriding per-test'
V1.21.1,1.20.1,1.21.1,'Runnable(title, fn) #enableTimeouts(enabled) should set enabled'
V1.21.1,1.20.1,1.21.1,'Runnable(title, fn) .run(fn) when timeouts are disabled should not error with timeout'
V1.21.1,1.20.1,1.21.1,'Runnable(title, fn) .run(fn) when async when done() is invoked with a non-Error object should invoke the callback'
V1.21.1,1.20.1,1.21.1,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected without a reason should invoke the callback'
V1.21.1,1.20.1,1.21.1,'timeouts disabling should allow overriding per-test'
V1.21.2,1.0.0,1.21.2,'Suite .clone() should copy the slow value'
V1.21.2,1.0.0,1.21.2,'Suite .slow() when given a string should parse it'
V1.21.2,1.0.0,1.21.2,'Suite .slow() when no argument is passed should return the slow value'
V1.21.2,1.0.0,1.21.2,'Suite .slow() when argument is passed should return the Suite object'
V1.21.2,1.0.0,1.21.2,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.2,1.0.0,1.21.2,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.2,1.0.0,1.21.2,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.2,1.0.0,1.21.2,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.2,1.0.0,1.21.2,'Suite .addSuite() "before each" hook'
V1.21.2,1.0.1,1.21.2,'Suite .clone() should copy the slow value'
V1.21.2,1.0.1,1.21.2,'Suite .slow() when given a string should parse it'
V1.21.2,1.0.1,1.21.2,'Suite .slow() when no argument is passed should return the slow value'
V1.21.2,1.0.1,1.21.2,'Suite .slow() when argument is passed should return the Suite object'
V1.21.2,1.0.1,1.21.2,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.2,1.0.1,1.21.2,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.2,1.0.1,1.21.2,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.2,1.0.1,1.21.2,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.2,1.0.1,1.21.2,'Suite .addSuite() "before each" hook'
V1.21.2,1.0.2,1.21.2,'Suite .clone() should copy the slow value'
V1.21.2,1.0.2,1.21.2,'Suite .slow() when given a string should parse it'
V1.21.2,1.0.2,1.21.2,'Suite .slow() when no argument is passed should return the slow value'
V1.21.2,1.0.2,1.21.2,'Suite .slow() when argument is passed should return the Suite object'
V1.21.2,1.0.2,1.21.2,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.2,1.0.2,1.21.2,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.2,1.0.2,1.21.2,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.2,1.0.2,1.21.2,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.2,1.0.2,1.21.2,'Suite .addSuite() "before each" hook'
V1.21.2,1.0.3,1.21.2,'Suite .clone() should copy the slow value'
V1.21.2,1.0.3,1.21.2,'Suite .slow() when given a string should parse it'
V1.21.2,1.0.3,1.21.2,'Suite .slow() when no argument is passed should return the slow value'
V1.21.2,1.0.3,1.21.2,'Suite .slow() when argument is passed should return the Suite object'
V1.21.2,1.0.3,1.21.2,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.2,1.0.3,1.21.2,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.2,1.0.3,1.21.2,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.2,1.0.3,1.21.2,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.2,1.0.3,1.21.2,'Suite .addSuite() "before each" hook'
V1.21.2,1.1.0,1.21.2,'Suite .clone() should copy the slow value'
V1.21.2,1.1.0,1.21.2,'Suite .slow() when given a string should parse it'
V1.21.2,1.1.0,1.21.2,'Suite .slow() when no argument is passed should return the slow value'
V1.21.2,1.1.0,1.21.2,'Suite .slow() when argument is passed should return the Suite object'
V1.21.2,1.1.0,1.21.2,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.2,1.1.0,1.21.2,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.2,1.1.0,1.21.2,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.2,1.1.0,1.21.2,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.2,1.1.0,1.21.2,'Suite .addSuite() "before each" hook'
V1.21.2,1.2.0,1.21.2,'Suite .clone() should copy the slow value'
V1.21.2,1.2.0,1.21.2,'Suite .slow() when given a string should parse it'
V1.21.2,1.2.0,1.21.2,'Suite .slow() when no argument is passed should return the slow value'
V1.21.2,1.2.0,1.21.2,'Suite .slow() when argument is passed should return the Suite object'
V1.21.2,1.2.0,1.21.2,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.2,1.2.0,1.21.2,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.2,1.2.0,1.21.2,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.2,1.2.0,1.21.2,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.2,1.2.0,1.21.2,'Suite .addSuite() "before each" hook'
V1.21.2,1.2.1,1.21.2,'Suite .clone() should copy the slow value'
V1.21.2,1.2.1,1.21.2,'Suite .slow() when given a string should parse it'
V1.21.2,1.2.1,1.21.2,'Suite .slow() when no argument is passed should return the slow value'
V1.21.2,1.2.1,1.21.2,'Suite .slow() when argument is passed should return the Suite object'
V1.21.2,1.2.1,1.21.2,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.2,1.2.1,1.21.2,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.2,1.2.1,1.21.2,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.2,1.2.1,1.21.2,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.2,1.2.1,1.21.2,'Suite .addSuite() "before each" hook'
V1.21.2,1.2.2,1.21.2,'Suite .clone() should copy the slow value'
V1.21.2,1.2.2,1.21.2,'Suite .slow() when given a string should parse it'
V1.21.2,1.2.2,1.21.2,'Suite .slow() when no argument is passed should return the slow value'
V1.21.2,1.2.2,1.21.2,'Suite .slow() when argument is passed should return the Suite object'
V1.21.2,1.2.2,1.21.2,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.2,1.2.2,1.21.2,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.2,1.2.2,1.21.2,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.2,1.2.2,1.21.2,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.2,1.2.2,1.21.2,'Suite .addSuite() "before each" hook'
V1.21.2,1.3.0,1.21.2,'Suite .clone() should copy the slow value'
V1.21.2,1.3.0,1.21.2,'Suite .slow() when given a string should parse it'
V1.21.2,1.3.0,1.21.2,'Suite .slow() when no argument is passed should return the slow value'
V1.21.2,1.3.0,1.21.2,'Suite .slow() when argument is passed should return the Suite object'
V1.21.2,1.3.0,1.21.2,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.2,1.3.0,1.21.2,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.2,1.3.0,1.21.2,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.2,1.3.0,1.21.2,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.2,1.3.0,1.21.2,'Suite .addSuite() "before each" hook'
V1.21.2,1.3.1,1.21.2,'Suite .clone() should copy the slow value'
V1.21.2,1.3.1,1.21.2,'Suite .slow() when given a string should parse it'
V1.21.2,1.3.1,1.21.2,'Suite .slow() when no argument is passed should return the slow value'
V1.21.2,1.3.1,1.21.2,'Suite .slow() when argument is passed should return the Suite object'
V1.21.2,1.3.1,1.21.2,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.2,1.3.1,1.21.2,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.2,1.3.1,1.21.2,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.2,1.3.1,1.21.2,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.2,1.3.1,1.21.2,'Suite .addSuite() "before each" hook'
V1.21.2,1.3.2,1.21.2,'Suite .clone() should copy the slow value'
V1.21.2,1.3.2,1.21.2,'Suite .slow() when given a string should parse it'
V1.21.2,1.3.2,1.21.2,'Suite .slow() when no argument is passed should return the slow value'
V1.21.2,1.3.2,1.21.2,'Suite .slow() when argument is passed should return the Suite object'
V1.21.2,1.3.2,1.21.2,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.2,1.3.2,1.21.2,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.2,1.3.2,1.21.2,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.2,1.3.2,1.21.2,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.2,1.3.2,1.21.2,'Suite .addSuite() "before each" hook'
V1.21.2,1.4.0,1.21.2,'Suite .clone() should copy the slow value'
V1.21.2,1.4.0,1.21.2,'Suite .slow() when given a string should parse it'
V1.21.2,1.4.0,1.21.2,'Suite .slow() when no argument is passed should return the slow value'
V1.21.2,1.4.0,1.21.2,'Suite .slow() when argument is passed should return the Suite object'
V1.21.2,1.4.0,1.21.2,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.2,1.4.0,1.21.2,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.2,1.4.0,1.21.2,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.2,1.4.0,1.21.2,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.2,1.4.0,1.21.2,'Suite .addSuite() "before each" hook'
V1.21.2,1.4.1,1.21.2,'Suite .clone() should copy the slow value'
V1.21.2,1.4.1,1.21.2,'Suite .slow() when given a string should parse it'
V1.21.2,1.4.1,1.21.2,'Suite .slow() when no argument is passed should return the slow value'
V1.21.2,1.4.1,1.21.2,'Suite .slow() when argument is passed should return the Suite object'
V1.21.2,1.4.1,1.21.2,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.2,1.4.1,1.21.2,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.2,1.4.1,1.21.2,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.2,1.4.1,1.21.2,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.2,1.4.1,1.21.2,'Suite .addSuite() "before each" hook'
V1.21.2,1.4.2,1.21.2,'Suite .clone() should copy the slow value'
V1.21.2,1.4.2,1.21.2,'Suite .slow() when given a string should parse it'
V1.21.2,1.4.2,1.21.2,'Suite .slow() when no argument is passed should return the slow value'
V1.21.2,1.4.2,1.21.2,'Suite .slow() when argument is passed should return the Suite object'
V1.21.2,1.4.2,1.21.2,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.2,1.4.2,1.21.2,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.2,1.4.2,1.21.2,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.2,1.4.2,1.21.2,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.2,1.4.2,1.21.2,'Suite .addSuite() "before each" hook'
V1.21.2,1.5.0,1.21.2,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.2,1.5.0,1.21.2,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.2,1.5.0,1.21.2,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.2,1.5.0,1.21.2,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.2,1.5.0,1.21.2,'Runner .globalProps() should include common non enumerable globals'
V1.21.2,1.5.0,1.21.2,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.21.2,1.5.0,1.21.2,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.21.2,1.5.0,1.21.2,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.21.2,1.5.0,1.21.2,'Runnable(title, fn) #enableTimeouts(enabled) should set enabled'
V1.21.2,1.5.0,1.21.2,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.21.2,1.5.0,1.21.2,'Runnable(title, fn) .run(fn) when timeouts are disabled should not error with timeout'
V1.21.2,1.5.0,1.21.2,'Runnable(title, fn) .run(fn) when async when done() is invoked with a non-Error object should invoke the callback'
V1.21.2,1.5.0,1.21.2,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.21.2,1.5.0,1.21.2,'serial hooks one'
V1.21.2,1.5.0,1.21.2,'serial hooks two'
V1.21.2,1.5.0,1.21.2,'serial hooks three'
V1.21.2,1.5.0,1.21.2,'serial hooks "after all" hook'
V1.21.2,1.6.0,1.21.2,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.2,1.6.0,1.21.2,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.2,1.6.0,1.21.2,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.2,1.6.0,1.21.2,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.2,1.6.0,1.21.2,'Runner .globalProps() should include common non enumerable globals'
V1.21.2,1.6.0,1.21.2,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.21.2,1.6.0,1.21.2,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.21.2,1.6.0,1.21.2,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.21.2,1.6.0,1.21.2,'Runnable(title, fn) #enableTimeouts(enabled) should set enabled'
V1.21.2,1.6.0,1.21.2,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.21.2,1.6.0,1.21.2,'Runnable(title, fn) .run(fn) when timeouts are disabled should not error with timeout'
V1.21.2,1.6.0,1.21.2,'Runnable(title, fn) .run(fn) when async when done() is invoked with a non-Error object should invoke the callback'
V1.21.2,1.6.0,1.21.2,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.21.2,1.6.0,1.21.2,'serial hooks one'
V1.21.2,1.6.0,1.21.2,'serial hooks two'
V1.21.2,1.6.0,1.21.2,'serial hooks three'
V1.21.2,1.6.0,1.21.2,'serial hooks "after all" hook'
V1.21.2,1.7.0,1.21.2,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.2,1.7.0,1.21.2,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.2,1.7.0,1.21.2,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.2,1.7.0,1.21.2,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.2,1.7.0,1.21.2,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.21.2,1.7.0,1.21.2,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.21.2,1.7.0,1.21.2,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.21.2,1.7.0,1.21.2,'Runnable(title, fn) #enableTimeouts(enabled) should set enabled'
V1.21.2,1.7.0,1.21.2,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.21.2,1.7.0,1.21.2,'Runnable(title, fn) .run(fn) when timeouts are disabled should not error with timeout'
V1.21.2,1.7.0,1.21.2,'Runnable(title, fn) .run(fn) when async when done() is invoked with a non-Error object should invoke the callback'
V1.21.2,1.7.0,1.21.2,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.21.2,1.7.0,1.21.2,'serial hooks one'
V1.21.2,1.7.0,1.21.2,'serial hooks two'
V1.21.2,1.7.0,1.21.2,'serial hooks three'
V1.21.2,1.7.0,1.21.2,'serial hooks "after all" hook'
V1.21.2,1.7.1,1.21.2,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.2,1.7.1,1.21.2,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.2,1.7.1,1.21.2,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.2,1.7.1,1.21.2,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.2,1.7.1,1.21.2,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.21.2,1.7.1,1.21.2,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.21.2,1.7.1,1.21.2,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.21.2,1.7.1,1.21.2,'Runnable(title, fn) #enableTimeouts(enabled) should set enabled'
V1.21.2,1.7.1,1.21.2,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.21.2,1.7.1,1.21.2,'Runnable(title, fn) .run(fn) when timeouts are disabled should not error with timeout'
V1.21.2,1.7.1,1.21.2,'Runnable(title, fn) .run(fn) when async when done() is invoked with a non-Error object should invoke the callback'
V1.21.2,1.7.1,1.21.2,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.21.2,1.7.1,1.21.2,'serial hooks one'
V1.21.2,1.7.1,1.21.2,'serial hooks two'
V1.21.2,1.7.1,1.21.2,'serial hooks three'
V1.21.2,1.7.1,1.21.2,'serial hooks "after all" hook'
V1.21.2,1.7.2,1.21.2,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.2,1.7.2,1.21.2,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.2,1.7.2,1.21.2,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.2,1.7.2,1.21.2,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.2,1.7.2,1.21.2,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.21.2,1.7.2,1.21.2,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.21.2,1.7.2,1.21.2,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.21.2,1.7.2,1.21.2,'Runnable(title, fn) #enableTimeouts(enabled) should set enabled'
V1.21.2,1.7.2,1.21.2,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.21.2,1.7.2,1.21.2,'Runnable(title, fn) .run(fn) when timeouts are disabled should not error with timeout'
V1.21.2,1.7.2,1.21.2,'Runnable(title, fn) .run(fn) when async when done() is invoked with a non-Error object should invoke the callback'
V1.21.2,1.7.2,1.21.2,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.21.2,1.7.2,1.21.2,'serial hooks one'
V1.21.2,1.7.2,1.21.2,'serial hooks two'
V1.21.2,1.7.2,1.21.2,'serial hooks three'
V1.21.2,1.7.2,1.21.2,'serial hooks "after all" hook'
V1.21.2,1.7.3,1.21.2,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.2,1.7.3,1.21.2,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.2,1.7.3,1.21.2,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.2,1.7.3,1.21.2,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.2,1.7.3,1.21.2,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.21.2,1.7.3,1.21.2,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.21.2,1.7.3,1.21.2,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.21.2,1.7.3,1.21.2,'Runnable(title, fn) #enableTimeouts(enabled) should set enabled'
V1.21.2,1.7.3,1.21.2,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.21.2,1.7.3,1.21.2,'Runnable(title, fn) .run(fn) when timeouts are disabled should not error with timeout'
V1.21.2,1.7.3,1.21.2,'Runnable(title, fn) .run(fn) when async when done() is invoked with a non-Error object should invoke the callback'
V1.21.2,1.7.3,1.21.2,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.21.2,1.7.3,1.21.2,'serial hooks one'
V1.21.2,1.7.3,1.21.2,'serial hooks two'
V1.21.2,1.7.3,1.21.2,'serial hooks three'
V1.21.2,1.7.3,1.21.2,'serial hooks "after all" hook'
V1.21.2,1.7.4,1.21.2,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.2,1.7.4,1.21.2,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.2,1.7.4,1.21.2,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.2,1.7.4,1.21.2,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.2,1.7.4,1.21.2,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.21.2,1.7.4,1.21.2,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.21.2,1.7.4,1.21.2,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.21.2,1.7.4,1.21.2,'Runnable(title, fn) #enableTimeouts(enabled) should set enabled'
V1.21.2,1.7.4,1.21.2,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.21.2,1.7.4,1.21.2,'Runnable(title, fn) .run(fn) when timeouts are disabled should not error with timeout'
V1.21.2,1.7.4,1.21.2,'Runnable(title, fn) .run(fn) when async when done() is invoked with a non-Error object should invoke the callback'
V1.21.2,1.7.4,1.21.2,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.21.2,1.7.4,1.21.2,'serial hooks one'
V1.21.2,1.7.4,1.21.2,'serial hooks two'
V1.21.2,1.7.4,1.21.2,'serial hooks three'
V1.21.2,1.7.4,1.21.2,'serial hooks "after all" hook'
V1.21.2,1.8.0,1.21.2,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.2,1.8.0,1.21.2,'serial hooks "after all" hook'
V1.21.2,1.8.1,1.21.2,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.2,1.8.1,1.21.2,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.2,1.8.1,1.21.2,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.2,1.8.1,1.21.2,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.2,1.8.1,1.21.2,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.21.2,1.8.1,1.21.2,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.21.2,1.8.1,1.21.2,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.21.2,1.8.1,1.21.2,'Runnable(title, fn) #enableTimeouts(enabled) should set enabled'
V1.21.2,1.8.1,1.21.2,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.21.2,1.8.1,1.21.2,'Runnable(title, fn) .run(fn) when timeouts are disabled should not error with timeout'
V1.21.2,1.8.1,1.21.2,'Runnable(title, fn) .run(fn) when async when done() is invoked with a non-Error object should invoke the callback'
V1.21.2,1.8.1,1.21.2,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.21.2,1.8.1,1.21.2,'serial hooks one'
V1.21.2,1.8.1,1.21.2,'serial hooks two'
V1.21.2,1.8.1,1.21.2,'serial hooks three'
V1.21.2,1.8.1,1.21.2,'serial hooks "after all" hook'
V1.21.2,1.8.2,1.21.2,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.2,1.8.2,1.21.2,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.2,1.8.2,1.21.2,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.2,1.8.2,1.21.2,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.2,1.8.2,1.21.2,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.21.2,1.8.2,1.21.2,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.21.2,1.8.2,1.21.2,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.21.2,1.8.2,1.21.2,'Runnable(title, fn) #enableTimeouts(enabled) should set enabled'
V1.21.2,1.8.2,1.21.2,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.21.2,1.8.2,1.21.2,'Runnable(title, fn) .run(fn) when timeouts are disabled should not error with timeout'
V1.21.2,1.8.2,1.21.2,'Runnable(title, fn) .run(fn) when async when done() is invoked with a non-Error object should invoke the callback'
V1.21.2,1.8.2,1.21.2,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.21.2,1.8.2,1.21.2,'serial hooks one'
V1.21.2,1.8.2,1.21.2,'serial hooks two'
V1.21.2,1.8.2,1.21.2,'serial hooks three'
V1.21.2,1.8.2,1.21.2,'serial hooks "after all" hook'
V1.21.2,1.9.0,1.21.2,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.2,1.9.0,1.21.2,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.2,1.9.0,1.21.2,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.2,1.9.0,1.21.2,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.2,1.9.0,1.21.2,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.21.2,1.9.0,1.21.2,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.21.2,1.9.0,1.21.2,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.21.2,1.9.0,1.21.2,'Runnable(title, fn) #enableTimeouts(enabled) should set enabled'
V1.21.2,1.9.0,1.21.2,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.21.2,1.9.0,1.21.2,'Runnable(title, fn) .run(fn) when timeouts are disabled should not error with timeout'
V1.21.2,1.9.0,1.21.2,'Runnable(title, fn) .run(fn) when async when done() is invoked with a non-Error object should invoke the callback'
V1.21.2,1.9.0,1.21.2,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.21.2,1.9.0,1.21.2,'serial hooks one'
V1.21.2,1.9.0,1.21.2,'serial hooks two'
V1.21.2,1.9.0,1.21.2,'serial hooks three'
V1.21.2,1.9.0,1.21.2,'serial hooks "after all" hook'
V1.21.2,1.10.0,1.21.2,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.2,1.10.0,1.21.2,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.2,1.10.0,1.21.2,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.2,1.10.0,1.21.2,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.2,1.10.0,1.21.2,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.21.2,1.10.0,1.21.2,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.21.2,1.10.0,1.21.2,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.21.2,1.10.0,1.21.2,'Runnable(title, fn) #enableTimeouts(enabled) should set enabled'
V1.21.2,1.10.0,1.21.2,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.21.2,1.10.0,1.21.2,'Runnable(title, fn) .run(fn) when timeouts are disabled should not error with timeout'
V1.21.2,1.10.0,1.21.2,'Runnable(title, fn) .run(fn) when async when done() is invoked with a non-Error object should invoke the callback'
V1.21.2,1.10.0,1.21.2,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.21.2,1.10.0,1.21.2,'serial hooks one'
V1.21.2,1.10.0,1.21.2,'serial hooks two'
V1.21.2,1.10.0,1.21.2,'serial hooks three'
V1.21.2,1.10.0,1.21.2,'serial hooks "after all" hook'
V1.21.2,1.11.0,1.21.2,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.2,1.11.0,1.21.2,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.2,1.11.0,1.21.2,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.2,1.11.0,1.21.2,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.2,1.11.0,1.21.2,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.21.2,1.11.0,1.21.2,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.21.2,1.11.0,1.21.2,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.21.2,1.11.0,1.21.2,'Runnable(title, fn) #enableTimeouts(enabled) should set enabled'
V1.21.2,1.11.0,1.21.2,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.21.2,1.11.0,1.21.2,'Runnable(title, fn) .run(fn) when timeouts are disabled should not error with timeout'
V1.21.2,1.11.0,1.21.2,'Runnable(title, fn) .run(fn) when async when done() is invoked with a non-Error object should invoke the callback'
V1.21.2,1.11.0,1.21.2,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.21.2,1.11.0,1.21.2,'serial hooks one'
V1.21.2,1.11.0,1.21.2,'serial hooks two'
V1.21.2,1.11.0,1.21.2,'serial hooks three'
V1.21.2,1.11.0,1.21.2,'serial hooks "after all" hook'
V1.21.2,1.12.0,1.21.2,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.2,1.12.0,1.21.2,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.2,1.12.0,1.21.2,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.2,1.12.0,1.21.2,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.2,1.12.0,1.21.2,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.21.2,1.12.0,1.21.2,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.21.2,1.12.0,1.21.2,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.21.2,1.12.0,1.21.2,'Runnable(title, fn) #enableTimeouts(enabled) should set enabled'
V1.21.2,1.12.0,1.21.2,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.21.2,1.12.0,1.21.2,'Runnable(title, fn) .run(fn) when timeouts are disabled should not error with timeout'
V1.21.2,1.12.0,1.21.2,'Runnable(title, fn) .run(fn) when async when done() is invoked with a non-Error object should invoke the callback'
V1.21.2,1.12.0,1.21.2,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.21.2,1.12.0,1.21.2,'timeouts disabling should allow overriding per-test'
V1.21.2,1.12.1,1.21.2,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.2,1.12.1,1.21.2,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.2,1.12.1,1.21.2,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.2,1.12.1,1.21.2,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.2,1.12.1,1.21.2,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.21.2,1.12.1,1.21.2,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.21.2,1.12.1,1.21.2,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.21.2,1.12.1,1.21.2,'Runnable(title, fn) #enableTimeouts(enabled) should set enabled'
V1.21.2,1.12.1,1.21.2,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.21.2,1.12.1,1.21.2,'Runnable(title, fn) .run(fn) when timeouts are disabled should not error with timeout'
V1.21.2,1.12.1,1.21.2,'Runnable(title, fn) .run(fn) when async when done() is invoked with a non-Error object should invoke the callback'
V1.21.2,1.12.1,1.21.2,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.21.2,1.12.1,1.21.2,'timeouts disabling should allow overriding per-test'
V1.21.2,1.13.0,1.21.2,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.2,1.13.0,1.21.2,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.2,1.13.0,1.21.2,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.2,1.13.0,1.21.2,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.2,1.13.0,1.21.2,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.21.2,1.13.0,1.21.2,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.21.2,1.13.0,1.21.2,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.21.2,1.13.0,1.21.2,'Runnable(title, fn) #enableTimeouts(enabled) should set enabled'
V1.21.2,1.13.0,1.21.2,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.21.2,1.13.0,1.21.2,'Runnable(title, fn) .run(fn) when timeouts are disabled should not error with timeout'
V1.21.2,1.13.0,1.21.2,'Runnable(title, fn) .run(fn) when async when done() is invoked with a non-Error object should invoke the callback'
V1.21.2,1.13.0,1.21.2,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.21.2,1.13.0,1.21.2,'timeouts disabling should allow overriding per-test'
V1.21.2,1.14.0,1.21.2,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.2,1.14.0,1.21.2,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.2,1.14.0,1.21.2,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.2,1.14.0,1.21.2,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.2,1.14.0,1.21.2,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.21.2,1.14.0,1.21.2,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.21.2,1.14.0,1.21.2,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.21.2,1.14.0,1.21.2,'Runnable(title, fn) #enableTimeouts(enabled) should set enabled'
V1.21.2,1.14.0,1.21.2,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.21.2,1.14.0,1.21.2,'Runnable(title, fn) .run(fn) when timeouts are disabled should not error with timeout'
V1.21.2,1.14.0,1.21.2,'Runnable(title, fn) .run(fn) when async when done() is invoked with a non-Error object should invoke the callback'
V1.21.2,1.14.0,1.21.2,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.21.2,1.14.0,1.21.2,'timeouts disabling should allow overriding per-test'
V1.21.2,1.14.0-mwo1,1.21.2,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.2,1.14.0-mwo1,1.21.2,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.2,1.14.0-mwo1,1.21.2,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.2,1.14.0-mwo1,1.21.2,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.2,1.14.0-mwo1,1.21.2,'Runner .checkGlobals(test) should emit "fail" when a single new disallowed global is introduced after a single extra global is allowed'
V1.21.2,1.14.0-mwo1,1.21.2,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.21.2,1.14.0-mwo1,1.21.2,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.21.2,1.14.0-mwo1,1.21.2,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.21.2,1.14.0-mwo1,1.21.2,'Runnable(title, fn) #enableTimeouts(enabled) should set enabled'
V1.21.2,1.14.0-mwo1,1.21.2,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.21.2,1.14.0-mwo1,1.21.2,'Runnable(title, fn) .run(fn) when timeouts are disabled should not error with timeout'
V1.21.2,1.14.0-mwo1,1.21.2,'Runnable(title, fn) .run(fn) when async when done() is invoked with a non-Error object should invoke the callback'
V1.21.2,1.14.0-mwo1,1.21.2,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.21.2,1.14.0-mwo1,1.21.2,'timeouts disabling should allow overriding per-test'
V1.21.2,1.15.0,1.21.2,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.2,1.15.0,1.21.2,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.2,1.15.0,1.21.2,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.2,1.15.0,1.21.2,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.2,1.15.0,1.21.2,'Runner .checkGlobals(test) should emit "fail" when a single new disallowed global is introduced after a single extra global is allowed'
V1.21.2,1.15.0,1.21.2,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.21.2,1.15.0,1.21.2,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.21.2,1.15.0,1.21.2,'Runnable(title, fn) #enableTimeouts(enabled) should set enabled'
V1.21.2,1.15.0,1.21.2,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.21.2,1.15.0,1.21.2,'Runnable(title, fn) .run(fn) when timeouts are disabled should not error with timeout'
V1.21.2,1.15.0,1.21.2,'Runnable(title, fn) .run(fn) when async when done() is invoked with a non-Error object should invoke the callback'
V1.21.2,1.15.0,1.21.2,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.21.2,1.15.0,1.21.2,'timeouts disabling should allow overriding per-test'
V1.21.2,1.15.1,1.21.2,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.2,1.15.1,1.21.2,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.2,1.15.1,1.21.2,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.2,1.15.1,1.21.2,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.2,1.15.1,1.21.2,'Runner .checkGlobals(test) should emit "fail" when a single new disallowed global is introduced after a single extra global is allowed'
V1.21.2,1.15.1,1.21.2,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.21.2,1.15.1,1.21.2,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.21.2,1.15.1,1.21.2,'Runnable(title, fn) #enableTimeouts(enabled) should set enabled'
V1.21.2,1.15.1,1.21.2,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.21.2,1.15.1,1.21.2,'Runnable(title, fn) .run(fn) when timeouts are disabled should not error with timeout'
V1.21.2,1.15.1,1.21.2,'Runnable(title, fn) .run(fn) when async when done() is invoked with a non-Error object should invoke the callback'
V1.21.2,1.15.1,1.21.2,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.21.2,1.15.1,1.21.2,'timeouts disabling should allow overriding per-test'
V1.21.2,1.16.0,1.21.2,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.2,1.16.0,1.21.2,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.2,1.16.0,1.21.2,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.2,1.16.0,1.21.2,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.2,1.16.0,1.21.2,'Runner .checkGlobals(test) should emit "fail" when a single new disallowed global is introduced after a single extra global is allowed'
V1.21.2,1.16.0,1.21.2,'Runnable(title, fn) #enableTimeouts(enabled) should set enabled'
V1.21.2,1.16.0,1.21.2,'Runnable(title, fn) .run(fn) when timeouts are disabled should not error with timeout'
V1.21.2,1.16.0,1.21.2,'Runnable(title, fn) .run(fn) when async when done() is invoked with a non-Error object should invoke the callback'
V1.21.2,1.16.0,1.21.2,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.21.2,1.16.0,1.21.2,'timeouts disabling should allow overriding per-test'
V1.21.2,1.16.1,1.21.2,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.2,1.16.1,1.21.2,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.2,1.16.1,1.21.2,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.2,1.16.1,1.21.2,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.2,1.16.1,1.21.2,'Runner .checkGlobals(test) should emit "fail" when a single new disallowed global is introduced after a single extra global is allowed'
V1.21.2,1.16.1,1.21.2,'Runnable(title, fn) #enableTimeouts(enabled) should set enabled'
V1.21.2,1.16.1,1.21.2,'Runnable(title, fn) .run(fn) when timeouts are disabled should not error with timeout'
V1.21.2,1.16.1,1.21.2,'Runnable(title, fn) .run(fn) when async when done() is invoked with a non-Error object should invoke the callback'
V1.21.2,1.16.1,1.21.2,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.21.2,1.16.1,1.21.2,'timeouts disabling should allow overriding per-test'
V1.21.2,1.16.2,1.21.2,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.2,1.16.2,1.21.2,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.2,1.16.2,1.21.2,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.2,1.16.2,1.21.2,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.2,1.16.2,1.21.2,'Runner .checkGlobals(test) should emit "fail" when a single new disallowed global is introduced after a single extra global is allowed'
V1.21.2,1.16.2,1.21.2,'Runnable(title, fn) #enableTimeouts(enabled) should set enabled'
V1.21.2,1.16.2,1.21.2,'Runnable(title, fn) .run(fn) when timeouts are disabled should not error with timeout'
V1.21.2,1.16.2,1.21.2,'Runnable(title, fn) .run(fn) when async when done() is invoked with a non-Error object should invoke the callback'
V1.21.2,1.16.2,1.21.2,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.21.2,1.16.2,1.21.2,'timeouts disabling should allow overriding per-test'
V1.21.2,1.17.0,1.21.2,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.2,1.17.0,1.21.2,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.2,1.17.0,1.21.2,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.2,1.17.0,1.21.2,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.2,1.17.0,1.21.2,'Runner .checkGlobals(test) should emit "fail" when a single new disallowed global is introduced after a single extra global is allowed'
V1.21.2,1.17.0,1.21.2,'Runnable(title, fn) #enableTimeouts(enabled) should set enabled'
V1.21.2,1.17.0,1.21.2,'Runnable(title, fn) .run(fn) when timeouts are disabled should not error with timeout'
V1.21.2,1.17.0,1.21.2,'Runnable(title, fn) .run(fn) when async when done() is invoked with a non-Error object should invoke the callback'
V1.21.2,1.17.0,1.21.2,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.21.2,1.17.0,1.21.2,'timeouts disabling should allow overriding per-test'
V1.21.2,1.17.1,1.21.2,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.2,1.17.1,1.21.2,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.2,1.17.1,1.21.2,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.2,1.17.1,1.21.2,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.2,1.17.1,1.21.2,'Runnable(title, fn) #enableTimeouts(enabled) should set enabled'
V1.21.2,1.17.1,1.21.2,'Runnable(title, fn) .run(fn) when timeouts are disabled should not error with timeout'
V1.21.2,1.17.1,1.21.2,'Runnable(title, fn) .run(fn) when async when done() is invoked with a non-Error object should invoke the callback'
V1.21.2,1.17.1,1.21.2,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.21.2,1.17.1,1.21.2,'timeouts disabling should allow overriding per-test'
V1.21.2,1.18.0,1.21.2,'Runnable(title, fn) #enableTimeouts(enabled) should set enabled'
V1.21.2,1.18.0,1.21.2,'Runnable(title, fn) .run(fn) when timeouts are disabled should not error with timeout'
V1.21.2,1.18.0,1.21.2,'Runnable(title, fn) .run(fn) when async when done() is invoked with a non-Error object should invoke the callback'
V1.21.2,1.18.0,1.21.2,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected without a reason should invoke the callback'
V1.21.2,1.18.0,1.21.2,'timeouts disabling should allow overriding per-test'
V1.21.2,1.18.1,1.21.2,'Runnable(title, fn) #enableTimeouts(enabled) should set enabled'
V1.21.2,1.18.1,1.21.2,'Runnable(title, fn) .run(fn) when timeouts are disabled should not error with timeout'
V1.21.2,1.18.1,1.21.2,'Runnable(title, fn) .run(fn) when async when done() is invoked with a non-Error object should invoke the callback'
V1.21.2,1.18.1,1.21.2,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected without a reason should invoke the callback'
V1.21.2,1.18.1,1.21.2,'timeouts disabling should allow overriding per-test'
V1.21.2,1.18.2,1.21.2,'Runnable(title, fn) #enableTimeouts(enabled) should set enabled'
V1.21.2,1.18.2,1.21.2,'Runnable(title, fn) .run(fn) when timeouts are disabled should not error with timeout'
V1.21.2,1.18.2,1.21.2,'Runnable(title, fn) .run(fn) when async when done() is invoked with a non-Error object should invoke the callback'
V1.21.2,1.18.2,1.21.2,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected without a reason should invoke the callback'
V1.21.2,1.18.2,1.21.2,'timeouts disabling should allow overriding per-test'
V1.21.2,1.19.0,1.21.2,'Runnable(title, fn) #enableTimeouts(enabled) should set enabled'
V1.21.2,1.19.0,1.21.2,'Runnable(title, fn) .run(fn) when timeouts are disabled should not error with timeout'
V1.21.2,1.19.0,1.21.2,'Runnable(title, fn) .run(fn) when async when done() is invoked with a non-Error object should invoke the callback'
V1.21.2,1.19.0,1.21.2,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected without a reason should invoke the callback'
V1.21.2,1.19.0,1.21.2,'timeouts disabling should allow overriding per-test'
V1.21.2,1.20.0,1.21.2,'Runnable(title, fn) #enableTimeouts(enabled) should set enabled'
V1.21.2,1.20.0,1.21.2,'Runnable(title, fn) .run(fn) when timeouts are disabled should not error with timeout'
V1.21.2,1.20.0,1.21.2,'Runnable(title, fn) .run(fn) when async when done() is invoked with a non-Error object should invoke the callback'
V1.21.2,1.20.0,1.21.2,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected without a reason should invoke the callback'
V1.21.2,1.20.0,1.21.2,'timeouts disabling should allow overriding per-test'
V1.21.2,1.20.1,1.21.2,'Runnable(title, fn) #enableTimeouts(enabled) should set enabled'
V1.21.2,1.20.1,1.21.2,'Runnable(title, fn) .run(fn) when timeouts are disabled should not error with timeout'
V1.21.2,1.20.1,1.21.2,'Runnable(title, fn) .run(fn) when async when done() is invoked with a non-Error object should invoke the callback'
V1.21.2,1.20.1,1.21.2,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected without a reason should invoke the callback'
V1.21.2,1.20.1,1.21.2,'timeouts disabling should allow overriding per-test'
V1.21.3,1.0.0,1.21.3,'Suite .clone() should copy the slow value'
V1.21.3,1.0.0,1.21.3,'Suite .slow() when given a string should parse it'
V1.21.3,1.0.0,1.21.3,'Suite .slow() when no argument is passed should return the slow value'
V1.21.3,1.0.0,1.21.3,'Suite .slow() when argument is passed should return the Suite object'
V1.21.3,1.0.0,1.21.3,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.3,1.0.0,1.21.3,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.3,1.0.0,1.21.3,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.3,1.0.0,1.21.3,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.3,1.0.0,1.21.3,'Suite .addSuite() "before each" hook'
V1.21.3,1.0.1,1.21.3,'Suite .clone() should copy the slow value'
V1.21.3,1.0.1,1.21.3,'Suite .slow() when given a string should parse it'
V1.21.3,1.0.1,1.21.3,'Suite .slow() when no argument is passed should return the slow value'
V1.21.3,1.0.1,1.21.3,'Suite .slow() when argument is passed should return the Suite object'
V1.21.3,1.0.1,1.21.3,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.3,1.0.1,1.21.3,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.3,1.0.1,1.21.3,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.3,1.0.1,1.21.3,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.3,1.0.1,1.21.3,'Suite .addSuite() "before each" hook'
V1.21.3,1.0.2,1.21.3,'Suite .clone() should copy the slow value'
V1.21.3,1.0.2,1.21.3,'Suite .slow() when given a string should parse it'
V1.21.3,1.0.2,1.21.3,'Suite .slow() when no argument is passed should return the slow value'
V1.21.3,1.0.2,1.21.3,'Suite .slow() when argument is passed should return the Suite object'
V1.21.3,1.0.2,1.21.3,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.3,1.0.2,1.21.3,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.3,1.0.2,1.21.3,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.3,1.0.2,1.21.3,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.3,1.0.2,1.21.3,'Suite .addSuite() "before each" hook'
V1.21.3,1.0.3,1.21.3,'Suite .clone() should copy the slow value'
V1.21.3,1.0.3,1.21.3,'Suite .slow() when given a string should parse it'
V1.21.3,1.0.3,1.21.3,'Suite .slow() when no argument is passed should return the slow value'
V1.21.3,1.0.3,1.21.3,'Suite .slow() when argument is passed should return the Suite object'
V1.21.3,1.0.3,1.21.3,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.3,1.0.3,1.21.3,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.3,1.0.3,1.21.3,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.3,1.0.3,1.21.3,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.3,1.0.3,1.21.3,'Suite .addSuite() "before each" hook'
V1.21.3,1.1.0,1.21.3,'Suite .clone() should copy the slow value'
V1.21.3,1.1.0,1.21.3,'Suite .slow() when given a string should parse it'
V1.21.3,1.1.0,1.21.3,'Suite .slow() when no argument is passed should return the slow value'
V1.21.3,1.1.0,1.21.3,'Suite .slow() when argument is passed should return the Suite object'
V1.21.3,1.1.0,1.21.3,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.3,1.1.0,1.21.3,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.3,1.1.0,1.21.3,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.3,1.1.0,1.21.3,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.3,1.1.0,1.21.3,'Suite .addSuite() "before each" hook'
V1.21.3,1.2.0,1.21.3,'Suite .clone() should copy the slow value'
V1.21.3,1.2.0,1.21.3,'Suite .slow() when given a string should parse it'
V1.21.3,1.2.0,1.21.3,'Suite .slow() when no argument is passed should return the slow value'
V1.21.3,1.2.0,1.21.3,'Suite .slow() when argument is passed should return the Suite object'
V1.21.3,1.2.0,1.21.3,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.3,1.2.0,1.21.3,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.3,1.2.0,1.21.3,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.3,1.2.0,1.21.3,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.3,1.2.0,1.21.3,'Suite .addSuite() "before each" hook'
V1.21.3,1.2.1,1.21.3,'Suite .clone() should copy the slow value'
V1.21.3,1.2.1,1.21.3,'Suite .slow() when given a string should parse it'
V1.21.3,1.2.1,1.21.3,'Suite .slow() when no argument is passed should return the slow value'
V1.21.3,1.2.1,1.21.3,'Suite .slow() when argument is passed should return the Suite object'
V1.21.3,1.2.1,1.21.3,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.3,1.2.1,1.21.3,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.3,1.2.1,1.21.3,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.3,1.2.1,1.21.3,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.3,1.2.1,1.21.3,'Suite .addSuite() "before each" hook'
V1.21.3,1.2.2,1.21.3,'Suite .clone() should copy the slow value'
V1.21.3,1.2.2,1.21.3,'Suite .slow() when given a string should parse it'
V1.21.3,1.2.2,1.21.3,'Suite .slow() when no argument is passed should return the slow value'
V1.21.3,1.2.2,1.21.3,'Suite .slow() when argument is passed should return the Suite object'
V1.21.3,1.2.2,1.21.3,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.3,1.2.2,1.21.3,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.3,1.2.2,1.21.3,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.3,1.2.2,1.21.3,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.3,1.2.2,1.21.3,'Suite .addSuite() "before each" hook'
V1.21.3,1.3.0,1.21.3,'Suite .clone() should copy the slow value'
V1.21.3,1.3.0,1.21.3,'Suite .slow() when given a string should parse it'
V1.21.3,1.3.0,1.21.3,'Suite .slow() when no argument is passed should return the slow value'
V1.21.3,1.3.0,1.21.3,'Suite .slow() when argument is passed should return the Suite object'
V1.21.3,1.3.0,1.21.3,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.3,1.3.0,1.21.3,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.3,1.3.0,1.21.3,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.3,1.3.0,1.21.3,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.3,1.3.0,1.21.3,'Suite .addSuite() "before each" hook'
V1.21.3,1.3.1,1.21.3,'Suite .clone() should copy the slow value'
V1.21.3,1.3.1,1.21.3,'Suite .slow() when given a string should parse it'
V1.21.3,1.3.1,1.21.3,'Suite .slow() when no argument is passed should return the slow value'
V1.21.3,1.3.1,1.21.3,'Suite .slow() when argument is passed should return the Suite object'
V1.21.3,1.3.1,1.21.3,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.3,1.3.1,1.21.3,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.3,1.3.1,1.21.3,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.3,1.3.1,1.21.3,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.3,1.3.1,1.21.3,'Suite .addSuite() "before each" hook'
V1.21.3,1.3.2,1.21.3,'Suite .clone() should copy the slow value'
V1.21.3,1.3.2,1.21.3,'Suite .slow() when given a string should parse it'
V1.21.3,1.3.2,1.21.3,'Suite .slow() when no argument is passed should return the slow value'
V1.21.3,1.3.2,1.21.3,'Suite .slow() when argument is passed should return the Suite object'
V1.21.3,1.3.2,1.21.3,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.3,1.3.2,1.21.3,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.3,1.3.2,1.21.3,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.3,1.3.2,1.21.3,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.3,1.3.2,1.21.3,'Suite .addSuite() "before each" hook'
V1.21.3,1.4.0,1.21.3,'Suite .clone() should copy the slow value'
V1.21.3,1.4.0,1.21.3,'Suite .slow() when given a string should parse it'
V1.21.3,1.4.0,1.21.3,'Suite .slow() when no argument is passed should return the slow value'
V1.21.3,1.4.0,1.21.3,'Suite .slow() when argument is passed should return the Suite object'
V1.21.3,1.4.0,1.21.3,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.3,1.4.0,1.21.3,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.3,1.4.0,1.21.3,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.3,1.4.0,1.21.3,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.3,1.4.0,1.21.3,'Suite .addSuite() "before each" hook'
V1.21.3,1.4.1,1.21.3,'Suite .clone() should copy the slow value'
V1.21.3,1.4.1,1.21.3,'Suite .slow() when given a string should parse it'
V1.21.3,1.4.1,1.21.3,'Suite .slow() when no argument is passed should return the slow value'
V1.21.3,1.4.1,1.21.3,'Suite .slow() when argument is passed should return the Suite object'
V1.21.3,1.4.1,1.21.3,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.3,1.4.1,1.21.3,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.3,1.4.1,1.21.3,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.3,1.4.1,1.21.3,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.3,1.4.1,1.21.3,'Suite .addSuite() "before each" hook'
V1.21.3,1.4.2,1.21.3,'Suite .clone() should copy the slow value'
V1.21.3,1.4.2,1.21.3,'Suite .slow() when given a string should parse it'
V1.21.3,1.4.2,1.21.3,'Suite .slow() when no argument is passed should return the slow value'
V1.21.3,1.4.2,1.21.3,'Suite .slow() when argument is passed should return the Suite object'
V1.21.3,1.4.2,1.21.3,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.3,1.4.2,1.21.3,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.3,1.4.2,1.21.3,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.3,1.4.2,1.21.3,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.3,1.4.2,1.21.3,'Suite .addSuite() "before each" hook'
V1.21.3,1.5.0,1.21.3,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.3,1.5.0,1.21.3,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.3,1.5.0,1.21.3,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.3,1.5.0,1.21.3,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.3,1.5.0,1.21.3,'Runner .globalProps() should include common non enumerable globals'
V1.21.3,1.5.0,1.21.3,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.21.3,1.5.0,1.21.3,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.21.3,1.5.0,1.21.3,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.21.3,1.5.0,1.21.3,'Runnable(title, fn) #enableTimeouts(enabled) should set enabled'
V1.21.3,1.5.0,1.21.3,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.21.3,1.5.0,1.21.3,'Runnable(title, fn) .run(fn) when timeouts are disabled should not error with timeout'
V1.21.3,1.5.0,1.21.3,'Runnable(title, fn) .run(fn) when async when done() is invoked with a non-Error object should invoke the callback'
V1.21.3,1.5.0,1.21.3,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.21.3,1.5.0,1.21.3,'serial hooks one'
V1.21.3,1.5.0,1.21.3,'serial hooks two'
V1.21.3,1.5.0,1.21.3,'serial hooks three'
V1.21.3,1.5.0,1.21.3,'serial hooks "after all" hook'
V1.21.3,1.6.0,1.21.3,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.3,1.6.0,1.21.3,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.3,1.6.0,1.21.3,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.3,1.6.0,1.21.3,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.3,1.6.0,1.21.3,'Runner .globalProps() should include common non enumerable globals'
V1.21.3,1.6.0,1.21.3,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.21.3,1.6.0,1.21.3,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.21.3,1.6.0,1.21.3,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.21.3,1.6.0,1.21.3,'Runnable(title, fn) #enableTimeouts(enabled) should set enabled'
V1.21.3,1.6.0,1.21.3,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.21.3,1.6.0,1.21.3,'Runnable(title, fn) .run(fn) when timeouts are disabled should not error with timeout'
V1.21.3,1.6.0,1.21.3,'Runnable(title, fn) .run(fn) when async when done() is invoked with a non-Error object should invoke the callback'
V1.21.3,1.6.0,1.21.3,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.21.3,1.6.0,1.21.3,'serial hooks one'
V1.21.3,1.6.0,1.21.3,'serial hooks two'
V1.21.3,1.6.0,1.21.3,'serial hooks three'
V1.21.3,1.6.0,1.21.3,'serial hooks "after all" hook'
V1.21.3,1.7.0,1.21.3,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.3,1.7.0,1.21.3,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.3,1.7.0,1.21.3,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.3,1.7.0,1.21.3,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.3,1.7.0,1.21.3,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.21.3,1.7.0,1.21.3,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.21.3,1.7.0,1.21.3,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.21.3,1.7.0,1.21.3,'Runnable(title, fn) #enableTimeouts(enabled) should set enabled'
V1.21.3,1.7.0,1.21.3,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.21.3,1.7.0,1.21.3,'Runnable(title, fn) .run(fn) when timeouts are disabled should not error with timeout'
V1.21.3,1.7.0,1.21.3,'Runnable(title, fn) .run(fn) when async when done() is invoked with a non-Error object should invoke the callback'
V1.21.3,1.7.0,1.21.3,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.21.3,1.7.0,1.21.3,'serial hooks one'
V1.21.3,1.7.0,1.21.3,'serial hooks two'
V1.21.3,1.7.0,1.21.3,'serial hooks three'
V1.21.3,1.7.0,1.21.3,'serial hooks "after all" hook'
V1.21.3,1.7.1,1.21.3,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.3,1.7.1,1.21.3,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.3,1.7.1,1.21.3,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.3,1.7.1,1.21.3,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.3,1.7.1,1.21.3,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.21.3,1.7.1,1.21.3,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.21.3,1.7.1,1.21.3,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.21.3,1.7.1,1.21.3,'Runnable(title, fn) #enableTimeouts(enabled) should set enabled'
V1.21.3,1.7.1,1.21.3,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.21.3,1.7.1,1.21.3,'Runnable(title, fn) .run(fn) when timeouts are disabled should not error with timeout'
V1.21.3,1.7.1,1.21.3,'Runnable(title, fn) .run(fn) when async when done() is invoked with a non-Error object should invoke the callback'
V1.21.3,1.7.1,1.21.3,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.21.3,1.7.1,1.21.3,'serial hooks one'
V1.21.3,1.7.1,1.21.3,'serial hooks two'
V1.21.3,1.7.1,1.21.3,'serial hooks three'
V1.21.3,1.7.1,1.21.3,'serial hooks "after all" hook'
V1.21.3,1.7.2,1.21.3,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.3,1.7.2,1.21.3,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.3,1.7.2,1.21.3,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.3,1.7.2,1.21.3,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.3,1.7.2,1.21.3,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.21.3,1.7.2,1.21.3,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.21.3,1.7.2,1.21.3,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.21.3,1.7.2,1.21.3,'Runnable(title, fn) #enableTimeouts(enabled) should set enabled'
V1.21.3,1.7.2,1.21.3,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.21.3,1.7.2,1.21.3,'Runnable(title, fn) .run(fn) when timeouts are disabled should not error with timeout'
V1.21.3,1.7.2,1.21.3,'Runnable(title, fn) .run(fn) when async when done() is invoked with a non-Error object should invoke the callback'
V1.21.3,1.7.2,1.21.3,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.21.3,1.7.2,1.21.3,'serial hooks one'
V1.21.3,1.7.2,1.21.3,'serial hooks two'
V1.21.3,1.7.2,1.21.3,'serial hooks three'
V1.21.3,1.7.2,1.21.3,'serial hooks "after all" hook'
V1.21.3,1.7.3,1.21.3,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.3,1.7.3,1.21.3,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.3,1.7.3,1.21.3,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.3,1.7.3,1.21.3,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.3,1.7.3,1.21.3,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.21.3,1.7.3,1.21.3,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.21.3,1.7.3,1.21.3,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.21.3,1.7.3,1.21.3,'Runnable(title, fn) #enableTimeouts(enabled) should set enabled'
V1.21.3,1.7.3,1.21.3,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.21.3,1.7.3,1.21.3,'Runnable(title, fn) .run(fn) when timeouts are disabled should not error with timeout'
V1.21.3,1.7.3,1.21.3,'Runnable(title, fn) .run(fn) when async when done() is invoked with a non-Error object should invoke the callback'
V1.21.3,1.7.3,1.21.3,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.21.3,1.7.3,1.21.3,'serial hooks one'
V1.21.3,1.7.3,1.21.3,'serial hooks two'
V1.21.3,1.7.3,1.21.3,'serial hooks three'
V1.21.3,1.7.3,1.21.3,'serial hooks "after all" hook'
V1.21.3,1.7.4,1.21.3,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.3,1.7.4,1.21.3,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.3,1.7.4,1.21.3,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.3,1.7.4,1.21.3,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.3,1.7.4,1.21.3,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.21.3,1.7.4,1.21.3,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.21.3,1.7.4,1.21.3,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.21.3,1.7.4,1.21.3,'Runnable(title, fn) #enableTimeouts(enabled) should set enabled'
V1.21.3,1.7.4,1.21.3,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.21.3,1.7.4,1.21.3,'Runnable(title, fn) .run(fn) when timeouts are disabled should not error with timeout'
V1.21.3,1.7.4,1.21.3,'Runnable(title, fn) .run(fn) when async when done() is invoked with a non-Error object should invoke the callback'
V1.21.3,1.7.4,1.21.3,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.21.3,1.7.4,1.21.3,'serial hooks one'
V1.21.3,1.7.4,1.21.3,'serial hooks two'
V1.21.3,1.7.4,1.21.3,'serial hooks three'
V1.21.3,1.7.4,1.21.3,'serial hooks "after all" hook'
V1.21.3,1.8.0,1.21.3,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.3,1.8.0,1.21.3,'serial hooks "after all" hook'
V1.21.3,1.8.1,1.21.3,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.3,1.8.1,1.21.3,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.3,1.8.1,1.21.3,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.3,1.8.1,1.21.3,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.3,1.8.1,1.21.3,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.21.3,1.8.1,1.21.3,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.21.3,1.8.1,1.21.3,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.21.3,1.8.1,1.21.3,'Runnable(title, fn) #enableTimeouts(enabled) should set enabled'
V1.21.3,1.8.1,1.21.3,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.21.3,1.8.1,1.21.3,'Runnable(title, fn) .run(fn) when timeouts are disabled should not error with timeout'
V1.21.3,1.8.1,1.21.3,'Runnable(title, fn) .run(fn) when async when done() is invoked with a non-Error object should invoke the callback'
V1.21.3,1.8.1,1.21.3,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.21.3,1.8.1,1.21.3,'serial hooks one'
V1.21.3,1.8.1,1.21.3,'serial hooks two'
V1.21.3,1.8.1,1.21.3,'serial hooks three'
V1.21.3,1.8.1,1.21.3,'serial hooks "after all" hook'
V1.21.3,1.8.2,1.21.3,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.3,1.8.2,1.21.3,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.3,1.8.2,1.21.3,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.3,1.8.2,1.21.3,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.3,1.8.2,1.21.3,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.21.3,1.8.2,1.21.3,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.21.3,1.8.2,1.21.3,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.21.3,1.8.2,1.21.3,'Runnable(title, fn) #enableTimeouts(enabled) should set enabled'
V1.21.3,1.8.2,1.21.3,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.21.3,1.8.2,1.21.3,'Runnable(title, fn) .run(fn) when timeouts are disabled should not error with timeout'
V1.21.3,1.8.2,1.21.3,'Runnable(title, fn) .run(fn) when async when done() is invoked with a non-Error object should invoke the callback'
V1.21.3,1.8.2,1.21.3,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.21.3,1.8.2,1.21.3,'serial hooks one'
V1.21.3,1.8.2,1.21.3,'serial hooks two'
V1.21.3,1.8.2,1.21.3,'serial hooks three'
V1.21.3,1.8.2,1.21.3,'serial hooks "after all" hook'
V1.21.3,1.9.0,1.21.3,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.3,1.9.0,1.21.3,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.3,1.9.0,1.21.3,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.3,1.9.0,1.21.3,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.3,1.9.0,1.21.3,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.21.3,1.9.0,1.21.3,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.21.3,1.9.0,1.21.3,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.21.3,1.9.0,1.21.3,'Runnable(title, fn) #enableTimeouts(enabled) should set enabled'
V1.21.3,1.9.0,1.21.3,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.21.3,1.9.0,1.21.3,'Runnable(title, fn) .run(fn) when timeouts are disabled should not error with timeout'
V1.21.3,1.9.0,1.21.3,'Runnable(title, fn) .run(fn) when async when done() is invoked with a non-Error object should invoke the callback'
V1.21.3,1.9.0,1.21.3,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.21.3,1.9.0,1.21.3,'serial hooks one'
V1.21.3,1.9.0,1.21.3,'serial hooks two'
V1.21.3,1.9.0,1.21.3,'serial hooks three'
V1.21.3,1.9.0,1.21.3,'serial hooks "after all" hook'
V1.21.3,1.10.0,1.21.3,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.3,1.10.0,1.21.3,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.3,1.10.0,1.21.3,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.3,1.10.0,1.21.3,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.3,1.10.0,1.21.3,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.21.3,1.10.0,1.21.3,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.21.3,1.10.0,1.21.3,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.21.3,1.10.0,1.21.3,'Runnable(title, fn) #enableTimeouts(enabled) should set enabled'
V1.21.3,1.10.0,1.21.3,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.21.3,1.10.0,1.21.3,'Runnable(title, fn) .run(fn) when timeouts are disabled should not error with timeout'
V1.21.3,1.10.0,1.21.3,'Runnable(title, fn) .run(fn) when async when done() is invoked with a non-Error object should invoke the callback'
V1.21.3,1.10.0,1.21.3,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.21.3,1.10.0,1.21.3,'serial hooks one'
V1.21.3,1.10.0,1.21.3,'serial hooks two'
V1.21.3,1.10.0,1.21.3,'serial hooks three'
V1.21.3,1.10.0,1.21.3,'serial hooks "after all" hook'
V1.21.3,1.11.0,1.21.3,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.3,1.11.0,1.21.3,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.3,1.11.0,1.21.3,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.3,1.11.0,1.21.3,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.3,1.11.0,1.21.3,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.21.3,1.11.0,1.21.3,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.21.3,1.11.0,1.21.3,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.21.3,1.11.0,1.21.3,'Runnable(title, fn) #enableTimeouts(enabled) should set enabled'
V1.21.3,1.11.0,1.21.3,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.21.3,1.11.0,1.21.3,'Runnable(title, fn) .run(fn) when timeouts are disabled should not error with timeout'
V1.21.3,1.11.0,1.21.3,'Runnable(title, fn) .run(fn) when async when done() is invoked with a non-Error object should invoke the callback'
V1.21.3,1.11.0,1.21.3,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.21.3,1.11.0,1.21.3,'serial hooks one'
V1.21.3,1.11.0,1.21.3,'serial hooks two'
V1.21.3,1.11.0,1.21.3,'serial hooks three'
V1.21.3,1.11.0,1.21.3,'serial hooks "after all" hook'
V1.21.3,1.12.0,1.21.3,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.3,1.12.0,1.21.3,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.3,1.12.0,1.21.3,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.3,1.12.0,1.21.3,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.3,1.12.0,1.21.3,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.21.3,1.12.0,1.21.3,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.21.3,1.12.0,1.21.3,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.21.3,1.12.0,1.21.3,'Runnable(title, fn) #enableTimeouts(enabled) should set enabled'
V1.21.3,1.12.0,1.21.3,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.21.3,1.12.0,1.21.3,'Runnable(title, fn) .run(fn) when timeouts are disabled should not error with timeout'
V1.21.3,1.12.0,1.21.3,'Runnable(title, fn) .run(fn) when async when done() is invoked with a non-Error object should invoke the callback'
V1.21.3,1.12.0,1.21.3,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.21.3,1.12.0,1.21.3,'timeouts disabling should allow overriding per-test'
V1.21.3,1.12.1,1.21.3,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.3,1.12.1,1.21.3,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.3,1.12.1,1.21.3,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.3,1.12.1,1.21.3,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.3,1.12.1,1.21.3,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.21.3,1.12.1,1.21.3,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.21.3,1.12.1,1.21.3,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.21.3,1.12.1,1.21.3,'Runnable(title, fn) #enableTimeouts(enabled) should set enabled'
V1.21.3,1.12.1,1.21.3,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.21.3,1.12.1,1.21.3,'Runnable(title, fn) .run(fn) when timeouts are disabled should not error with timeout'
V1.21.3,1.12.1,1.21.3,'Runnable(title, fn) .run(fn) when async when done() is invoked with a non-Error object should invoke the callback'
V1.21.3,1.12.1,1.21.3,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.21.3,1.12.1,1.21.3,'timeouts disabling should allow overriding per-test'
V1.21.3,1.13.0,1.21.3,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.3,1.13.0,1.21.3,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.3,1.13.0,1.21.3,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.3,1.13.0,1.21.3,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.3,1.13.0,1.21.3,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.21.3,1.13.0,1.21.3,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.21.3,1.13.0,1.21.3,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.21.3,1.13.0,1.21.3,'Runnable(title, fn) #enableTimeouts(enabled) should set enabled'
V1.21.3,1.13.0,1.21.3,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.21.3,1.13.0,1.21.3,'Runnable(title, fn) .run(fn) when timeouts are disabled should not error with timeout'
V1.21.3,1.13.0,1.21.3,'Runnable(title, fn) .run(fn) when async when done() is invoked with a non-Error object should invoke the callback'
V1.21.3,1.13.0,1.21.3,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.21.3,1.13.0,1.21.3,'timeouts disabling should allow overriding per-test'
V1.21.3,1.14.0,1.21.3,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.3,1.14.0,1.21.3,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.3,1.14.0,1.21.3,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.3,1.14.0,1.21.3,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.3,1.14.0,1.21.3,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.21.3,1.14.0,1.21.3,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.21.3,1.14.0,1.21.3,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.21.3,1.14.0,1.21.3,'Runnable(title, fn) #enableTimeouts(enabled) should set enabled'
V1.21.3,1.14.0,1.21.3,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.21.3,1.14.0,1.21.3,'Runnable(title, fn) .run(fn) when timeouts are disabled should not error with timeout'
V1.21.3,1.14.0,1.21.3,'Runnable(title, fn) .run(fn) when async when done() is invoked with a non-Error object should invoke the callback'
V1.21.3,1.14.0,1.21.3,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.21.3,1.14.0,1.21.3,'timeouts disabling should allow overriding per-test'
V1.21.3,1.14.0-mwo1,1.21.3,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.3,1.14.0-mwo1,1.21.3,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.3,1.14.0-mwo1,1.21.3,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.3,1.14.0-mwo1,1.21.3,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.3,1.14.0-mwo1,1.21.3,'Runner .checkGlobals(test) should emit "fail" when a single new disallowed global is introduced after a single extra global is allowed'
V1.21.3,1.14.0-mwo1,1.21.3,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.21.3,1.14.0-mwo1,1.21.3,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.21.3,1.14.0-mwo1,1.21.3,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.21.3,1.14.0-mwo1,1.21.3,'Runnable(title, fn) #enableTimeouts(enabled) should set enabled'
V1.21.3,1.14.0-mwo1,1.21.3,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.21.3,1.14.0-mwo1,1.21.3,'Runnable(title, fn) .run(fn) when timeouts are disabled should not error with timeout'
V1.21.3,1.14.0-mwo1,1.21.3,'Runnable(title, fn) .run(fn) when async when done() is invoked with a non-Error object should invoke the callback'
V1.21.3,1.14.0-mwo1,1.21.3,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.21.3,1.14.0-mwo1,1.21.3,'timeouts disabling should allow overriding per-test'
V1.21.3,1.15.0,1.21.3,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.3,1.15.0,1.21.3,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.3,1.15.0,1.21.3,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.3,1.15.0,1.21.3,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.3,1.15.0,1.21.3,'Runner .checkGlobals(test) should emit "fail" when a single new disallowed global is introduced after a single extra global is allowed'
V1.21.3,1.15.0,1.21.3,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.21.3,1.15.0,1.21.3,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.21.3,1.15.0,1.21.3,'Runnable(title, fn) #enableTimeouts(enabled) should set enabled'
V1.21.3,1.15.0,1.21.3,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.21.3,1.15.0,1.21.3,'Runnable(title, fn) .run(fn) when timeouts are disabled should not error with timeout'
V1.21.3,1.15.0,1.21.3,'Runnable(title, fn) .run(fn) when async when done() is invoked with a non-Error object should invoke the callback'
V1.21.3,1.15.0,1.21.3,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.21.3,1.15.0,1.21.3,'timeouts disabling should allow overriding per-test'
V1.21.3,1.15.1,1.21.3,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.3,1.15.1,1.21.3,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.3,1.15.1,1.21.3,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.3,1.15.1,1.21.3,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.3,1.15.1,1.21.3,'Runner .checkGlobals(test) should emit "fail" when a single new disallowed global is introduced after a single extra global is allowed'
V1.21.3,1.15.1,1.21.3,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.21.3,1.15.1,1.21.3,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.21.3,1.15.1,1.21.3,'Runnable(title, fn) #enableTimeouts(enabled) should set enabled'
V1.21.3,1.15.1,1.21.3,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.21.3,1.15.1,1.21.3,'Runnable(title, fn) .run(fn) when timeouts are disabled should not error with timeout'
V1.21.3,1.15.1,1.21.3,'Runnable(title, fn) .run(fn) when async when done() is invoked with a non-Error object should invoke the callback'
V1.21.3,1.15.1,1.21.3,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.21.3,1.15.1,1.21.3,'timeouts disabling should allow overriding per-test'
V1.21.3,1.16.0,1.21.3,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.3,1.16.0,1.21.3,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.3,1.16.0,1.21.3,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.3,1.16.0,1.21.3,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.3,1.16.0,1.21.3,'Runner .checkGlobals(test) should emit "fail" when a single new disallowed global is introduced after a single extra global is allowed'
V1.21.3,1.16.0,1.21.3,'Runnable(title, fn) #enableTimeouts(enabled) should set enabled'
V1.21.3,1.16.0,1.21.3,'Runnable(title, fn) .run(fn) when timeouts are disabled should not error with timeout'
V1.21.3,1.16.0,1.21.3,'Runnable(title, fn) .run(fn) when async when done() is invoked with a non-Error object should invoke the callback'
V1.21.3,1.16.0,1.21.3,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.21.3,1.16.0,1.21.3,'timeouts disabling should allow overriding per-test'
V1.21.3,1.16.1,1.21.3,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.3,1.16.1,1.21.3,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.3,1.16.1,1.21.3,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.3,1.16.1,1.21.3,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.3,1.16.1,1.21.3,'Runner .checkGlobals(test) should emit "fail" when a single new disallowed global is introduced after a single extra global is allowed'
V1.21.3,1.16.1,1.21.3,'Runnable(title, fn) #enableTimeouts(enabled) should set enabled'
V1.21.3,1.16.1,1.21.3,'Runnable(title, fn) .run(fn) when timeouts are disabled should not error with timeout'
V1.21.3,1.16.1,1.21.3,'Runnable(title, fn) .run(fn) when async when done() is invoked with a non-Error object should invoke the callback'
V1.21.3,1.16.1,1.21.3,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.21.3,1.16.1,1.21.3,'timeouts disabling should allow overriding per-test'
V1.21.3,1.16.2,1.21.3,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.3,1.16.2,1.21.3,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.3,1.16.2,1.21.3,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.3,1.16.2,1.21.3,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.3,1.16.2,1.21.3,'Runner .checkGlobals(test) should emit "fail" when a single new disallowed global is introduced after a single extra global is allowed'
V1.21.3,1.16.2,1.21.3,'Runnable(title, fn) #enableTimeouts(enabled) should set enabled'
V1.21.3,1.16.2,1.21.3,'Runnable(title, fn) .run(fn) when timeouts are disabled should not error with timeout'
V1.21.3,1.16.2,1.21.3,'Runnable(title, fn) .run(fn) when async when done() is invoked with a non-Error object should invoke the callback'
V1.21.3,1.16.2,1.21.3,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.21.3,1.16.2,1.21.3,'timeouts disabling should allow overriding per-test'
V1.21.3,1.17.0,1.21.3,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.3,1.17.0,1.21.3,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.3,1.17.0,1.21.3,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.3,1.17.0,1.21.3,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.3,1.17.0,1.21.3,'Runner .checkGlobals(test) should emit "fail" when a single new disallowed global is introduced after a single extra global is allowed'
V1.21.3,1.17.0,1.21.3,'Runnable(title, fn) #enableTimeouts(enabled) should set enabled'
V1.21.3,1.17.0,1.21.3,'Runnable(title, fn) .run(fn) when timeouts are disabled should not error with timeout'
V1.21.3,1.17.0,1.21.3,'Runnable(title, fn) .run(fn) when async when done() is invoked with a non-Error object should invoke the callback'
V1.21.3,1.17.0,1.21.3,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.21.3,1.17.0,1.21.3,'timeouts disabling should allow overriding per-test'
V1.21.3,1.17.1,1.21.3,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.3,1.17.1,1.21.3,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.3,1.17.1,1.21.3,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.3,1.17.1,1.21.3,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.3,1.17.1,1.21.3,'Runnable(title, fn) #enableTimeouts(enabled) should set enabled'
V1.21.3,1.17.1,1.21.3,'Runnable(title, fn) .run(fn) when timeouts are disabled should not error with timeout'
V1.21.3,1.17.1,1.21.3,'Runnable(title, fn) .run(fn) when async when done() is invoked with a non-Error object should invoke the callback'
V1.21.3,1.17.1,1.21.3,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.21.3,1.17.1,1.21.3,'timeouts disabling should allow overriding per-test'
V1.21.3,1.18.0,1.21.3,'Runnable(title, fn) #enableTimeouts(enabled) should set enabled'
V1.21.3,1.18.0,1.21.3,'Runnable(title, fn) .run(fn) when timeouts are disabled should not error with timeout'
V1.21.3,1.18.0,1.21.3,'Runnable(title, fn) .run(fn) when async when done() is invoked with a non-Error object should invoke the callback'
V1.21.3,1.18.0,1.21.3,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected without a reason should invoke the callback'
V1.21.3,1.18.0,1.21.3,'timeouts disabling should allow overriding per-test'
V1.21.3,1.18.1,1.21.3,'Runnable(title, fn) #enableTimeouts(enabled) should set enabled'
V1.21.3,1.18.1,1.21.3,'Runnable(title, fn) .run(fn) when timeouts are disabled should not error with timeout'
V1.21.3,1.18.1,1.21.3,'Runnable(title, fn) .run(fn) when async when done() is invoked with a non-Error object should invoke the callback'
V1.21.3,1.18.1,1.21.3,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected without a reason should invoke the callback'
V1.21.3,1.18.1,1.21.3,'timeouts disabling should allow overriding per-test'
V1.21.3,1.18.2,1.21.3,'Runnable(title, fn) #enableTimeouts(enabled) should set enabled'
V1.21.3,1.18.2,1.21.3,'Runnable(title, fn) .run(fn) when timeouts are disabled should not error with timeout'
V1.21.3,1.18.2,1.21.3,'Runnable(title, fn) .run(fn) when async when done() is invoked with a non-Error object should invoke the callback'
V1.21.3,1.18.2,1.21.3,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected without a reason should invoke the callback'
V1.21.3,1.18.2,1.21.3,'timeouts disabling should allow overriding per-test'
V1.21.3,1.19.0,1.21.3,'Runnable(title, fn) #enableTimeouts(enabled) should set enabled'
V1.21.3,1.19.0,1.21.3,'Runnable(title, fn) .run(fn) when timeouts are disabled should not error with timeout'
V1.21.3,1.19.0,1.21.3,'Runnable(title, fn) .run(fn) when async when done() is invoked with a non-Error object should invoke the callback'
V1.21.3,1.19.0,1.21.3,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected without a reason should invoke the callback'
V1.21.3,1.19.0,1.21.3,'timeouts disabling should allow overriding per-test'
V1.21.3,1.20.0,1.21.3,'Runnable(title, fn) #enableTimeouts(enabled) should set enabled'
V1.21.3,1.20.0,1.21.3,'Runnable(title, fn) .run(fn) when timeouts are disabled should not error with timeout'
V1.21.3,1.20.0,1.21.3,'Runnable(title, fn) .run(fn) when async when done() is invoked with a non-Error object should invoke the callback'
V1.21.3,1.20.0,1.21.3,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected without a reason should invoke the callback'
V1.21.3,1.20.0,1.21.3,'timeouts disabling should allow overriding per-test'
V1.21.3,1.20.1,1.21.3,'Runnable(title, fn) #enableTimeouts(enabled) should set enabled'
V1.21.3,1.20.1,1.21.3,'Runnable(title, fn) .run(fn) when timeouts are disabled should not error with timeout'
V1.21.3,1.20.1,1.21.3,'Runnable(title, fn) .run(fn) when async when done() is invoked with a non-Error object should invoke the callback'
V1.21.3,1.20.1,1.21.3,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected without a reason should invoke the callback'
V1.21.3,1.20.1,1.21.3,'timeouts disabling should allow overriding per-test'
V1.21.4,1.0.0,1.21.4,'Suite .clone() should copy the slow value'
V1.21.4,1.0.0,1.21.4,'Suite .slow() when given a string should parse it'
V1.21.4,1.0.0,1.21.4,'Suite .slow() when no argument is passed should return the slow value'
V1.21.4,1.0.0,1.21.4,'Suite .slow() when argument is passed should return the Suite object'
V1.21.4,1.0.0,1.21.4,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.4,1.0.0,1.21.4,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.4,1.0.0,1.21.4,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.4,1.0.0,1.21.4,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.4,1.0.0,1.21.4,'Suite .addSuite() "before each" hook'
V1.21.4,1.0.1,1.21.4,'Suite .clone() should copy the slow value'
V1.21.4,1.0.1,1.21.4,'Suite .slow() when given a string should parse it'
V1.21.4,1.0.1,1.21.4,'Suite .slow() when no argument is passed should return the slow value'
V1.21.4,1.0.1,1.21.4,'Suite .slow() when argument is passed should return the Suite object'
V1.21.4,1.0.1,1.21.4,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.4,1.0.1,1.21.4,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.4,1.0.1,1.21.4,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.4,1.0.1,1.21.4,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.4,1.0.1,1.21.4,'Suite .addSuite() "before each" hook'
V1.21.4,1.0.2,1.21.4,'Suite .clone() should copy the slow value'
V1.21.4,1.0.2,1.21.4,'Suite .slow() when given a string should parse it'
V1.21.4,1.0.2,1.21.4,'Suite .slow() when no argument is passed should return the slow value'
V1.21.4,1.0.2,1.21.4,'Suite .slow() when argument is passed should return the Suite object'
V1.21.4,1.0.2,1.21.4,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.4,1.0.2,1.21.4,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.4,1.0.2,1.21.4,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.4,1.0.2,1.21.4,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.4,1.0.2,1.21.4,'Suite .addSuite() "before each" hook'
V1.21.4,1.0.3,1.21.4,'Suite .clone() should copy the slow value'
V1.21.4,1.0.3,1.21.4,'Suite .slow() when given a string should parse it'
V1.21.4,1.0.3,1.21.4,'Suite .slow() when no argument is passed should return the slow value'
V1.21.4,1.0.3,1.21.4,'Suite .slow() when argument is passed should return the Suite object'
V1.21.4,1.0.3,1.21.4,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.4,1.0.3,1.21.4,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.4,1.0.3,1.21.4,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.4,1.0.3,1.21.4,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.4,1.0.3,1.21.4,'Suite .addSuite() "before each" hook'
V1.21.4,1.1.0,1.21.4,'Suite .clone() should copy the slow value'
V1.21.4,1.1.0,1.21.4,'Suite .slow() when given a string should parse it'
V1.21.4,1.1.0,1.21.4,'Suite .slow() when no argument is passed should return the slow value'
V1.21.4,1.1.0,1.21.4,'Suite .slow() when argument is passed should return the Suite object'
V1.21.4,1.1.0,1.21.4,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.4,1.1.0,1.21.4,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.4,1.1.0,1.21.4,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.4,1.1.0,1.21.4,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.4,1.1.0,1.21.4,'Suite .addSuite() "before each" hook'
V1.21.4,1.2.0,1.21.4,'Suite .clone() should copy the slow value'
V1.21.4,1.2.0,1.21.4,'Suite .slow() when given a string should parse it'
V1.21.4,1.2.0,1.21.4,'Suite .slow() when no argument is passed should return the slow value'
V1.21.4,1.2.0,1.21.4,'Suite .slow() when argument is passed should return the Suite object'
V1.21.4,1.2.0,1.21.4,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.4,1.2.0,1.21.4,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.4,1.2.0,1.21.4,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.4,1.2.0,1.21.4,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.4,1.2.0,1.21.4,'Suite .addSuite() "before each" hook'
V1.21.4,1.2.1,1.21.4,'Suite .clone() should copy the slow value'
V1.21.4,1.2.1,1.21.4,'Suite .slow() when given a string should parse it'
V1.21.4,1.2.1,1.21.4,'Suite .slow() when no argument is passed should return the slow value'
V1.21.4,1.2.1,1.21.4,'Suite .slow() when argument is passed should return the Suite object'
V1.21.4,1.2.1,1.21.4,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.4,1.2.1,1.21.4,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.4,1.2.1,1.21.4,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.4,1.2.1,1.21.4,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.4,1.2.1,1.21.4,'Suite .addSuite() "before each" hook'
V1.21.4,1.2.2,1.21.4,'Suite .clone() should copy the slow value'
V1.21.4,1.2.2,1.21.4,'Suite .slow() when given a string should parse it'
V1.21.4,1.2.2,1.21.4,'Suite .slow() when no argument is passed should return the slow value'
V1.21.4,1.2.2,1.21.4,'Suite .slow() when argument is passed should return the Suite object'
V1.21.4,1.2.2,1.21.4,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.4,1.2.2,1.21.4,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.4,1.2.2,1.21.4,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.4,1.2.2,1.21.4,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.4,1.2.2,1.21.4,'Suite .addSuite() "before each" hook'
V1.21.4,1.3.0,1.21.4,'Suite .clone() should copy the slow value'
V1.21.4,1.3.0,1.21.4,'Suite .slow() when given a string should parse it'
V1.21.4,1.3.0,1.21.4,'Suite .slow() when no argument is passed should return the slow value'
V1.21.4,1.3.0,1.21.4,'Suite .slow() when argument is passed should return the Suite object'
V1.21.4,1.3.0,1.21.4,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.4,1.3.0,1.21.4,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.4,1.3.0,1.21.4,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.4,1.3.0,1.21.4,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.4,1.3.0,1.21.4,'Suite .addSuite() "before each" hook'
V1.21.4,1.3.1,1.21.4,'Suite .clone() should copy the slow value'
V1.21.4,1.3.1,1.21.4,'Suite .slow() when given a string should parse it'
V1.21.4,1.3.1,1.21.4,'Suite .slow() when no argument is passed should return the slow value'
V1.21.4,1.3.1,1.21.4,'Suite .slow() when argument is passed should return the Suite object'
V1.21.4,1.3.1,1.21.4,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.4,1.3.1,1.21.4,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.4,1.3.1,1.21.4,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.4,1.3.1,1.21.4,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.4,1.3.1,1.21.4,'Suite .addSuite() "before each" hook'
V1.21.4,1.3.2,1.21.4,'Suite .clone() should copy the slow value'
V1.21.4,1.3.2,1.21.4,'Suite .slow() when given a string should parse it'
V1.21.4,1.3.2,1.21.4,'Suite .slow() when no argument is passed should return the slow value'
V1.21.4,1.3.2,1.21.4,'Suite .slow() when argument is passed should return the Suite object'
V1.21.4,1.3.2,1.21.4,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.4,1.3.2,1.21.4,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.4,1.3.2,1.21.4,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.4,1.3.2,1.21.4,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.4,1.3.2,1.21.4,'Suite .addSuite() "before each" hook'
V1.21.4,1.4.0,1.21.4,'Suite .clone() should copy the slow value'
V1.21.4,1.4.0,1.21.4,'Suite .slow() when given a string should parse it'
V1.21.4,1.4.0,1.21.4,'Suite .slow() when no argument is passed should return the slow value'
V1.21.4,1.4.0,1.21.4,'Suite .slow() when argument is passed should return the Suite object'
V1.21.4,1.4.0,1.21.4,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.4,1.4.0,1.21.4,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.4,1.4.0,1.21.4,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.4,1.4.0,1.21.4,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.4,1.4.0,1.21.4,'Suite .addSuite() "before each" hook'
V1.21.4,1.4.1,1.21.4,'Suite .clone() should copy the slow value'
V1.21.4,1.4.1,1.21.4,'Suite .slow() when given a string should parse it'
V1.21.4,1.4.1,1.21.4,'Suite .slow() when no argument is passed should return the slow value'
V1.21.4,1.4.1,1.21.4,'Suite .slow() when argument is passed should return the Suite object'
V1.21.4,1.4.1,1.21.4,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.4,1.4.1,1.21.4,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.4,1.4.1,1.21.4,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.4,1.4.1,1.21.4,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.4,1.4.1,1.21.4,'Suite .addSuite() "before each" hook'
V1.21.4,1.4.2,1.21.4,'Suite .clone() should copy the slow value'
V1.21.4,1.4.2,1.21.4,'Suite .slow() when given a string should parse it'
V1.21.4,1.4.2,1.21.4,'Suite .slow() when no argument is passed should return the slow value'
V1.21.4,1.4.2,1.21.4,'Suite .slow() when argument is passed should return the Suite object'
V1.21.4,1.4.2,1.21.4,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.4,1.4.2,1.21.4,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.4,1.4.2,1.21.4,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.4,1.4.2,1.21.4,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.4,1.4.2,1.21.4,'Suite .addSuite() "before each" hook'
V1.21.4,1.5.0,1.21.4,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.4,1.5.0,1.21.4,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.4,1.5.0,1.21.4,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.4,1.5.0,1.21.4,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.4,1.5.0,1.21.4,'Runner .globalProps() should include common non enumerable globals'
V1.21.4,1.5.0,1.21.4,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.21.4,1.5.0,1.21.4,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.21.4,1.5.0,1.21.4,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.21.4,1.5.0,1.21.4,'Runnable(title, fn) #enableTimeouts(enabled) should set enabled'
V1.21.4,1.5.0,1.21.4,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.21.4,1.5.0,1.21.4,'Runnable(title, fn) .run(fn) when timeouts are disabled should not error with timeout'
V1.21.4,1.5.0,1.21.4,'Runnable(title, fn) .run(fn) when async when done() is invoked with a non-Error object should invoke the callback'
V1.21.4,1.5.0,1.21.4,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.21.4,1.5.0,1.21.4,'serial hooks one'
V1.21.4,1.5.0,1.21.4,'serial hooks two'
V1.21.4,1.5.0,1.21.4,'serial hooks three'
V1.21.4,1.5.0,1.21.4,'serial hooks "after all" hook'
V1.21.4,1.6.0,1.21.4,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.4,1.6.0,1.21.4,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.4,1.6.0,1.21.4,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.4,1.6.0,1.21.4,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.4,1.6.0,1.21.4,'Runner .globalProps() should include common non enumerable globals'
V1.21.4,1.6.0,1.21.4,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.21.4,1.6.0,1.21.4,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.21.4,1.6.0,1.21.4,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.21.4,1.6.0,1.21.4,'Runnable(title, fn) #enableTimeouts(enabled) should set enabled'
V1.21.4,1.6.0,1.21.4,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.21.4,1.6.0,1.21.4,'Runnable(title, fn) .run(fn) when timeouts are disabled should not error with timeout'
V1.21.4,1.6.0,1.21.4,'Runnable(title, fn) .run(fn) when async when done() is invoked with a non-Error object should invoke the callback'
V1.21.4,1.6.0,1.21.4,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.21.4,1.6.0,1.21.4,'serial hooks one'
V1.21.4,1.6.0,1.21.4,'serial hooks two'
V1.21.4,1.6.0,1.21.4,'serial hooks three'
V1.21.4,1.6.0,1.21.4,'serial hooks "after all" hook'
V1.21.4,1.7.0,1.21.4,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.4,1.7.0,1.21.4,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.4,1.7.0,1.21.4,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.4,1.7.0,1.21.4,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.4,1.7.0,1.21.4,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.21.4,1.7.0,1.21.4,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.21.4,1.7.0,1.21.4,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.21.4,1.7.0,1.21.4,'Runnable(title, fn) #enableTimeouts(enabled) should set enabled'
V1.21.4,1.7.0,1.21.4,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.21.4,1.7.0,1.21.4,'Runnable(title, fn) .run(fn) when timeouts are disabled should not error with timeout'
V1.21.4,1.7.0,1.21.4,'Runnable(title, fn) .run(fn) when async when done() is invoked with a non-Error object should invoke the callback'
V1.21.4,1.7.0,1.21.4,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.21.4,1.7.0,1.21.4,'serial hooks one'
V1.21.4,1.7.0,1.21.4,'serial hooks two'
V1.21.4,1.7.0,1.21.4,'serial hooks three'
V1.21.4,1.7.0,1.21.4,'serial hooks "after all" hook'
V1.21.4,1.7.1,1.21.4,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.4,1.7.1,1.21.4,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.4,1.7.1,1.21.4,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.4,1.7.1,1.21.4,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.4,1.7.1,1.21.4,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.21.4,1.7.1,1.21.4,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.21.4,1.7.1,1.21.4,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.21.4,1.7.1,1.21.4,'Runnable(title, fn) #enableTimeouts(enabled) should set enabled'
V1.21.4,1.7.1,1.21.4,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.21.4,1.7.1,1.21.4,'Runnable(title, fn) .run(fn) when timeouts are disabled should not error with timeout'
V1.21.4,1.7.1,1.21.4,'Runnable(title, fn) .run(fn) when async when done() is invoked with a non-Error object should invoke the callback'
V1.21.4,1.7.1,1.21.4,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.21.4,1.7.1,1.21.4,'serial hooks one'
V1.21.4,1.7.1,1.21.4,'serial hooks two'
V1.21.4,1.7.1,1.21.4,'serial hooks three'
V1.21.4,1.7.1,1.21.4,'serial hooks "after all" hook'
V1.21.4,1.7.2,1.21.4,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.4,1.7.2,1.21.4,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.4,1.7.2,1.21.4,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.4,1.7.2,1.21.4,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.4,1.7.2,1.21.4,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.21.4,1.7.2,1.21.4,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.21.4,1.7.2,1.21.4,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.21.4,1.7.2,1.21.4,'Runnable(title, fn) #enableTimeouts(enabled) should set enabled'
V1.21.4,1.7.2,1.21.4,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.21.4,1.7.2,1.21.4,'Runnable(title, fn) .run(fn) when timeouts are disabled should not error with timeout'
V1.21.4,1.7.2,1.21.4,'Runnable(title, fn) .run(fn) when async when done() is invoked with a non-Error object should invoke the callback'
V1.21.4,1.7.2,1.21.4,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.21.4,1.7.2,1.21.4,'serial hooks one'
V1.21.4,1.7.2,1.21.4,'serial hooks two'
V1.21.4,1.7.2,1.21.4,'serial hooks three'
V1.21.4,1.7.2,1.21.4,'serial hooks "after all" hook'
V1.21.4,1.7.3,1.21.4,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.4,1.7.3,1.21.4,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.4,1.7.3,1.21.4,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.4,1.7.3,1.21.4,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.4,1.7.3,1.21.4,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.21.4,1.7.3,1.21.4,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.21.4,1.7.3,1.21.4,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.21.4,1.7.3,1.21.4,'Runnable(title, fn) #enableTimeouts(enabled) should set enabled'
V1.21.4,1.7.3,1.21.4,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.21.4,1.7.3,1.21.4,'Runnable(title, fn) .run(fn) when timeouts are disabled should not error with timeout'
V1.21.4,1.7.3,1.21.4,'Runnable(title, fn) .run(fn) when async when done() is invoked with a non-Error object should invoke the callback'
V1.21.4,1.7.3,1.21.4,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.21.4,1.7.3,1.21.4,'serial hooks one'
V1.21.4,1.7.3,1.21.4,'serial hooks two'
V1.21.4,1.7.3,1.21.4,'serial hooks three'
V1.21.4,1.7.3,1.21.4,'serial hooks "after all" hook'
V1.21.4,1.7.4,1.21.4,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.4,1.7.4,1.21.4,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.4,1.7.4,1.21.4,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.4,1.7.4,1.21.4,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.4,1.7.4,1.21.4,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.21.4,1.7.4,1.21.4,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.21.4,1.7.4,1.21.4,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.21.4,1.7.4,1.21.4,'Runnable(title, fn) #enableTimeouts(enabled) should set enabled'
V1.21.4,1.7.4,1.21.4,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.21.4,1.7.4,1.21.4,'Runnable(title, fn) .run(fn) when timeouts are disabled should not error with timeout'
V1.21.4,1.7.4,1.21.4,'Runnable(title, fn) .run(fn) when async when done() is invoked with a non-Error object should invoke the callback'
V1.21.4,1.7.4,1.21.4,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.21.4,1.7.4,1.21.4,'serial hooks one'
V1.21.4,1.7.4,1.21.4,'serial hooks two'
V1.21.4,1.7.4,1.21.4,'serial hooks three'
V1.21.4,1.7.4,1.21.4,'serial hooks "after all" hook'
V1.21.4,1.8.0,1.21.4,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.4,1.8.0,1.21.4,'serial hooks "after all" hook'
V1.21.4,1.8.1,1.21.4,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.4,1.8.1,1.21.4,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.4,1.8.1,1.21.4,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.4,1.8.1,1.21.4,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.4,1.8.1,1.21.4,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.21.4,1.8.1,1.21.4,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.21.4,1.8.1,1.21.4,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.21.4,1.8.1,1.21.4,'Runnable(title, fn) #enableTimeouts(enabled) should set enabled'
V1.21.4,1.8.1,1.21.4,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.21.4,1.8.1,1.21.4,'Runnable(title, fn) .run(fn) when timeouts are disabled should not error with timeout'
V1.21.4,1.8.1,1.21.4,'Runnable(title, fn) .run(fn) when async when done() is invoked with a non-Error object should invoke the callback'
V1.21.4,1.8.1,1.21.4,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.21.4,1.8.1,1.21.4,'serial hooks one'
V1.21.4,1.8.1,1.21.4,'serial hooks two'
V1.21.4,1.8.1,1.21.4,'serial hooks three'
V1.21.4,1.8.1,1.21.4,'serial hooks "after all" hook'
V1.21.4,1.8.2,1.21.4,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.4,1.8.2,1.21.4,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.4,1.8.2,1.21.4,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.4,1.8.2,1.21.4,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.4,1.8.2,1.21.4,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.21.4,1.8.2,1.21.4,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.21.4,1.8.2,1.21.4,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.21.4,1.8.2,1.21.4,'Runnable(title, fn) #enableTimeouts(enabled) should set enabled'
V1.21.4,1.8.2,1.21.4,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.21.4,1.8.2,1.21.4,'Runnable(title, fn) .run(fn) when timeouts are disabled should not error with timeout'
V1.21.4,1.8.2,1.21.4,'Runnable(title, fn) .run(fn) when async when done() is invoked with a non-Error object should invoke the callback'
V1.21.4,1.8.2,1.21.4,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.21.4,1.8.2,1.21.4,'serial hooks one'
V1.21.4,1.8.2,1.21.4,'serial hooks two'
V1.21.4,1.8.2,1.21.4,'serial hooks three'
V1.21.4,1.8.2,1.21.4,'serial hooks "after all" hook'
V1.21.4,1.9.0,1.21.4,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.4,1.9.0,1.21.4,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.4,1.9.0,1.21.4,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.4,1.9.0,1.21.4,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.4,1.9.0,1.21.4,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.21.4,1.9.0,1.21.4,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.21.4,1.9.0,1.21.4,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.21.4,1.9.0,1.21.4,'Runnable(title, fn) #enableTimeouts(enabled) should set enabled'
V1.21.4,1.9.0,1.21.4,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.21.4,1.9.0,1.21.4,'Runnable(title, fn) .run(fn) when timeouts are disabled should not error with timeout'
V1.21.4,1.9.0,1.21.4,'Runnable(title, fn) .run(fn) when async when done() is invoked with a non-Error object should invoke the callback'
V1.21.4,1.9.0,1.21.4,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.21.4,1.9.0,1.21.4,'serial hooks one'
V1.21.4,1.9.0,1.21.4,'serial hooks two'
V1.21.4,1.9.0,1.21.4,'serial hooks three'
V1.21.4,1.9.0,1.21.4,'serial hooks "after all" hook'
V1.21.4,1.10.0,1.21.4,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.4,1.10.0,1.21.4,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.4,1.10.0,1.21.4,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.4,1.10.0,1.21.4,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.4,1.10.0,1.21.4,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.21.4,1.10.0,1.21.4,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.21.4,1.10.0,1.21.4,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.21.4,1.10.0,1.21.4,'Runnable(title, fn) #enableTimeouts(enabled) should set enabled'
V1.21.4,1.10.0,1.21.4,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.21.4,1.10.0,1.21.4,'Runnable(title, fn) .run(fn) when timeouts are disabled should not error with timeout'
V1.21.4,1.10.0,1.21.4,'Runnable(title, fn) .run(fn) when async when done() is invoked with a non-Error object should invoke the callback'
V1.21.4,1.10.0,1.21.4,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.21.4,1.10.0,1.21.4,'serial hooks one'
V1.21.4,1.10.0,1.21.4,'serial hooks two'
V1.21.4,1.10.0,1.21.4,'serial hooks three'
V1.21.4,1.10.0,1.21.4,'serial hooks "after all" hook'
V1.21.4,1.11.0,1.21.4,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.4,1.11.0,1.21.4,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.4,1.11.0,1.21.4,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.4,1.11.0,1.21.4,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.4,1.11.0,1.21.4,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.21.4,1.11.0,1.21.4,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.21.4,1.11.0,1.21.4,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.21.4,1.11.0,1.21.4,'Runnable(title, fn) #enableTimeouts(enabled) should set enabled'
V1.21.4,1.11.0,1.21.4,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.21.4,1.11.0,1.21.4,'Runnable(title, fn) .run(fn) when timeouts are disabled should not error with timeout'
V1.21.4,1.11.0,1.21.4,'Runnable(title, fn) .run(fn) when async when done() is invoked with a non-Error object should invoke the callback'
V1.21.4,1.11.0,1.21.4,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.21.4,1.11.0,1.21.4,'serial hooks one'
V1.21.4,1.11.0,1.21.4,'serial hooks two'
V1.21.4,1.11.0,1.21.4,'serial hooks three'
V1.21.4,1.11.0,1.21.4,'serial hooks "after all" hook'
V1.21.4,1.12.0,1.21.4,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.4,1.12.0,1.21.4,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.4,1.12.0,1.21.4,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.4,1.12.0,1.21.4,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.4,1.12.0,1.21.4,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.21.4,1.12.0,1.21.4,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.21.4,1.12.0,1.21.4,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.21.4,1.12.0,1.21.4,'Runnable(title, fn) #enableTimeouts(enabled) should set enabled'
V1.21.4,1.12.0,1.21.4,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.21.4,1.12.0,1.21.4,'Runnable(title, fn) .run(fn) when timeouts are disabled should not error with timeout'
V1.21.4,1.12.0,1.21.4,'Runnable(title, fn) .run(fn) when async when done() is invoked with a non-Error object should invoke the callback'
V1.21.4,1.12.0,1.21.4,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.21.4,1.12.0,1.21.4,'timeouts disabling should allow overriding per-test'
V1.21.4,1.12.1,1.21.4,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.4,1.12.1,1.21.4,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.4,1.12.1,1.21.4,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.4,1.12.1,1.21.4,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.4,1.12.1,1.21.4,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.21.4,1.12.1,1.21.4,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.21.4,1.12.1,1.21.4,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.21.4,1.12.1,1.21.4,'Runnable(title, fn) #enableTimeouts(enabled) should set enabled'
V1.21.4,1.12.1,1.21.4,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.21.4,1.12.1,1.21.4,'Runnable(title, fn) .run(fn) when timeouts are disabled should not error with timeout'
V1.21.4,1.12.1,1.21.4,'Runnable(title, fn) .run(fn) when async when done() is invoked with a non-Error object should invoke the callback'
V1.21.4,1.12.1,1.21.4,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.21.4,1.12.1,1.21.4,'timeouts disabling should allow overriding per-test'
V1.21.4,1.13.0,1.21.4,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.4,1.13.0,1.21.4,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.4,1.13.0,1.21.4,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.4,1.13.0,1.21.4,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.4,1.13.0,1.21.4,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.21.4,1.13.0,1.21.4,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.21.4,1.13.0,1.21.4,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.21.4,1.13.0,1.21.4,'Runnable(title, fn) #enableTimeouts(enabled) should set enabled'
V1.21.4,1.13.0,1.21.4,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.21.4,1.13.0,1.21.4,'Runnable(title, fn) .run(fn) when timeouts are disabled should not error with timeout'
V1.21.4,1.13.0,1.21.4,'Runnable(title, fn) .run(fn) when async when done() is invoked with a non-Error object should invoke the callback'
V1.21.4,1.13.0,1.21.4,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.21.4,1.13.0,1.21.4,'timeouts disabling should allow overriding per-test'
V1.21.4,1.14.0,1.21.4,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.4,1.14.0,1.21.4,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.4,1.14.0,1.21.4,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.4,1.14.0,1.21.4,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.4,1.14.0,1.21.4,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.21.4,1.14.0,1.21.4,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.21.4,1.14.0,1.21.4,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.21.4,1.14.0,1.21.4,'Runnable(title, fn) #enableTimeouts(enabled) should set enabled'
V1.21.4,1.14.0,1.21.4,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.21.4,1.14.0,1.21.4,'Runnable(title, fn) .run(fn) when timeouts are disabled should not error with timeout'
V1.21.4,1.14.0,1.21.4,'Runnable(title, fn) .run(fn) when async when done() is invoked with a non-Error object should invoke the callback'
V1.21.4,1.14.0,1.21.4,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.21.4,1.14.0,1.21.4,'timeouts disabling should allow overriding per-test'
V1.21.4,1.14.0-mwo1,1.21.4,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.4,1.14.0-mwo1,1.21.4,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.4,1.14.0-mwo1,1.21.4,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.4,1.14.0-mwo1,1.21.4,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.4,1.14.0-mwo1,1.21.4,'Runner .checkGlobals(test) should emit "fail" when a single new disallowed global is introduced after a single extra global is allowed'
V1.21.4,1.14.0-mwo1,1.21.4,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.21.4,1.14.0-mwo1,1.21.4,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.21.4,1.14.0-mwo1,1.21.4,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.21.4,1.14.0-mwo1,1.21.4,'Runnable(title, fn) #enableTimeouts(enabled) should set enabled'
V1.21.4,1.14.0-mwo1,1.21.4,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.21.4,1.14.0-mwo1,1.21.4,'Runnable(title, fn) .run(fn) when timeouts are disabled should not error with timeout'
V1.21.4,1.14.0-mwo1,1.21.4,'Runnable(title, fn) .run(fn) when async when done() is invoked with a non-Error object should invoke the callback'
V1.21.4,1.14.0-mwo1,1.21.4,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.21.4,1.14.0-mwo1,1.21.4,'timeouts disabling should allow overriding per-test'
V1.21.4,1.15.0,1.21.4,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.4,1.15.0,1.21.4,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.4,1.15.0,1.21.4,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.4,1.15.0,1.21.4,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.4,1.15.0,1.21.4,'Runner .checkGlobals(test) should emit "fail" when a single new disallowed global is introduced after a single extra global is allowed'
V1.21.4,1.15.0,1.21.4,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.21.4,1.15.0,1.21.4,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.21.4,1.15.0,1.21.4,'Runnable(title, fn) #enableTimeouts(enabled) should set enabled'
V1.21.4,1.15.0,1.21.4,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.21.4,1.15.0,1.21.4,'Runnable(title, fn) .run(fn) when timeouts are disabled should not error with timeout'
V1.21.4,1.15.0,1.21.4,'Runnable(title, fn) .run(fn) when async when done() is invoked with a non-Error object should invoke the callback'
V1.21.4,1.15.0,1.21.4,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.21.4,1.15.0,1.21.4,'timeouts disabling should allow overriding per-test'
V1.21.4,1.15.1,1.21.4,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.4,1.15.1,1.21.4,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.4,1.15.1,1.21.4,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.4,1.15.1,1.21.4,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.4,1.15.1,1.21.4,'Runner .checkGlobals(test) should emit "fail" when a single new disallowed global is introduced after a single extra global is allowed'
V1.21.4,1.15.1,1.21.4,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.21.4,1.15.1,1.21.4,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.21.4,1.15.1,1.21.4,'Runnable(title, fn) #enableTimeouts(enabled) should set enabled'
V1.21.4,1.15.1,1.21.4,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.21.4,1.15.1,1.21.4,'Runnable(title, fn) .run(fn) when timeouts are disabled should not error with timeout'
V1.21.4,1.15.1,1.21.4,'Runnable(title, fn) .run(fn) when async when done() is invoked with a non-Error object should invoke the callback'
V1.21.4,1.15.1,1.21.4,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.21.4,1.15.1,1.21.4,'timeouts disabling should allow overriding per-test'
V1.21.4,1.16.0,1.21.4,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.4,1.16.0,1.21.4,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.4,1.16.0,1.21.4,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.4,1.16.0,1.21.4,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.4,1.16.0,1.21.4,'Runner .checkGlobals(test) should emit "fail" when a single new disallowed global is introduced after a single extra global is allowed'
V1.21.4,1.16.0,1.21.4,'Runnable(title, fn) #enableTimeouts(enabled) should set enabled'
V1.21.4,1.16.0,1.21.4,'Runnable(title, fn) .run(fn) when timeouts are disabled should not error with timeout'
V1.21.4,1.16.0,1.21.4,'Runnable(title, fn) .run(fn) when async when done() is invoked with a non-Error object should invoke the callback'
V1.21.4,1.16.0,1.21.4,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.21.4,1.16.0,1.21.4,'timeouts disabling should allow overriding per-test'
V1.21.4,1.16.1,1.21.4,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.4,1.16.1,1.21.4,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.4,1.16.1,1.21.4,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.4,1.16.1,1.21.4,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.4,1.16.1,1.21.4,'Runner .checkGlobals(test) should emit "fail" when a single new disallowed global is introduced after a single extra global is allowed'
V1.21.4,1.16.1,1.21.4,'Runnable(title, fn) #enableTimeouts(enabled) should set enabled'
V1.21.4,1.16.1,1.21.4,'Runnable(title, fn) .run(fn) when timeouts are disabled should not error with timeout'
V1.21.4,1.16.1,1.21.4,'Runnable(title, fn) .run(fn) when async when done() is invoked with a non-Error object should invoke the callback'
V1.21.4,1.16.1,1.21.4,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.21.4,1.16.1,1.21.4,'timeouts disabling should allow overriding per-test'
V1.21.4,1.16.2,1.21.4,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.4,1.16.2,1.21.4,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.4,1.16.2,1.21.4,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.4,1.16.2,1.21.4,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.4,1.16.2,1.21.4,'Runner .checkGlobals(test) should emit "fail" when a single new disallowed global is introduced after a single extra global is allowed'
V1.21.4,1.16.2,1.21.4,'Runnable(title, fn) #enableTimeouts(enabled) should set enabled'
V1.21.4,1.16.2,1.21.4,'Runnable(title, fn) .run(fn) when timeouts are disabled should not error with timeout'
V1.21.4,1.16.2,1.21.4,'Runnable(title, fn) .run(fn) when async when done() is invoked with a non-Error object should invoke the callback'
V1.21.4,1.16.2,1.21.4,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.21.4,1.16.2,1.21.4,'timeouts disabling should allow overriding per-test'
V1.21.4,1.17.0,1.21.4,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.4,1.17.0,1.21.4,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.4,1.17.0,1.21.4,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.4,1.17.0,1.21.4,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.4,1.17.0,1.21.4,'Runner .checkGlobals(test) should emit "fail" when a single new disallowed global is introduced after a single extra global is allowed'
V1.21.4,1.17.0,1.21.4,'Runnable(title, fn) #enableTimeouts(enabled) should set enabled'
V1.21.4,1.17.0,1.21.4,'Runnable(title, fn) .run(fn) when timeouts are disabled should not error with timeout'
V1.21.4,1.17.0,1.21.4,'Runnable(title, fn) .run(fn) when async when done() is invoked with a non-Error object should invoke the callback'
V1.21.4,1.17.0,1.21.4,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.21.4,1.17.0,1.21.4,'timeouts disabling should allow overriding per-test'
V1.21.4,1.17.1,1.21.4,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.4,1.17.1,1.21.4,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.4,1.17.1,1.21.4,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.4,1.17.1,1.21.4,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.4,1.17.1,1.21.4,'Runnable(title, fn) #enableTimeouts(enabled) should set enabled'
V1.21.4,1.17.1,1.21.4,'Runnable(title, fn) .run(fn) when timeouts are disabled should not error with timeout'
V1.21.4,1.17.1,1.21.4,'Runnable(title, fn) .run(fn) when async when done() is invoked with a non-Error object should invoke the callback'
V1.21.4,1.17.1,1.21.4,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.21.4,1.17.1,1.21.4,'timeouts disabling should allow overriding per-test'
V1.21.4,1.18.0,1.21.4,'Runnable(title, fn) #enableTimeouts(enabled) should set enabled'
V1.21.4,1.18.0,1.21.4,'Runnable(title, fn) .run(fn) when timeouts are disabled should not error with timeout'
V1.21.4,1.18.0,1.21.4,'Runnable(title, fn) .run(fn) when async when done() is invoked with a non-Error object should invoke the callback'
V1.21.4,1.18.0,1.21.4,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected without a reason should invoke the callback'
V1.21.4,1.18.0,1.21.4,'timeouts disabling should allow overriding per-test'
V1.21.4,1.18.1,1.21.4,'Runnable(title, fn) #enableTimeouts(enabled) should set enabled'
V1.21.4,1.18.1,1.21.4,'Runnable(title, fn) .run(fn) when timeouts are disabled should not error with timeout'
V1.21.4,1.18.1,1.21.4,'Runnable(title, fn) .run(fn) when async when done() is invoked with a non-Error object should invoke the callback'
V1.21.4,1.18.1,1.21.4,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected without a reason should invoke the callback'
V1.21.4,1.18.1,1.21.4,'timeouts disabling should allow overriding per-test'
V1.21.4,1.18.2,1.21.4,'Runnable(title, fn) #enableTimeouts(enabled) should set enabled'
V1.21.4,1.18.2,1.21.4,'Runnable(title, fn) .run(fn) when timeouts are disabled should not error with timeout'
V1.21.4,1.18.2,1.21.4,'Runnable(title, fn) .run(fn) when async when done() is invoked with a non-Error object should invoke the callback'
V1.21.4,1.18.2,1.21.4,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected without a reason should invoke the callback'
V1.21.4,1.18.2,1.21.4,'timeouts disabling should allow overriding per-test'
V1.21.4,1.19.0,1.21.4,'Runnable(title, fn) #enableTimeouts(enabled) should set enabled'
V1.21.4,1.19.0,1.21.4,'Runnable(title, fn) .run(fn) when timeouts are disabled should not error with timeout'
V1.21.4,1.19.0,1.21.4,'Runnable(title, fn) .run(fn) when async when done() is invoked with a non-Error object should invoke the callback'
V1.21.4,1.19.0,1.21.4,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected without a reason should invoke the callback'
V1.21.4,1.19.0,1.21.4,'timeouts disabling should allow overriding per-test'
V1.21.4,1.20.0,1.21.4,'Runnable(title, fn) #enableTimeouts(enabled) should set enabled'
V1.21.4,1.20.0,1.21.4,'Runnable(title, fn) .run(fn) when timeouts are disabled should not error with timeout'
V1.21.4,1.20.0,1.21.4,'Runnable(title, fn) .run(fn) when async when done() is invoked with a non-Error object should invoke the callback'
V1.21.4,1.20.0,1.21.4,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected without a reason should invoke the callback'
V1.21.4,1.20.0,1.21.4,'timeouts disabling should allow overriding per-test'
V1.21.4,1.20.1,1.21.4,'Runnable(title, fn) #enableTimeouts(enabled) should set enabled'
V1.21.4,1.20.1,1.21.4,'Runnable(title, fn) .run(fn) when timeouts are disabled should not error with timeout'
V1.21.4,1.20.1,1.21.4,'Runnable(title, fn) .run(fn) when async when done() is invoked with a non-Error object should invoke the callback'
V1.21.4,1.20.1,1.21.4,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected without a reason should invoke the callback'
V1.21.4,1.20.1,1.21.4,'timeouts disabling should allow overriding per-test'
V1.21.4,1.21.0,1.21.4,'timeouts disabling should work with timeout(0)'
V1.21.4,1.21.1,1.21.4,'timeouts disabling should work with timeout(0)'
V1.21.4,1.21.2,1.21.4,'timeouts disabling should work with timeout(0)'
V1.21.4,1.21.3,1.21.4,'timeouts disabling should work with timeout(0)'
V1.21.5,1.7.0,1.21.5,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.5,1.7.0,1.21.5,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.5,1.7.0,1.21.5,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.5,1.7.0,1.21.5,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.5,1.7.0,1.21.5,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.21.5,1.7.0,1.21.5,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.21.5,1.7.0,1.21.5,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.21.5,1.7.0,1.21.5,'Runnable(title, fn) #enableTimeouts(enabled) should set enabled'
V1.21.5,1.7.0,1.21.5,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.21.5,1.7.0,1.21.5,'Runnable(title, fn) .run(fn) when timeouts are disabled should not error with timeout'
V1.21.5,1.7.0,1.21.5,'Runnable(title, fn) .run(fn) when async when done() is invoked with a non-Error object should invoke the callback'
V1.21.5,1.7.0,1.21.5,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.21.5,1.7.0,1.21.5,'serial hooks one'
V1.21.5,1.7.0,1.21.5,'serial hooks two'
V1.21.5,1.7.0,1.21.5,'serial hooks three'
V1.21.5,1.7.0,1.21.5,'serial hooks "after all" hook'
V1.21.5,1.7.1,1.21.5,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.5,1.7.1,1.21.5,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.5,1.7.1,1.21.5,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.5,1.7.1,1.21.5,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.5,1.7.1,1.21.5,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.21.5,1.7.1,1.21.5,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.21.5,1.7.1,1.21.5,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.21.5,1.7.1,1.21.5,'Runnable(title, fn) #enableTimeouts(enabled) should set enabled'
V1.21.5,1.7.1,1.21.5,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.21.5,1.7.1,1.21.5,'Runnable(title, fn) .run(fn) when timeouts are disabled should not error with timeout'
V1.21.5,1.7.1,1.21.5,'Runnable(title, fn) .run(fn) when async when done() is invoked with a non-Error object should invoke the callback'
V1.21.5,1.7.1,1.21.5,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.21.5,1.7.1,1.21.5,'serial hooks one'
V1.21.5,1.7.1,1.21.5,'serial hooks two'
V1.21.5,1.7.1,1.21.5,'serial hooks three'
V1.21.5,1.7.1,1.21.5,'serial hooks "after all" hook'
V1.21.5,1.7.2,1.21.5,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.5,1.7.2,1.21.5,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.5,1.7.2,1.21.5,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.5,1.7.2,1.21.5,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.5,1.7.2,1.21.5,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.21.5,1.7.2,1.21.5,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.21.5,1.7.2,1.21.5,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.21.5,1.7.2,1.21.5,'Runnable(title, fn) #enableTimeouts(enabled) should set enabled'
V1.21.5,1.7.2,1.21.5,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.21.5,1.7.2,1.21.5,'Runnable(title, fn) .run(fn) when timeouts are disabled should not error with timeout'
V1.21.5,1.7.2,1.21.5,'Runnable(title, fn) .run(fn) when async when done() is invoked with a non-Error object should invoke the callback'
V1.21.5,1.7.2,1.21.5,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.21.5,1.7.2,1.21.5,'serial hooks one'
V1.21.5,1.7.2,1.21.5,'serial hooks two'
V1.21.5,1.7.2,1.21.5,'serial hooks three'
V1.21.5,1.7.2,1.21.5,'serial hooks "after all" hook'
V1.21.5,1.7.3,1.21.5,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.5,1.7.3,1.21.5,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.5,1.7.3,1.21.5,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.5,1.7.3,1.21.5,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.5,1.7.3,1.21.5,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.21.5,1.7.3,1.21.5,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.21.5,1.7.3,1.21.5,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.21.5,1.7.3,1.21.5,'Runnable(title, fn) #enableTimeouts(enabled) should set enabled'
V1.21.5,1.7.3,1.21.5,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.21.5,1.7.3,1.21.5,'Runnable(title, fn) .run(fn) when timeouts are disabled should not error with timeout'
V1.21.5,1.7.3,1.21.5,'Runnable(title, fn) .run(fn) when async when done() is invoked with a non-Error object should invoke the callback'
V1.21.5,1.7.3,1.21.5,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.21.5,1.7.3,1.21.5,'serial hooks one'
V1.21.5,1.7.3,1.21.5,'serial hooks two'
V1.21.5,1.7.3,1.21.5,'serial hooks three'
V1.21.5,1.7.3,1.21.5,'serial hooks "after all" hook'
V1.21.5,1.7.4,1.21.5,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.5,1.7.4,1.21.5,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.5,1.7.4,1.21.5,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.5,1.7.4,1.21.5,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.5,1.7.4,1.21.5,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.21.5,1.7.4,1.21.5,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.21.5,1.7.4,1.21.5,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.21.5,1.7.4,1.21.5,'Runnable(title, fn) #enableTimeouts(enabled) should set enabled'
V1.21.5,1.7.4,1.21.5,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.21.5,1.7.4,1.21.5,'Runnable(title, fn) .run(fn) when timeouts are disabled should not error with timeout'
V1.21.5,1.7.4,1.21.5,'Runnable(title, fn) .run(fn) when async when done() is invoked with a non-Error object should invoke the callback'
V1.21.5,1.7.4,1.21.5,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.21.5,1.7.4,1.21.5,'serial hooks one'
V1.21.5,1.7.4,1.21.5,'serial hooks two'
V1.21.5,1.7.4,1.21.5,'serial hooks three'
V1.21.5,1.7.4,1.21.5,'serial hooks "after all" hook'
V1.21.5,1.8.0,1.21.5,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.5,1.8.0,1.21.5,'serial hooks "after all" hook'
V1.21.5,1.8.1,1.21.5,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.5,1.8.1,1.21.5,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.5,1.8.1,1.21.5,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.5,1.8.1,1.21.5,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.5,1.8.1,1.21.5,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.21.5,1.8.1,1.21.5,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.21.5,1.8.1,1.21.5,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.21.5,1.8.1,1.21.5,'Runnable(title, fn) #enableTimeouts(enabled) should set enabled'
V1.21.5,1.8.1,1.21.5,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.21.5,1.8.1,1.21.5,'Runnable(title, fn) .run(fn) when timeouts are disabled should not error with timeout'
V1.21.5,1.8.1,1.21.5,'Runnable(title, fn) .run(fn) when async when done() is invoked with a non-Error object should invoke the callback'
V1.21.5,1.8.1,1.21.5,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.21.5,1.8.1,1.21.5,'serial hooks one'
V1.21.5,1.8.1,1.21.5,'serial hooks two'
V1.21.5,1.8.1,1.21.5,'serial hooks three'
V1.21.5,1.8.1,1.21.5,'serial hooks "after all" hook'
V1.21.5,1.8.2,1.21.5,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.5,1.8.2,1.21.5,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.5,1.8.2,1.21.5,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.5,1.8.2,1.21.5,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.5,1.8.2,1.21.5,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.21.5,1.8.2,1.21.5,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.21.5,1.8.2,1.21.5,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.21.5,1.8.2,1.21.5,'Runnable(title, fn) #enableTimeouts(enabled) should set enabled'
V1.21.5,1.8.2,1.21.5,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.21.5,1.8.2,1.21.5,'Runnable(title, fn) .run(fn) when timeouts are disabled should not error with timeout'
V1.21.5,1.8.2,1.21.5,'Runnable(title, fn) .run(fn) when async when done() is invoked with a non-Error object should invoke the callback'
V1.21.5,1.8.2,1.21.5,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.21.5,1.8.2,1.21.5,'serial hooks one'
V1.21.5,1.8.2,1.21.5,'serial hooks two'
V1.21.5,1.8.2,1.21.5,'serial hooks three'
V1.21.5,1.8.2,1.21.5,'serial hooks "after all" hook'
V1.21.5,1.9.0,1.21.5,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.5,1.9.0,1.21.5,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.5,1.9.0,1.21.5,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.5,1.9.0,1.21.5,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.5,1.9.0,1.21.5,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.21.5,1.9.0,1.21.5,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.21.5,1.9.0,1.21.5,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.21.5,1.9.0,1.21.5,'Runnable(title, fn) #enableTimeouts(enabled) should set enabled'
V1.21.5,1.9.0,1.21.5,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.21.5,1.9.0,1.21.5,'Runnable(title, fn) .run(fn) when timeouts are disabled should not error with timeout'
V1.21.5,1.9.0,1.21.5,'Runnable(title, fn) .run(fn) when async when done() is invoked with a non-Error object should invoke the callback'
V1.21.5,1.9.0,1.21.5,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.21.5,1.9.0,1.21.5,'serial hooks one'
V1.21.5,1.9.0,1.21.5,'serial hooks two'
V1.21.5,1.9.0,1.21.5,'serial hooks three'
V1.21.5,1.9.0,1.21.5,'serial hooks "after all" hook'
V1.21.5,1.10.0,1.21.5,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.5,1.10.0,1.21.5,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.5,1.10.0,1.21.5,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.5,1.10.0,1.21.5,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.5,1.10.0,1.21.5,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.21.5,1.10.0,1.21.5,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.21.5,1.10.0,1.21.5,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.21.5,1.10.0,1.21.5,'Runnable(title, fn) #enableTimeouts(enabled) should set enabled'
V1.21.5,1.10.0,1.21.5,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.21.5,1.10.0,1.21.5,'Runnable(title, fn) .run(fn) when timeouts are disabled should not error with timeout'
V1.21.5,1.10.0,1.21.5,'Runnable(title, fn) .run(fn) when async when done() is invoked with a non-Error object should invoke the callback'
V1.21.5,1.10.0,1.21.5,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.21.5,1.10.0,1.21.5,'serial hooks one'
V1.21.5,1.10.0,1.21.5,'serial hooks two'
V1.21.5,1.10.0,1.21.5,'serial hooks three'
V1.21.5,1.10.0,1.21.5,'serial hooks "after all" hook'
V1.21.5,1.11.0,1.21.5,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.5,1.11.0,1.21.5,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.5,1.11.0,1.21.5,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.5,1.11.0,1.21.5,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.5,1.11.0,1.21.5,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.21.5,1.11.0,1.21.5,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.21.5,1.11.0,1.21.5,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.21.5,1.11.0,1.21.5,'Runnable(title, fn) #enableTimeouts(enabled) should set enabled'
V1.21.5,1.11.0,1.21.5,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.21.5,1.11.0,1.21.5,'Runnable(title, fn) .run(fn) when timeouts are disabled should not error with timeout'
V1.21.5,1.11.0,1.21.5,'Runnable(title, fn) .run(fn) when async when done() is invoked with a non-Error object should invoke the callback'
V1.21.5,1.11.0,1.21.5,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.21.5,1.11.0,1.21.5,'serial hooks one'
V1.21.5,1.11.0,1.21.5,'serial hooks two'
V1.21.5,1.11.0,1.21.5,'serial hooks three'
V1.21.5,1.11.0,1.21.5,'serial hooks "after all" hook'
V1.21.5,1.12.0,1.21.5,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.5,1.12.0,1.21.5,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.5,1.12.0,1.21.5,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.5,1.12.0,1.21.5,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.5,1.12.0,1.21.5,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.21.5,1.12.0,1.21.5,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.21.5,1.12.0,1.21.5,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.21.5,1.12.0,1.21.5,'Runnable(title, fn) #enableTimeouts(enabled) should set enabled'
V1.21.5,1.12.0,1.21.5,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.21.5,1.12.0,1.21.5,'Runnable(title, fn) .run(fn) when timeouts are disabled should not error with timeout'
V1.21.5,1.12.0,1.21.5,'Runnable(title, fn) .run(fn) when async when done() is invoked with a non-Error object should invoke the callback'
V1.21.5,1.12.0,1.21.5,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.21.5,1.12.0,1.21.5,'timeouts disabling should allow overriding per-test'
V1.21.5,1.12.0,1.21.5,'timeouts disabling using enableTimeouts(false) should suppress timeout(4)'
V1.21.5,1.12.1,1.21.5,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.5,1.12.1,1.21.5,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.5,1.12.1,1.21.5,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.5,1.12.1,1.21.5,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.5,1.12.1,1.21.5,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.21.5,1.12.1,1.21.5,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.21.5,1.12.1,1.21.5,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.21.5,1.12.1,1.21.5,'Runnable(title, fn) #enableTimeouts(enabled) should set enabled'
V1.21.5,1.12.1,1.21.5,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.21.5,1.12.1,1.21.5,'Runnable(title, fn) .run(fn) when timeouts are disabled should not error with timeout'
V1.21.5,1.12.1,1.21.5,'Runnable(title, fn) .run(fn) when async when done() is invoked with a non-Error object should invoke the callback'
V1.21.5,1.12.1,1.21.5,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.21.5,1.12.1,1.21.5,'timeouts disabling should allow overriding per-test'
V1.21.5,1.12.1,1.21.5,'timeouts disabling using enableTimeouts(false) should suppress timeout(4)'
V1.21.5,1.13.0,1.21.5,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.5,1.13.0,1.21.5,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.5,1.13.0,1.21.5,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.5,1.13.0,1.21.5,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.5,1.13.0,1.21.5,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.21.5,1.13.0,1.21.5,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.21.5,1.13.0,1.21.5,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.21.5,1.13.0,1.21.5,'Runnable(title, fn) #enableTimeouts(enabled) should set enabled'
V1.21.5,1.13.0,1.21.5,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.21.5,1.13.0,1.21.5,'Runnable(title, fn) .run(fn) when timeouts are disabled should not error with timeout'
V1.21.5,1.13.0,1.21.5,'Runnable(title, fn) .run(fn) when async when done() is invoked with a non-Error object should invoke the callback'
V1.21.5,1.13.0,1.21.5,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.21.5,1.13.0,1.21.5,'timeouts disabling should allow overriding per-test'
V1.21.5,1.13.0,1.21.5,'timeouts disabling using enableTimeouts(false) should suppress timeout(4)'
V1.21.5,1.14.0,1.21.5,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.5,1.14.0,1.21.5,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.5,1.14.0,1.21.5,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.5,1.14.0,1.21.5,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.5,1.14.0,1.21.5,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.21.5,1.14.0,1.21.5,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.21.5,1.14.0,1.21.5,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.21.5,1.14.0,1.21.5,'Runnable(title, fn) #enableTimeouts(enabled) should set enabled'
V1.21.5,1.14.0,1.21.5,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.21.5,1.14.0,1.21.5,'Runnable(title, fn) .run(fn) when timeouts are disabled should not error with timeout'
V1.21.5,1.14.0,1.21.5,'Runnable(title, fn) .run(fn) when async when done() is invoked with a non-Error object should invoke the callback'
V1.21.5,1.14.0,1.21.5,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.21.5,1.14.0,1.21.5,'timeouts disabling should allow overriding per-test'
V1.21.5,1.14.0,1.21.5,'timeouts disabling using enableTimeouts(false) should suppress timeout(4)'
V1.21.5,1.14.0-mwo1,1.21.5,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.5,1.14.0-mwo1,1.21.5,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.5,1.14.0-mwo1,1.21.5,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.5,1.14.0-mwo1,1.21.5,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.5,1.14.0-mwo1,1.21.5,'Runner .checkGlobals(test) should emit "fail" when a single new disallowed global is introduced after a single extra global is allowed'
V1.21.5,1.14.0-mwo1,1.21.5,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.21.5,1.14.0-mwo1,1.21.5,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.21.5,1.14.0-mwo1,1.21.5,'Runner .failHook(hook, err) should not emit "end" if suite bail is not true'
V1.21.5,1.14.0-mwo1,1.21.5,'Runnable(title, fn) #enableTimeouts(enabled) should set enabled'
V1.21.5,1.14.0-mwo1,1.21.5,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.21.5,1.14.0-mwo1,1.21.5,'Runnable(title, fn) .run(fn) when timeouts are disabled should not error with timeout'
V1.21.5,1.14.0-mwo1,1.21.5,'Runnable(title, fn) .run(fn) when async when done() is invoked with a non-Error object should invoke the callback'
V1.21.5,1.14.0-mwo1,1.21.5,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.21.5,1.14.0-mwo1,1.21.5,'timeouts disabling should allow overriding per-test'
V1.21.5,1.14.0-mwo1,1.21.5,'timeouts disabling using enableTimeouts(false) should suppress timeout(4)'
V1.21.5,1.15.0,1.21.5,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.5,1.15.0,1.21.5,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.5,1.15.0,1.21.5,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.5,1.15.0,1.21.5,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.5,1.15.0,1.21.5,'Runner .checkGlobals(test) should emit "fail" when a single new disallowed global is introduced after a single extra global is allowed'
V1.21.5,1.15.0,1.21.5,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.21.5,1.15.0,1.21.5,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.21.5,1.15.0,1.21.5,'Runnable(title, fn) #enableTimeouts(enabled) should set enabled'
V1.21.5,1.15.0,1.21.5,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.21.5,1.15.0,1.21.5,'Runnable(title, fn) .run(fn) when timeouts are disabled should not error with timeout'
V1.21.5,1.15.0,1.21.5,'Runnable(title, fn) .run(fn) when async when done() is invoked with a non-Error object should invoke the callback'
V1.21.5,1.15.0,1.21.5,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.21.5,1.15.0,1.21.5,'timeouts disabling should allow overriding per-test'
V1.21.5,1.15.0,1.21.5,'timeouts disabling using enableTimeouts(false) should suppress timeout(4)'
V1.21.5,1.15.1,1.21.5,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.5,1.15.1,1.21.5,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.5,1.15.1,1.21.5,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.5,1.15.1,1.21.5,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.5,1.15.1,1.21.5,'Runner .checkGlobals(test) should emit "fail" when a single new disallowed global is introduced after a single extra global is allowed'
V1.21.5,1.15.1,1.21.5,'Runner .checkGlobals(test) should respect per test whitelisted globals'
V1.21.5,1.15.1,1.21.5,'Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks'
V1.21.5,1.15.1,1.21.5,'Runnable(title, fn) #enableTimeouts(enabled) should set enabled'
V1.21.5,1.15.1,1.21.5,'Runnable(title, fn) #globals should allow for whitelisting globals'
V1.21.5,1.15.1,1.21.5,'Runnable(title, fn) .run(fn) when timeouts are disabled should not error with timeout'
V1.21.5,1.15.1,1.21.5,'Runnable(title, fn) .run(fn) when async when done() is invoked with a non-Error object should invoke the callback'
V1.21.5,1.15.1,1.21.5,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.21.5,1.15.1,1.21.5,'timeouts disabling should allow overriding per-test'
V1.21.5,1.15.1,1.21.5,'timeouts disabling using enableTimeouts(false) should suppress timeout(4)'
V1.21.5,1.16.0,1.21.5,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.5,1.16.0,1.21.5,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.5,1.16.0,1.21.5,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.5,1.16.0,1.21.5,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.5,1.16.0,1.21.5,'Runner .checkGlobals(test) should emit "fail" when a single new disallowed global is introduced after a single extra global is allowed'
V1.21.5,1.16.0,1.21.5,'Runnable(title, fn) #enableTimeouts(enabled) should set enabled'
V1.21.5,1.16.0,1.21.5,'Runnable(title, fn) .run(fn) when timeouts are disabled should not error with timeout'
V1.21.5,1.16.0,1.21.5,'Runnable(title, fn) .run(fn) when async when done() is invoked with a non-Error object should invoke the callback'
V1.21.5,1.16.0,1.21.5,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.21.5,1.16.0,1.21.5,'timeouts disabling should allow overriding per-test'
V1.21.5,1.16.0,1.21.5,'timeouts disabling using enableTimeouts(false) should suppress timeout(4)'
V1.21.5,1.16.1,1.21.5,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.5,1.16.1,1.21.5,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.5,1.16.1,1.21.5,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.5,1.16.1,1.21.5,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.5,1.16.1,1.21.5,'Runner .checkGlobals(test) should emit "fail" when a single new disallowed global is introduced after a single extra global is allowed'
V1.21.5,1.16.1,1.21.5,'Runnable(title, fn) #enableTimeouts(enabled) should set enabled'
V1.21.5,1.16.1,1.21.5,'Runnable(title, fn) .run(fn) when timeouts are disabled should not error with timeout'
V1.21.5,1.16.1,1.21.5,'Runnable(title, fn) .run(fn) when async when done() is invoked with a non-Error object should invoke the callback'
V1.21.5,1.16.1,1.21.5,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.21.5,1.16.1,1.21.5,'timeouts disabling should allow overriding per-test'
V1.21.5,1.16.1,1.21.5,'timeouts disabling using enableTimeouts(false) should suppress timeout(4)'
V1.21.5,1.16.2,1.21.5,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.5,1.16.2,1.21.5,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.5,1.16.2,1.21.5,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.5,1.16.2,1.21.5,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.5,1.16.2,1.21.5,'Runner .checkGlobals(test) should emit "fail" when a single new disallowed global is introduced after a single extra global is allowed'
V1.21.5,1.16.2,1.21.5,'Runnable(title, fn) #enableTimeouts(enabled) should set enabled'
V1.21.5,1.16.2,1.21.5,'Runnable(title, fn) .run(fn) when timeouts are disabled should not error with timeout'
V1.21.5,1.16.2,1.21.5,'Runnable(title, fn) .run(fn) when async when done() is invoked with a non-Error object should invoke the callback'
V1.21.5,1.16.2,1.21.5,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.21.5,1.16.2,1.21.5,'timeouts disabling should allow overriding per-test'
V1.21.5,1.16.2,1.21.5,'timeouts disabling using enableTimeouts(false) should suppress timeout(4)'
V1.21.5,1.17.0,1.21.5,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.5,1.17.0,1.21.5,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.5,1.17.0,1.21.5,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.5,1.17.0,1.21.5,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.5,1.17.0,1.21.5,'Runner .checkGlobals(test) should emit "fail" when a single new disallowed global is introduced after a single extra global is allowed'
V1.21.5,1.17.0,1.21.5,'Runnable(title, fn) #enableTimeouts(enabled) should set enabled'
V1.21.5,1.17.0,1.21.5,'Runnable(title, fn) .run(fn) when timeouts are disabled should not error with timeout'
V1.21.5,1.17.0,1.21.5,'Runnable(title, fn) .run(fn) when async when done() is invoked with a non-Error object should invoke the callback'
V1.21.5,1.17.0,1.21.5,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.21.5,1.17.0,1.21.5,'timeouts disabling should allow overriding per-test'
V1.21.5,1.17.0,1.21.5,'timeouts disabling using enableTimeouts(false) should suppress timeout(4)'
V1.21.5,1.17.1,1.21.5,'Suite .beforeAll() wraps the passed in function in a Hook appends title to hook'
V1.21.5,1.17.1,1.21.5,'Suite .afterAll() wraps the passed in function in a Hook appends title to hook'
V1.21.5,1.17.1,1.21.5,'Suite .beforeEach() wraps the passed in function in a Hook appends title to hook'
V1.21.5,1.17.1,1.21.5,'Suite .afterEach() wraps the passed in function in a Hook appends title to hook'
V1.21.5,1.17.1,1.21.5,'Runnable(title, fn) #enableTimeouts(enabled) should set enabled'
V1.21.5,1.17.1,1.21.5,'Runnable(title, fn) .run(fn) when timeouts are disabled should not error with timeout'
V1.21.5,1.17.1,1.21.5,'Runnable(title, fn) .run(fn) when async when done() is invoked with a non-Error object should invoke the callback'
V1.21.5,1.17.1,1.21.5,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback'
V1.21.5,1.17.1,1.21.5,'timeouts disabling should allow overriding per-test'
V1.21.5,1.17.1,1.21.5,'timeouts disabling using enableTimeouts(false) should suppress timeout(4)'
V1.21.5,1.18.0,1.21.5,'Runnable(title, fn) #enableTimeouts(enabled) should set enabled'
V1.21.5,1.18.0,1.21.5,'Runnable(title, fn) .run(fn) when timeouts are disabled should not error with timeout'
V1.21.5,1.18.0,1.21.5,'Runnable(title, fn) .run(fn) when async when done() is invoked with a non-Error object should invoke the callback'
V1.21.5,1.18.0,1.21.5,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected without a reason should invoke the callback'
V1.21.5,1.18.0,1.21.5,'timeouts disabling should allow overriding per-test'
V1.21.5,1.18.0,1.21.5,'timeouts disabling using enableTimeouts(false) should suppress timeout(4)'
V1.21.5,1.18.1,1.21.5,'Runnable(title, fn) #enableTimeouts(enabled) should set enabled'
V1.21.5,1.18.1,1.21.5,'Runnable(title, fn) .run(fn) when timeouts are disabled should not error with timeout'
V1.21.5,1.18.1,1.21.5,'Runnable(title, fn) .run(fn) when async when done() is invoked with a non-Error object should invoke the callback'
V1.21.5,1.18.1,1.21.5,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected without a reason should invoke the callback'
V1.21.5,1.18.1,1.21.5,'timeouts disabling should allow overriding per-test'
V1.21.5,1.18.1,1.21.5,'timeouts disabling using enableTimeouts(false) should suppress timeout(4)'
V1.21.5,1.18.2,1.21.5,'Runnable(title, fn) #enableTimeouts(enabled) should set enabled'
V1.21.5,1.18.2,1.21.5,'Runnable(title, fn) .run(fn) when timeouts are disabled should not error with timeout'
V1.21.5,1.18.2,1.21.5,'Runnable(title, fn) .run(fn) when async when done() is invoked with a non-Error object should invoke the callback'
V1.21.5,1.18.2,1.21.5,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected without a reason should invoke the callback'
V1.21.5,1.18.2,1.21.5,'timeouts disabling should allow overriding per-test'
V1.21.5,1.18.2,1.21.5,'timeouts disabling using enableTimeouts(false) should suppress timeout(4)'
V1.21.5,1.19.0,1.21.5,'Runnable(title, fn) #enableTimeouts(enabled) should set enabled'
V1.21.5,1.19.0,1.21.5,'Runnable(title, fn) .run(fn) when timeouts are disabled should not error with timeout'
V1.21.5,1.19.0,1.21.5,'Runnable(title, fn) .run(fn) when async when done() is invoked with a non-Error object should invoke the callback'
V1.21.5,1.19.0,1.21.5,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected without a reason should invoke the callback'
V1.21.5,1.19.0,1.21.5,'timeouts disabling should allow overriding per-test'
V1.21.5,1.19.0,1.21.5,'timeouts disabling using enableTimeouts(false) should suppress timeout(4)'
V1.21.5,1.20.0,1.21.5,'Runnable(title, fn) #enableTimeouts(enabled) should set enabled'
V1.21.5,1.20.0,1.21.5,'Runnable(title, fn) .run(fn) when timeouts are disabled should not error with timeout'
V1.21.5,1.20.0,1.21.5,'Runnable(title, fn) .run(fn) when async when done() is invoked with a non-Error object should invoke the callback'
V1.21.5,1.20.0,1.21.5,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected without a reason should invoke the callback'
V1.21.5,1.20.0,1.21.5,'timeouts disabling should allow overriding per-test'
V1.21.5,1.20.0,1.21.5,'timeouts disabling using enableTimeouts(false) should suppress timeout(4)'
V1.21.5,1.20.1,1.21.5,'Runnable(title, fn) #enableTimeouts(enabled) should set enabled'
V1.21.5,1.20.1,1.21.5,'Runnable(title, fn) .run(fn) when timeouts are disabled should not error with timeout'
V1.21.5,1.20.1,1.21.5,'Runnable(title, fn) .run(fn) when async when done() is invoked with a non-Error object should invoke the callback'
V1.21.5,1.20.1,1.21.5,'Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected without a reason should invoke the callback'
V1.21.5,1.20.1,1.21.5,'timeouts disabling should allow overriding per-test'
V1.21.5,1.20.1,1.21.5,'timeouts disabling using enableTimeouts(false) should suppress timeout(4)'
V1.21.5,1.21.0,1.21.5,'timeouts disabling should work with timeout(0)'
V1.21.5,1.21.0,1.21.5,'timeouts disabling using enableTimeouts(false) should suppress timeout(4)'
V1.21.5,1.21.0,1.21.5,'timeouts disabling suite-level should work with timeout(0)'
V1.21.5,1.21.0,1.21.5,'timeouts disabling suite-level nested suite should work with timeout(0)'
V1.21.5,1.21.1,1.21.5,'timeouts disabling should work with timeout(0)'
V1.21.5,1.21.1,1.21.5,'timeouts disabling using enableTimeouts(false) should suppress timeout(4)'
V1.21.5,1.21.1,1.21.5,'timeouts disabling suite-level should work with timeout(0)'
V1.21.5,1.21.1,1.21.5,'timeouts disabling suite-level nested suite should work with timeout(0)'
V1.21.5,1.21.2,1.21.5,'timeouts disabling should work with timeout(0)'
V1.21.5,1.21.2,1.21.5,'timeouts disabling using enableTimeouts(false) should suppress timeout(4)'
V1.21.5,1.21.2,1.21.5,'timeouts disabling suite-level should work with timeout(0)'
V1.21.5,1.21.2,1.21.5,'timeouts disabling suite-level nested suite should work with timeout(0)'
V1.21.5,1.21.3,1.21.5,'timeouts disabling should work with timeout(0)'
V1.21.5,1.21.3,1.21.5,'timeouts disabling using enableTimeouts(false) should suppress timeout(4)'
V1.21.5,1.21.3,1.21.5,'timeouts disabling suite-level should work with timeout(0)'
V1.21.5,1.21.3,1.21.5,'timeouts disabling suite-level nested suite should work with timeout(0)'
V1.21.5,1.21.4,1.21.5,'timeouts disabling using enableTimeouts(false) should suppress timeout(4)'
V1.21.5,1.21.4,1.21.5,'timeouts disabling suite-level should work with timeout(0)'
V1.21.5,1.21.4,1.21.5,'timeouts disabling suite-level nested suite should work with timeout(0)'
V2.1.0,2.0.0,2.1.0,'Runner .hook(name, fn) should execute hooks after failed test if suite bail is true'
V2.1.0,2.0.0,2.1.0,'Runnable(title, fn) .run(fn) when async when an exception is thrown should not throw its own exception if passed a non-object'
V2.1.0,2.0.1,2.1.0,'Runner .hook(name, fn) should execute hooks after failed test if suite bail is true'
V2.1.0,2.0.1,2.1.0,'Runnable(title, fn) .run(fn) when async when an exception is thrown should not throw its own exception if passed a non-object'
V2.2.0,2.0.0,2.2.0,'Runner .hook(name, fn) should execute hooks after failed test if suite bail is true'
V2.2.0,2.0.0,2.2.0,'Runner .fail(test, err) should emit a helpful message when failed with an Object'
V2.2.0,2.0.0,2.2.0,'Runner .fail(test, err) should emit a helpful message when failed with an Array'
V2.2.0,2.0.0,2.2.0,'Runnable(title, fn) .run(fn) when async when an exception is thrown should not throw its own exception if passed a non-object'
V2.2.0,2.0.0,2.2.0,'skip in test should skip immediately'
V2.2.0,2.0.0,2.2.0,'skip in before "before all" hook'
V2.2.0,2.0.0,2.2.0,'skip in beforeEach "before each" hook'
V2.2.0,2.0.1,2.2.0,'Runner .hook(name, fn) should execute hooks after failed test if suite bail is true'
V2.2.0,2.0.1,2.2.0,'Runner .fail(test, err) should emit a helpful message when failed with an Object'
V2.2.0,2.0.1,2.2.0,'Runner .fail(test, err) should emit a helpful message when failed with an Array'
V2.2.0,2.0.1,2.2.0,'Runnable(title, fn) .run(fn) when async when an exception is thrown should not throw its own exception if passed a non-object'
V2.2.0,2.0.1,2.2.0,'skip in test should skip immediately'
V2.2.0,2.0.1,2.2.0,'skip in before "before all" hook'
V2.2.0,2.0.1,2.2.0,'skip in beforeEach "before each" hook'
V2.2.1,2.0.0,2.2.1,'Runner .hook(name, fn) should execute hooks after failed test if suite bail is true'
V2.2.1,2.0.0,2.2.1,'Runner .fail(test, err) should emit a helpful message when failed with an Object'
V2.2.1,2.0.0,2.2.1,'Runner .fail(test, err) should emit a helpful message when failed with an Array'
V2.2.1,2.0.0,2.2.1,'Runnable(title, fn) .run(fn) when async when an exception is thrown should not throw its own exception if passed a non-object'
V2.2.1,2.0.0,2.2.1,'skip in test should skip immediately'
V2.2.1,2.0.0,2.2.1,'skip in before "before all" hook'
V2.2.1,2.0.0,2.2.1,'skip in beforeEach "before each" hook'
V2.2.1,2.0.1,2.2.1,'Runner .hook(name, fn) should execute hooks after failed test if suite bail is true'
V2.2.1,2.0.1,2.2.1,'Runner .fail(test, err) should emit a helpful message when failed with an Object'
V2.2.1,2.0.1,2.2.1,'Runner .fail(test, err) should emit a helpful message when failed with an Array'
V2.2.1,2.0.1,2.2.1,'Runnable(title, fn) .run(fn) when async when an exception is thrown should not throw its own exception if passed a non-object'
V2.2.1,2.0.1,2.2.1,'skip in test should skip immediately'
V2.2.1,2.0.1,2.2.1,'skip in before "before all" hook'
V2.2.1,2.0.1,2.2.1,'skip in beforeEach "before each" hook'
V2.2.2,2.0.0,2.2.2,'Runner .hook(name, fn) should execute hooks after failed test if suite bail is true'
V2.2.2,2.0.0,2.2.2,'Runner .fail(test, err) should emit a helpful message when failed with an Object'
V2.2.2,2.0.0,2.2.2,'Runner .fail(test, err) should emit a helpful message when failed with an Array'
V2.2.2,2.0.0,2.2.2,'Runner stackTrace shortStackTrace should prettify the stack-trace'
V2.2.2,2.0.0,2.2.2,'Runnable(title, fn) .run(fn) when async when an exception is thrown should not throw its own exception if passed a non-object'
V2.2.2,2.0.0,2.2.2,'skip in test should skip immediately'
V2.2.2,2.0.0,2.2.2,'skip in before "before all" hook'
V2.2.2,2.0.0,2.2.2,'skip in beforeEach "before each" hook'
V2.2.2,2.0.1,2.2.2,'Runner .hook(name, fn) should execute hooks after failed test if suite bail is true'
V2.2.2,2.0.1,2.2.2,'Runner .fail(test, err) should emit a helpful message when failed with an Object'
V2.2.2,2.0.1,2.2.2,'Runner .fail(test, err) should emit a helpful message when failed with an Array'
V2.2.2,2.0.1,2.2.2,'Runner stackTrace shortStackTrace should prettify the stack-trace'
V2.2.2,2.0.1,2.2.2,'Runnable(title, fn) .run(fn) when async when an exception is thrown should not throw its own exception if passed a non-object'
V2.2.2,2.0.1,2.2.2,'skip in test should skip immediately'
V2.2.2,2.0.1,2.2.2,'skip in before "before all" hook'
V2.2.2,2.0.1,2.2.2,'skip in beforeEach "before each" hook'
V2.2.3,2.0.0,2.2.3,'Runner .hook(name, fn) should execute hooks after failed test if suite bail is true'
V2.2.3,2.0.0,2.2.3,'Runner .fail(test, err) should emit a helpful message when failed with an Object'
V2.2.3,2.0.0,2.2.3,'Runner .fail(test, err) should emit a helpful message when failed with an Array'
V2.2.3,2.0.0,2.2.3,'Runner stackTrace shortStackTrace should prettify the stack-trace'
V2.2.3,2.0.0,2.2.3,'Runnable(title, fn) .run(fn) when async when an exception is thrown should not throw its own exception if passed a non-object'
V2.2.3,2.0.0,2.2.3,'skip in test should skip immediately'
V2.2.3,2.0.0,2.2.3,'skip in before "before all" hook'
V2.2.3,2.0.0,2.2.3,'skip in beforeEach "before each" hook'
V2.2.3,2.0.1,2.2.3,'Runner .hook(name, fn) should execute hooks after failed test if suite bail is true'
V2.2.3,2.0.1,2.2.3,'Runner .fail(test, err) should emit a helpful message when failed with an Object'
V2.2.3,2.0.1,2.2.3,'Runner .fail(test, err) should emit a helpful message when failed with an Array'
V2.2.3,2.0.1,2.2.3,'Runner stackTrace shortStackTrace should prettify the stack-trace'
V2.2.3,2.0.1,2.2.3,'Runnable(title, fn) .run(fn) when async when an exception is thrown should not throw its own exception if passed a non-object'
V2.2.3,2.0.1,2.2.3,'skip in test should skip immediately'
V2.2.3,2.0.1,2.2.3,'skip in before "before all" hook'
V2.2.3,2.0.1,2.2.3,'skip in beforeEach "before each" hook'
V2.2.4,2.0.0,2.2.4,'Runner .hook(name, fn) should execute hooks after failed test if suite bail is true'
V2.2.4,2.0.0,2.2.4,'Runner .fail(test, err) should emit a helpful message when failed with an Object'
V2.2.4,2.0.0,2.2.4,'Runner .fail(test, err) should emit a helpful message when failed with an Array'
V2.2.4,2.0.0,2.2.4,'Runner stackTrace shortStackTrace should prettify the stack-trace'
V2.2.4,2.0.0,2.2.4,'Runnable(title, fn) .run(fn) when async when an exception is thrown should not throw its own exception if passed a non-object'
V2.2.4,2.0.0,2.2.4,'skip in test should skip immediately'
V2.2.4,2.0.0,2.2.4,'skip in before "before all" hook'
V2.2.4,2.0.0,2.2.4,'skip in beforeEach "before each" hook'
V2.2.4,2.0.1,2.2.4,'Runner .hook(name, fn) should execute hooks after failed test if suite bail is true'
V2.2.4,2.0.1,2.2.4,'Runner .fail(test, err) should emit a helpful message when failed with an Object'
V2.2.4,2.0.1,2.2.4,'Runner .fail(test, err) should emit a helpful message when failed with an Array'
V2.2.4,2.0.1,2.2.4,'Runner stackTrace shortStackTrace should prettify the stack-trace'
V2.2.4,2.0.1,2.2.4,'Runnable(title, fn) .run(fn) when async when an exception is thrown should not throw its own exception if passed a non-object'
V2.2.4,2.0.1,2.2.4,'skip in test should skip immediately'
V2.2.4,2.0.1,2.2.4,'skip in before "before all" hook'
V2.2.4,2.0.1,2.2.4,'skip in beforeEach "before each" hook'
V2.2.5,2.0.0,2.2.5,'Runner .hook(name, fn) should execute hooks after failed test if suite bail is true'
V2.2.5,2.0.0,2.2.5,'Runner .fail(test, err) should emit a helpful message when failed with an Object'
V2.2.5,2.0.0,2.2.5,'Runner .fail(test, err) should emit a helpful message when failed with an Array'
V2.2.5,2.0.0,2.2.5,'Runner stackTrace shortStackTrace should prettify the stack-trace'
V2.2.5,2.0.0,2.2.5,'Runnable(title, fn) .run(fn) when async when an exception is thrown should not throw its own exception if passed a non-object'
V2.2.5,2.0.1,2.2.5,'Runner .hook(name, fn) should execute hooks after failed test if suite bail is true'
V2.2.5,2.0.1,2.2.5,'Runner .fail(test, err) should emit a helpful message when failed with an Object'
V2.2.5,2.0.1,2.2.5,'Runner .fail(test, err) should emit a helpful message when failed with an Array'
V2.2.5,2.0.1,2.2.5,'Runner stackTrace shortStackTrace should prettify the stack-trace'
V2.2.5,2.0.1,2.2.5,'Runnable(title, fn) .run(fn) when async when an exception is thrown should not throw its own exception if passed a non-object'
V2.3.0,2.0.0,2.3.0,'Runner .hook(name, fn) should execute hooks after failed test if suite bail is true'
V2.3.0,2.0.0,2.3.0,'Runner .fail(test, err) should emit a helpful message when failed with an Object'
V2.3.0,2.0.0,2.3.0,'Runner .fail(test, err) should emit a helpful message when failed with an Array'
V2.3.0,2.0.0,2.3.0,'Runner .failHook(hook, err) should augment hook title with current test title'
V2.3.0,2.0.0,2.3.0,'Runner allowUncaught should allow unhandled errors to propagate through'
V2.3.0,2.0.0,2.3.0,'Runner stackTrace shortStackTrace should prettify the stack-trace'
V2.3.0,2.0.0,2.3.0,'Runnable(title, fn) .run(fn) when sync when an exception is thrown and is allowed to remain uncaught throws an error when it is allowed'
V2.3.0,2.0.0,2.3.0,'Runnable(title, fn) .run(fn) when async when an exception is thrown should not throw its own exception if passed a non-object'
V2.3.0,2.0.0,2.3.0,'Runnable(title, fn) .run(fn) when async when an exception is thrown and is allowed to remain uncaught throws an error when it is allowed'
V2.3.0,2.0.1,2.3.0,'Runner .hook(name, fn) should execute hooks after failed test if suite bail is true'
V2.3.0,2.0.1,2.3.0,'Runner .fail(test, err) should emit a helpful message when failed with an Object'
V2.3.0,2.0.1,2.3.0,'Runner .fail(test, err) should emit a helpful message when failed with an Array'
V2.3.0,2.0.1,2.3.0,'Runner .failHook(hook, err) should augment hook title with current test title'
V2.3.0,2.0.1,2.3.0,'Runner allowUncaught should allow unhandled errors to propagate through'
V2.3.0,2.0.1,2.3.0,'Runner stackTrace shortStackTrace should prettify the stack-trace'
V2.3.0,2.0.1,2.3.0,'Runnable(title, fn) .run(fn) when sync when an exception is thrown and is allowed to remain uncaught throws an error when it is allowed'
V2.3.0,2.0.1,2.3.0,'Runnable(title, fn) .run(fn) when async when an exception is thrown should not throw its own exception if passed a non-object'
V2.3.0,2.0.1,2.3.0,'Runnable(title, fn) .run(fn) when async when an exception is thrown and is allowed to remain uncaught throws an error when it is allowed'
V2.3.4,2.0.0,2.3.4,'Runner .hook(name, fn) should execute hooks after failed test if suite bail is true'
V2.3.4,2.0.0,2.3.4,'Runner .fail(test, err) should emit a helpful message when failed with an Object'
V2.3.4,2.0.0,2.3.4,'Runner .fail(test, err) should emit a helpful message when failed with an Array'
V2.3.4,2.0.0,2.3.4,'Runner .failHook(hook, err) should augment hook title with current test title'
V2.3.4,2.0.0,2.3.4,'Runner allowUncaught should allow unhandled errors to propagate through'
V2.3.4,2.0.0,2.3.4,'Runner stackTrace shortStackTrace should prettify the stack-trace'
V2.3.4,2.0.0,2.3.4,'Runnable(title, fn) .run(fn) when sync when an exception is thrown and is allowed to remain uncaught throws an error when it is allowed'
V2.3.4,2.0.0,2.3.4,'Runnable(title, fn) .run(fn) when async when an exception is thrown should not throw its own exception if passed a non-object'
V2.3.4,2.0.0,2.3.4,'Runnable(title, fn) .run(fn) when async when an exception is thrown and is allowed to remain uncaught throws an error when it is allowed'
V2.3.4,2.0.1,2.3.4,'Runner .hook(name, fn) should execute hooks after failed test if suite bail is true'
V2.3.4,2.0.1,2.3.4,'Runner .fail(test, err) should emit a helpful message when failed with an Object'
V2.3.4,2.0.1,2.3.4,'Runner .fail(test, err) should emit a helpful message when failed with an Array'
V2.3.4,2.0.1,2.3.4,'Runner .failHook(hook, err) should augment hook title with current test title'
V2.3.4,2.0.1,2.3.4,'Runner allowUncaught should allow unhandled errors to propagate through'
V2.3.4,2.0.1,2.3.4,'Runner stackTrace shortStackTrace should prettify the stack-trace'
V2.3.4,2.0.1,2.3.4,'Runnable(title, fn) .run(fn) when sync when an exception is thrown and is allowed to remain uncaught throws an error when it is allowed'
V2.3.4,2.0.1,2.3.4,'Runnable(title, fn) .run(fn) when async when an exception is thrown should not throw its own exception if passed a non-object'
V2.3.4,2.0.1,2.3.4,'Runnable(title, fn) .run(fn) when async when an exception is thrown and is allowed to remain uncaught throws an error when it is allowed'
Vv2.3.1,2.0.0,v2.3.1,'Runner .hook(name, fn) should execute hooks after failed test if suite bail is true'
Vv2.3.1,2.0.0,v2.3.1,'Runner .fail(test, err) should emit a helpful message when failed with an Object'
Vv2.3.1,2.0.0,v2.3.1,'Runner .fail(test, err) should emit a helpful message when failed with an Array'
Vv2.3.1,2.0.0,v2.3.1,'Runner .failHook(hook, err) should augment hook title with current test title'
Vv2.3.1,2.0.0,v2.3.1,'Runner allowUncaught should allow unhandled errors to propagate through'
Vv2.3.1,2.0.0,v2.3.1,'Runner stackTrace shortStackTrace should prettify the stack-trace'
Vv2.3.1,2.0.0,v2.3.1,'Runnable(title, fn) .run(fn) when sync when an exception is thrown and is allowed to remain uncaught throws an error when it is allowed'
Vv2.3.1,2.0.0,v2.3.1,'Runnable(title, fn) .run(fn) when async when an exception is thrown should not throw its own exception if passed a non-object'
Vv2.3.1,2.0.0,v2.3.1,'Runnable(title, fn) .run(fn) when async when an exception is thrown and is allowed to remain uncaught throws an error when it is allowed'
Vv2.3.1,2.0.1,v2.3.1,'Runner .hook(name, fn) should execute hooks after failed test if suite bail is true'
Vv2.3.1,2.0.1,v2.3.1,'Runner .fail(test, err) should emit a helpful message when failed with an Object'
Vv2.3.1,2.0.1,v2.3.1,'Runner .fail(test, err) should emit a helpful message when failed with an Array'
Vv2.3.1,2.0.1,v2.3.1,'Runner .failHook(hook, err) should augment hook title with current test title'
Vv2.3.1,2.0.1,v2.3.1,'Runner allowUncaught should allow unhandled errors to propagate through'
Vv2.3.1,2.0.1,v2.3.1,'Runner stackTrace shortStackTrace should prettify the stack-trace'
Vv2.3.1,2.0.1,v2.3.1,'Runnable(title, fn) .run(fn) when sync when an exception is thrown and is allowed to remain uncaught throws an error when it is allowed'
Vv2.3.1,2.0.1,v2.3.1,'Runnable(title, fn) .run(fn) when async when an exception is thrown should not throw its own exception if passed a non-object'
Vv2.3.1,2.0.1,v2.3.1,'Runnable(title, fn) .run(fn) when async when an exception is thrown and is allowed to remain uncaught throws an error when it is allowed'
Vv2.3.2,2.0.0,v2.3.2,'Runner .hook(name, fn) should execute hooks after failed test if suite bail is true'
Vv2.3.2,2.0.0,v2.3.2,'Runner .fail(test, err) should emit a helpful message when failed with an Object'
Vv2.3.2,2.0.0,v2.3.2,'Runner .fail(test, err) should emit a helpful message when failed with an Array'
Vv2.3.2,2.0.0,v2.3.2,'Runner .failHook(hook, err) should augment hook title with current test title'
Vv2.3.2,2.0.0,v2.3.2,'Runner allowUncaught should allow unhandled errors to propagate through'
Vv2.3.2,2.0.0,v2.3.2,'Runner stackTrace shortStackTrace should prettify the stack-trace'
Vv2.3.2,2.0.0,v2.3.2,'Runnable(title, fn) .run(fn) when sync when an exception is thrown and is allowed to remain uncaught throws an error when it is allowed'
Vv2.3.2,2.0.0,v2.3.2,'Runnable(title, fn) .run(fn) when async when an exception is thrown should not throw its own exception if passed a non-object'
Vv2.3.2,2.0.0,v2.3.2,'Runnable(title, fn) .run(fn) when async when an exception is thrown and is allowed to remain uncaught throws an error when it is allowed'
Vv2.3.2,2.0.1,v2.3.2,'Runner .hook(name, fn) should execute hooks after failed test if suite bail is true'
Vv2.3.2,2.0.1,v2.3.2,'Runner .fail(test, err) should emit a helpful message when failed with an Object'
Vv2.3.2,2.0.1,v2.3.2,'Runner .fail(test, err) should emit a helpful message when failed with an Array'
Vv2.3.2,2.0.1,v2.3.2,'Runner .failHook(hook, err) should augment hook title with current test title'
Vv2.3.2,2.0.1,v2.3.2,'Runner allowUncaught should allow unhandled errors to propagate through'
Vv2.3.2,2.0.1,v2.3.2,'Runner stackTrace shortStackTrace should prettify the stack-trace'
Vv2.3.2,2.0.1,v2.3.2,'Runnable(title, fn) .run(fn) when sync when an exception is thrown and is allowed to remain uncaught throws an error when it is allowed'
Vv2.3.2,2.0.1,v2.3.2,'Runnable(title, fn) .run(fn) when async when an exception is thrown should not throw its own exception if passed a non-object'
Vv2.3.2,2.0.1,v2.3.2,'Runnable(title, fn) .run(fn) when async when an exception is thrown and is allowed to remain uncaught throws an error when it is allowed'
Vv2.3.3,2.0.0,v2.3.3,'Runner .hook(name, fn) should execute hooks after failed test if suite bail is true'
Vv2.3.3,2.0.0,v2.3.3,'Runner .fail(test, err) should emit a helpful message when failed with an Object'
Vv2.3.3,2.0.0,v2.3.3,'Runner .fail(test, err) should emit a helpful message when failed with an Array'
Vv2.3.3,2.0.0,v2.3.3,'Runner .failHook(hook, err) should augment hook title with current test title'
Vv2.3.3,2.0.0,v2.3.3,'Runner allowUncaught should allow unhandled errors to propagate through'
Vv2.3.3,2.0.0,v2.3.3,'Runner stackTrace shortStackTrace should prettify the stack-trace'
Vv2.3.3,2.0.0,v2.3.3,'Runnable(title, fn) .run(fn) when sync when an exception is thrown and is allowed to remain uncaught throws an error when it is allowed'
Vv2.3.3,2.0.0,v2.3.3,'Runnable(title, fn) .run(fn) when async when an exception is thrown should not throw its own exception if passed a non-object'
Vv2.3.3,2.0.0,v2.3.3,'Runnable(title, fn) .run(fn) when async when an exception is thrown and is allowed to remain uncaught throws an error when it is allowed'
Vv2.3.3,2.0.1,v2.3.3,'Runner .hook(name, fn) should execute hooks after failed test if suite bail is true'
Vv2.3.3,2.0.1,v2.3.3,'Runner .fail(test, err) should emit a helpful message when failed with an Object'
Vv2.3.3,2.0.1,v2.3.3,'Runner .fail(test, err) should emit a helpful message when failed with an Array'
Vv2.3.3,2.0.1,v2.3.3,'Runner .failHook(hook, err) should augment hook title with current test title'
Vv2.3.3,2.0.1,v2.3.3,'Runner allowUncaught should allow unhandled errors to propagate through'
Vv2.3.3,2.0.1,v2.3.3,'Runner stackTrace shortStackTrace should prettify the stack-trace'
Vv2.3.3,2.0.1,v2.3.3,'Runnable(title, fn) .run(fn) when sync when an exception is thrown and is allowed to remain uncaught throws an error when it is allowed'
Vv2.3.3,2.0.1,v2.3.3,'Runnable(title, fn) .run(fn) when async when an exception is thrown should not throw its own exception if passed a non-object'
Vv2.3.3,2.0.1,v2.3.3,'Runnable(title, fn) .run(fn) when async when an exception is thrown and is allowed to remain uncaught throws an error when it is allowed'
Vv2.4.1,2.0.0,v2.4.1,'Runner .hook(name, fn) should execute hooks after failed test if suite bail is true'
Vv2.4.1,2.0.0,v2.4.1,'Runner .fail(test, err) should emit a helpful message when failed with an Object'
Vv2.4.1,2.0.0,v2.4.1,'Runner .fail(test, err) should emit a helpful message when failed with an Array'
Vv2.4.1,2.0.0,v2.4.1,'Runner .failHook(hook, err) should augment hook title with current test title'
Vv2.4.1,2.0.0,v2.4.1,'Runner allowUncaught should allow unhandled errors to propagate through'
Vv2.4.1,2.0.0,v2.4.1,'Runner stackTrace shortStackTrace should prettify the stack-trace'
Vv2.4.1,2.0.0,v2.4.1,'Runnable(title, fn) #retries(n) should set the number of retries'
Vv2.4.1,2.0.0,v2.4.1,'Runnable(title, fn) .run(fn) when sync when an exception is thrown and is allowed to remain uncaught throws an error when it is allowed'
Vv2.4.1,2.0.0,v2.4.1,'Runnable(title, fn) .run(fn) when async when an exception is thrown should not throw its own exception if passed a non-object'
Vv2.4.1,2.0.0,v2.4.1,'Runnable(title, fn) .run(fn) when async when an exception is thrown and is allowed to remain uncaught throws an error when it is allowed'
Vv2.4.1,2.0.1,v2.4.1,'Runner .hook(name, fn) should execute hooks after failed test if suite bail is true'
Vv2.4.1,2.0.1,v2.4.1,'Runner .fail(test, err) should emit a helpful message when failed with an Object'
Vv2.4.1,2.0.1,v2.4.1,'Runner .fail(test, err) should emit a helpful message when failed with an Array'
Vv2.4.1,2.0.1,v2.4.1,'Runner .failHook(hook, err) should augment hook title with current test title'
Vv2.4.1,2.0.1,v2.4.1,'Runner allowUncaught should allow unhandled errors to propagate through'
Vv2.4.1,2.0.1,v2.4.1,'Runner stackTrace shortStackTrace should prettify the stack-trace'
Vv2.4.1,2.0.1,v2.4.1,'Runnable(title, fn) #retries(n) should set the number of retries'
Vv2.4.1,2.0.1,v2.4.1,'Runnable(title, fn) .run(fn) when sync when an exception is thrown and is allowed to remain uncaught throws an error when it is allowed'
Vv2.4.1,2.0.1,v2.4.1,'Runnable(title, fn) .run(fn) when async when an exception is thrown should not throw its own exception if passed a non-object'
Vv2.4.1,2.0.1,v2.4.1,'Runnable(title, fn) .run(fn) when async when an exception is thrown and is allowed to remain uncaught throws an error when it is allowed'
Vv2.4.2,2.0.0,v2.4.2,'Runner .hook(name, fn) should execute hooks after failed test if suite bail is true'
Vv2.4.2,2.0.0,v2.4.2,'Runner .fail(test, err) should emit a helpful message when failed with an Object'
Vv2.4.2,2.0.0,v2.4.2,'Runner .fail(test, err) should emit a helpful message when failed with an Array'
Vv2.4.2,2.0.0,v2.4.2,'Runner .failHook(hook, err) should augment hook title with current test title'
Vv2.4.2,2.0.0,v2.4.2,'Runner allowUncaught should allow unhandled errors to propagate through'
Vv2.4.2,2.0.0,v2.4.2,'Runner stackTrace shortStackTrace should prettify the stack-trace'
Vv2.4.2,2.0.0,v2.4.2,'Runnable(title, fn) #retries(n) should set the number of retries'
Vv2.4.2,2.0.0,v2.4.2,'Runnable(title, fn) .run(fn) when sync when an exception is thrown and is allowed to remain uncaught throws an error when it is allowed'
Vv2.4.2,2.0.0,v2.4.2,'Runnable(title, fn) .run(fn) when async when an exception is thrown should not throw its own exception if passed a non-object'
Vv2.4.2,2.0.0,v2.4.2,'Runnable(title, fn) .run(fn) when async when an exception is thrown and is allowed to remain uncaught throws an error when it is allowed'
Vv2.4.2,2.0.1,v2.4.2,'Runner .hook(name, fn) should execute hooks after failed test if suite bail is true'
Vv2.4.2,2.0.1,v2.4.2,'Runner .fail(test, err) should emit a helpful message when failed with an Object'
Vv2.4.2,2.0.1,v2.4.2,'Runner .fail(test, err) should emit a helpful message when failed with an Array'
Vv2.4.2,2.0.1,v2.4.2,'Runner .failHook(hook, err) should augment hook title with current test title'
Vv2.4.2,2.0.1,v2.4.2,'Runner allowUncaught should allow unhandled errors to propagate through'
Vv2.4.2,2.0.1,v2.4.2,'Runner stackTrace shortStackTrace should prettify the stack-trace'
Vv2.4.2,2.0.1,v2.4.2,'Runnable(title, fn) #retries(n) should set the number of retries'
Vv2.4.2,2.0.1,v2.4.2,'Runnable(title, fn) .run(fn) when sync when an exception is thrown and is allowed to remain uncaught throws an error when it is allowed'
Vv2.4.2,2.0.1,v2.4.2,'Runnable(title, fn) .run(fn) when async when an exception is thrown should not throw its own exception if passed a non-object'
Vv2.4.2,2.0.1,v2.4.2,'Runnable(title, fn) .run(fn) when async when an exception is thrown and is allowed to remain uncaught throws an error when it is allowed'
Vv2.4.3,2.0.0,v2.4.3,'Runner .hook(name, fn) should execute hooks after failed test if suite bail is true'
Vv2.4.3,2.0.0,v2.4.3,'Runner .fail(test, err) should emit a helpful message when failed with an Object'
Vv2.4.3,2.0.0,v2.4.3,'Runner .fail(test, err) should emit a helpful message when failed with an Array'
Vv2.4.3,2.0.0,v2.4.3,'Runner .failHook(hook, err) should augment hook title with current test title'
Vv2.4.3,2.0.0,v2.4.3,'Runner allowUncaught should allow unhandled errors to propagate through'
Vv2.4.3,2.0.0,v2.4.3,'Runner stackTrace shortStackTrace should prettify the stack-trace'
Vv2.4.3,2.0.0,v2.4.3,'Runnable(title, fn) #retries(n) should set the number of retries'
Vv2.4.3,2.0.0,v2.4.3,'Runnable(title, fn) .run(fn) when sync when an exception is thrown and is allowed to remain uncaught throws an error when it is allowed'
Vv2.4.3,2.0.0,v2.4.3,'Runnable(title, fn) .run(fn) when async when an exception is thrown should not throw its own exception if passed a non-object'
Vv2.4.3,2.0.0,v2.4.3,'Runnable(title, fn) .run(fn) when async when an exception is thrown and is allowed to remain uncaught throws an error when it is allowed'
Vv2.4.3,2.0.1,v2.4.3,'Runner .hook(name, fn) should execute hooks after failed test if suite bail is true'
Vv2.4.3,2.0.1,v2.4.3,'Runner .fail(test, err) should emit a helpful message when failed with an Object'
Vv2.4.3,2.0.1,v2.4.3,'Runner .fail(test, err) should emit a helpful message when failed with an Array'
Vv2.4.3,2.0.1,v2.4.3,'Runner .failHook(hook, err) should augment hook title with current test title'
Vv2.4.3,2.0.1,v2.4.3,'Runner allowUncaught should allow unhandled errors to propagate through'
Vv2.4.3,2.0.1,v2.4.3,'Runner stackTrace shortStackTrace should prettify the stack-trace'
Vv2.4.3,2.0.1,v2.4.3,'Runnable(title, fn) #retries(n) should set the number of retries'
Vv2.4.3,2.0.1,v2.4.3,'Runnable(title, fn) .run(fn) when sync when an exception is thrown and is allowed to remain uncaught throws an error when it is allowed'
Vv2.4.3,2.0.1,v2.4.3,'Runnable(title, fn) .run(fn) when async when an exception is thrown should not throw its own exception if passed a non-object'
Vv2.4.3,2.0.1,v2.4.3,'Runnable(title, fn) .run(fn) when async when an exception is thrown and is allowed to remain uncaught throws an error when it is allowed'
Vv2.4.4,2.0.0,v2.4.4,'Runner .hook(name, fn) should execute hooks after failed test if suite bail is true'
Vv2.4.4,2.0.0,v2.4.4,'Runner .fail(test, err) should emit a helpful message when failed with an Object'
Vv2.4.4,2.0.0,v2.4.4,'Runner .fail(test, err) should emit a helpful message when failed with an Array'
Vv2.4.4,2.0.0,v2.4.4,'Runner .failHook(hook, err) should augment hook title with current test title'
Vv2.4.4,2.0.0,v2.4.4,'Runner allowUncaught should allow unhandled errors to propagate through'
Vv2.4.4,2.0.0,v2.4.4,'Runner stackTrace shortStackTrace should prettify the stack-trace'
Vv2.4.4,2.0.0,v2.4.4,'Runnable(title, fn) #retries(n) should set the number of retries'
Vv2.4.4,2.0.0,v2.4.4,'Runnable(title, fn) .run(fn) when sync when an exception is thrown and is allowed to remain uncaught throws an error when it is allowed'
Vv2.4.4,2.0.0,v2.4.4,'Runnable(title, fn) .run(fn) when async when an exception is thrown should not throw its own exception if passed a non-object'
Vv2.4.4,2.0.0,v2.4.4,'Runnable(title, fn) .run(fn) when async when an exception is thrown and is allowed to remain uncaught throws an error when it is allowed'
Vv2.4.4,2.0.1,v2.4.4,'Runner .hook(name, fn) should execute hooks after failed test if suite bail is true'
Vv2.4.4,2.0.1,v2.4.4,'Runner .fail(test, err) should emit a helpful message when failed with an Object'
Vv2.4.4,2.0.1,v2.4.4,'Runner .fail(test, err) should emit a helpful message when failed with an Array'
Vv2.4.4,2.0.1,v2.4.4,'Runner .failHook(hook, err) should augment hook title with current test title'
Vv2.4.4,2.0.1,v2.4.4,'Runner allowUncaught should allow unhandled errors to propagate through'
Vv2.4.4,2.0.1,v2.4.4,'Runner stackTrace shortStackTrace should prettify the stack-trace'
Vv2.4.4,2.0.1,v2.4.4,'Runnable(title, fn) #retries(n) should set the number of retries'
Vv2.4.4,2.0.1,v2.4.4,'Runnable(title, fn) .run(fn) when sync when an exception is thrown and is allowed to remain uncaught throws an error when it is allowed'
Vv2.4.4,2.0.1,v2.4.4,'Runnable(title, fn) .run(fn) when async when an exception is thrown should not throw its own exception if passed a non-object'
Vv2.4.4,2.0.1,v2.4.4,'Runnable(title, fn) .run(fn) when async when an exception is thrown and is allowed to remain uncaught throws an error when it is allowed'
Vv2.4.5,2.0.0,v2.4.5,'Runner .hook(name, fn) should execute hooks after failed test if suite bail is true'
Vv2.4.5,2.0.0,v2.4.5,'Runner .fail(test, err) should emit a helpful message when failed with an Object'
Vv2.4.5,2.0.0,v2.4.5,'Runner .fail(test, err) should emit a helpful message when failed with an Array'
Vv2.4.5,2.0.0,v2.4.5,'Runner .failHook(hook, err) should augment hook title with current test title'
Vv2.4.5,2.0.0,v2.4.5,'Runner allowUncaught should allow unhandled errors to propagate through'
Vv2.4.5,2.0.0,v2.4.5,'Runner stackTrace shortStackTrace should prettify the stack-trace'
Vv2.4.5,2.0.0,v2.4.5,'Runnable(title, fn) #retries(n) should set the number of retries'
Vv2.4.5,2.0.0,v2.4.5,'Runnable(title, fn) .run(fn) when sync when an exception is thrown and is allowed to remain uncaught throws an error when it is allowed'
Vv2.4.5,2.0.0,v2.4.5,'Runnable(title, fn) .run(fn) when async when an exception is thrown should not throw its own exception if passed a non-object'
Vv2.4.5,2.0.0,v2.4.5,'Runnable(title, fn) .run(fn) when async when an exception is thrown and is allowed to remain uncaught throws an error when it is allowed'
Vv2.4.5,2.0.1,v2.4.5,'Runner .hook(name, fn) should execute hooks after failed test if suite bail is true'
Vv2.4.5,2.0.1,v2.4.5,'Runner .fail(test, err) should emit a helpful message when failed with an Object'
Vv2.4.5,2.0.1,v2.4.5,'Runner .fail(test, err) should emit a helpful message when failed with an Array'
Vv2.4.5,2.0.1,v2.4.5,'Runner .failHook(hook, err) should augment hook title with current test title'
Vv2.4.5,2.0.1,v2.4.5,'Runner allowUncaught should allow unhandled errors to propagate through'
Vv2.4.5,2.0.1,v2.4.5,'Runner stackTrace shortStackTrace should prettify the stack-trace'
Vv2.4.5,2.0.1,v2.4.5,'Runnable(title, fn) #retries(n) should set the number of retries'
Vv2.4.5,2.0.1,v2.4.5,'Runnable(title, fn) .run(fn) when sync when an exception is thrown and is allowed to remain uncaught throws an error when it is allowed'
Vv2.4.5,2.0.1,v2.4.5,'Runnable(title, fn) .run(fn) when async when an exception is thrown should not throw its own exception if passed a non-object'
Vv2.4.5,2.0.1,v2.4.5,'Runnable(title, fn) .run(fn) when async when an exception is thrown and is allowed to remain uncaught throws an error when it is allowed'
Vv2.5.0,2.0.0,v2.5.0,'Suite .addSuite() treats suite as pending if its parent is pending'
Vv2.5.0,2.0.0,v2.5.0,'Runner .hook(name, fn) should execute hooks after failed test if suite bail is true'
Vv2.5.0,2.0.0,v2.5.0,'Runner .fail(test, err) should emit a helpful message when failed with an Object'
Vv2.5.0,2.0.0,v2.5.0,'Runner .fail(test, err) should emit a helpful message when failed with an Array'
Vv2.5.0,2.0.0,v2.5.0,'Runner .failHook(hook, err) should augment hook title with current test title'
Vv2.5.0,2.0.0,v2.5.0,'Runner allowUncaught should allow unhandled errors to propagate through'
Vv2.5.0,2.0.0,v2.5.0,'Runner stackTrace shortStackTrace should prettify the stack-trace'
Vv2.5.0,2.0.0,v2.5.0,'Runnable(title, fn) #retries(n) should set the number of retries'
Vv2.5.0,2.0.0,v2.5.0,'Runnable(title, fn) .run(fn) when sync when an exception is thrown and is allowed to remain uncaught throws an error when it is allowed'
Vv2.5.0,2.0.0,v2.5.0,'Runnable(title, fn) .run(fn) when async when an exception is thrown should not throw its own exception if passed a non-object'
Vv2.5.0,2.0.0,v2.5.0,'Runnable(title, fn) .run(fn) when async when an exception is thrown and is allowed to remain uncaught throws an error when it is allowed'
Vv2.5.0,2.0.1,v2.5.0,'Suite .addSuite() treats suite as pending if its parent is pending'
Vv2.5.0,2.0.1,v2.5.0,'Runner .hook(name, fn) should execute hooks after failed test if suite bail is true'
Vv2.5.0,2.0.1,v2.5.0,'Runner .fail(test, err) should emit a helpful message when failed with an Object'
Vv2.5.0,2.0.1,v2.5.0,'Runner .fail(test, err) should emit a helpful message when failed with an Array'
Vv2.5.0,2.0.1,v2.5.0,'Runner .failHook(hook, err) should augment hook title with current test title'
Vv2.5.0,2.0.1,v2.5.0,'Runner allowUncaught should allow unhandled errors to propagate through'
Vv2.5.0,2.0.1,v2.5.0,'Runner stackTrace shortStackTrace should prettify the stack-trace'
Vv2.5.0,2.0.1,v2.5.0,'Runnable(title, fn) #retries(n) should set the number of retries'
Vv2.5.0,2.0.1,v2.5.0,'Runnable(title, fn) .run(fn) when sync when an exception is thrown and is allowed to remain uncaught throws an error when it is allowed'
Vv2.5.0,2.0.1,v2.5.0,'Runnable(title, fn) .run(fn) when async when an exception is thrown should not throw its own exception if passed a non-object'
Vv2.5.0,2.0.1,v2.5.0,'Runnable(title, fn) .run(fn) when async when an exception is thrown and is allowed to remain uncaught throws an error when it is allowed'
Vv2.5.1,2.0.0,v2.5.1,'Suite .addSuite() treats suite as pending if its parent is pending'
Vv2.5.1,2.0.0,v2.5.1,'Runner .hook(name, fn) should execute hooks after failed test if suite bail is true'
Vv2.5.1,2.0.0,v2.5.1,'Runner .fail(test, err) should emit a helpful message when failed with an Object'
Vv2.5.1,2.0.0,v2.5.1,'Runner .fail(test, err) should emit a helpful message when failed with an Array'
Vv2.5.1,2.0.0,v2.5.1,'Runner .failHook(hook, err) should augment hook title with current test title'
Vv2.5.1,2.0.0,v2.5.1,'Runner allowUncaught should allow unhandled errors to propagate through'
Vv2.5.1,2.0.0,v2.5.1,'Runner stackTrace shortStackTrace should prettify the stack-trace'
Vv2.5.1,2.0.0,v2.5.1,'Runnable(title, fn) #retries(n) should set the number of retries'
Vv2.5.1,2.0.0,v2.5.1,'Runnable(title, fn) .run(fn) when sync when an exception is thrown and is allowed to remain uncaught throws an error when it is allowed'
Vv2.5.1,2.0.0,v2.5.1,'Runnable(title, fn) .run(fn) when async when an exception is thrown should not throw its own exception if passed a non-object'
Vv2.5.1,2.0.0,v2.5.1,'Runnable(title, fn) .run(fn) when async when an exception is thrown and is allowed to remain uncaught throws an error when it is allowed'
Vv2.5.1,2.0.1,v2.5.1,'Suite .addSuite() treats suite as pending if its parent is pending'
Vv2.5.1,2.0.1,v2.5.1,'Runner .hook(name, fn) should execute hooks after failed test if suite bail is true'
Vv2.5.1,2.0.1,v2.5.1,'Runner .fail(test, err) should emit a helpful message when failed with an Object'
Vv2.5.1,2.0.1,v2.5.1,'Runner .fail(test, err) should emit a helpful message when failed with an Array'
Vv2.5.1,2.0.1,v2.5.1,'Runner .failHook(hook, err) should augment hook title with current test title'
Vv2.5.1,2.0.1,v2.5.1,'Runner allowUncaught should allow unhandled errors to propagate through'
Vv2.5.1,2.0.1,v2.5.1,'Runner stackTrace shortStackTrace should prettify the stack-trace'
Vv2.5.1,2.0.1,v2.5.1,'Runnable(title, fn) #retries(n) should set the number of retries'
Vv2.5.1,2.0.1,v2.5.1,'Runnable(title, fn) .run(fn) when sync when an exception is thrown and is allowed to remain uncaught throws an error when it is allowed'
Vv2.5.1,2.0.1,v2.5.1,'Runnable(title, fn) .run(fn) when async when an exception is thrown should not throw its own exception if passed a non-object'
Vv2.5.1,2.0.1,v2.5.1,'Runnable(title, fn) .run(fn) when async when an exception is thrown and is allowed to remain uncaught throws an error when it is allowed'
Vv2.5.2,2.0.0,v2.5.2,'Suite .addSuite() treats suite as pending if its parent is pending'
Vv2.5.2,2.0.0,v2.5.2,'Runner .hook(name, fn) should execute hooks after failed test if suite bail is true'
Vv2.5.2,2.0.0,v2.5.2,'Runner .fail(test, err) should emit a helpful message when failed with an Object'
Vv2.5.2,2.0.0,v2.5.2,'Runner .fail(test, err) should emit a helpful message when failed with an Array'
Vv2.5.2,2.0.0,v2.5.2,'Runner .failHook(hook, err) should augment hook title with current test title'
Vv2.5.2,2.0.0,v2.5.2,'Runner allowUncaught should allow unhandled errors to propagate through'
Vv2.5.2,2.0.0,v2.5.2,'Runner stackTrace shortStackTrace should prettify the stack-trace'
Vv2.5.2,2.0.0,v2.5.2,'Runnable(title, fn) #retries(n) should set the number of retries'
Vv2.5.2,2.0.0,v2.5.2,'Runnable(title, fn) .run(fn) when sync when an exception is thrown and is allowed to remain uncaught throws an error when it is allowed'
Vv2.5.2,2.0.0,v2.5.2,'Runnable(title, fn) .run(fn) when async when an exception is thrown should not throw its own exception if passed a non-object'
Vv2.5.2,2.0.0,v2.5.2,'Runnable(title, fn) .run(fn) when async when an exception is thrown and is allowed to remain uncaught throws an error when it is allowed'
Vv2.5.2,2.0.1,v2.5.2,'Suite .addSuite() treats suite as pending if its parent is pending'
Vv2.5.2,2.0.1,v2.5.2,'Runner .hook(name, fn) should execute hooks after failed test if suite bail is true'
Vv2.5.2,2.0.1,v2.5.2,'Runner .fail(test, err) should emit a helpful message when failed with an Object'
Vv2.5.2,2.0.1,v2.5.2,'Runner .fail(test, err) should emit a helpful message when failed with an Array'
Vv2.5.2,2.0.1,v2.5.2,'Runner .failHook(hook, err) should augment hook title with current test title'
Vv2.5.2,2.0.1,v2.5.2,'Runner allowUncaught should allow unhandled errors to propagate through'
Vv2.5.2,2.0.1,v2.5.2,'Runner stackTrace shortStackTrace should prettify the stack-trace'
Vv2.5.2,2.0.1,v2.5.2,'Runnable(title, fn) #retries(n) should set the number of retries'
Vv2.5.2,2.0.1,v2.5.2,'Runnable(title, fn) .run(fn) when sync when an exception is thrown and is allowed to remain uncaught throws an error when it is allowed'
Vv2.5.2,2.0.1,v2.5.2,'Runnable(title, fn) .run(fn) when async when an exception is thrown should not throw its own exception if passed a non-object'
Vv2.5.2,2.0.1,v2.5.2,'Runnable(title, fn) .run(fn) when async when an exception is thrown and is allowed to remain uncaught throws an error when it is allowed'
Vv2.5.3,2.0.0,v2.5.3,'Suite .addSuite() treats suite as pending if its parent is pending'
Vv2.5.3,2.0.0,v2.5.3,'Runner .hook(name, fn) should execute hooks after failed test if suite bail is true'
Vv2.5.3,2.0.0,v2.5.3,'Runner .fail(test, err) should emit a helpful message when failed with an Object'
Vv2.5.3,2.0.0,v2.5.3,'Runner .fail(test, err) should emit a helpful message when failed with an Array'
Vv2.5.3,2.0.0,v2.5.3,'Runner .failHook(hook, err) should augment hook title with current test title'
Vv2.5.3,2.0.0,v2.5.3,'Runner allowUncaught should allow unhandled errors to propagate through'
Vv2.5.3,2.0.0,v2.5.3,'Runner stackTrace shortStackTrace should prettify the stack-trace'
Vv2.5.3,2.0.0,v2.5.3,'Runnable(title, fn) #retries(n) should set the number of retries'
Vv2.5.3,2.0.0,v2.5.3,'Runnable(title, fn) .run(fn) when sync when an exception is thrown and is allowed to remain uncaught throws an error when it is allowed'
Vv2.5.3,2.0.0,v2.5.3,'Runnable(title, fn) .run(fn) when async when an exception is thrown should not throw its own exception if passed a non-object'
Vv2.5.3,2.0.0,v2.5.3,'Runnable(title, fn) .run(fn) when async when an exception is thrown and is allowed to remain uncaught throws an error when it is allowed'
Vv2.5.3,2.0.1,v2.5.3,'Suite .addSuite() treats suite as pending if its parent is pending'
Vv2.5.3,2.0.1,v2.5.3,'Runner .hook(name, fn) should execute hooks after failed test if suite bail is true'
Vv2.5.3,2.0.1,v2.5.3,'Runner .fail(test, err) should emit a helpful message when failed with an Object'
Vv2.5.3,2.0.1,v2.5.3,'Runner .fail(test, err) should emit a helpful message when failed with an Array'
Vv2.5.3,2.0.1,v2.5.3,'Runner .failHook(hook, err) should augment hook title with current test title'
Vv2.5.3,2.0.1,v2.5.3,'Runner allowUncaught should allow unhandled errors to propagate through'
Vv2.5.3,2.0.1,v2.5.3,'Runner stackTrace shortStackTrace should prettify the stack-trace'
Vv2.5.3,2.0.1,v2.5.3,'Runnable(title, fn) #retries(n) should set the number of retries'
Vv2.5.3,2.0.1,v2.5.3,'Runnable(title, fn) .run(fn) when sync when an exception is thrown and is allowed to remain uncaught throws an error when it is allowed'
Vv2.5.3,2.0.1,v2.5.3,'Runnable(title, fn) .run(fn) when async when an exception is thrown should not throw its own exception if passed a non-object'
Vv2.5.3,2.0.1,v2.5.3,'Runnable(title, fn) .run(fn) when async when an exception is thrown and is allowed to remain uncaught throws an error when it is allowed'
