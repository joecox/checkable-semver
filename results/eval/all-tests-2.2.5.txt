1..4
ok 1 Array indexOf() should return -1 when the value is not present
ok 2 Array indexOf() should return the correct index when the value is present
ok 3 Array pop() should remove and return the last value
ok 4 Array has a length property
# tests 4
# pass 4
# fail 0
1..4
ok 1 Array indexOf() should return -1 when the value is not present
ok 2 Array indexOf() should return the correct index when the value is present
ok 3 Array indexOf() should skip this test # SKIP -
ok 4 Array indexOf() should skip this suite should skip this test # SKIP -
# tests 2
# pass 2
# fail 0
1..3
ok 1 Array length
ok 2 Array indexOf()
ok 3 String length
# tests 3
# pass 3
# fail 0
1..2
ok 1 Array indexOf() should return -1 when the value is not present
ok 2 Array indexOf() should return the correct index when the value is present
# tests 2
# pass 2
# fail 0
1..229
ok 1  should work
ok 2 Context nested should work
ok 3 Context Siblings sequestered sibling should work
ok 4 Context Siblings sibling verifiction should not have value set within a sibling describe
ok 5 Context Siblings sibling verifiction should allow test siblings to modify shared context
ok 6 Context Siblings sibling verifiction should have reset this.calls before describe
ok 7 timeout() should return the timeout
ok 8 durations when slow should highlight in red
ok 9 durations when reasonable should highlight in yellow
ok 10 durations when fast should highlight in green
ok 11 fs.readFile() when the file exists should succeed
ok 12 fs.readFile() when the file does not exist should fail
ok 13 global leaks should cause tests to fail
ok 14 global leaks should pass when accepted
ok 15 global leaks should pass with wildcard
ok 16 global leaks should pass when prefixed "mocha-"
ok 17 http should provide an example
ok 18 using imported describe using imported it
ok 19 root should be a valid suite
ok 20 a test that throws undefined should not pass if throwing sync and test is sync
ok 21 a test that throws undefined should not pass if throwing sync and test is async
ok 22 a test that throws undefined should not pass if throwing async and test is async
ok 23 a test that throws null should not pass if throwing sync and test is sync
ok 24 a test that throws null should not pass if throwing sync and test is async
ok 25 a test that throws null should not pass if throwing async and test is async
ok 26 timeouts should error on timeout
ok 27 timeouts should allow overriding per-test
ok 28 timeouts disabling should allow overriding per-test
ok 29 timeouts disabling should work with timeout(0)
ok 30 timeouts disabling using beforeEach should work with timeout(0)
ok 31 timeouts disabling using before should work with timeout(0)
ok 32 timeouts disabling using enableTimeouts(false) should suppress timeout(4)
ok 33 timeouts disabling suite-level should work with timeout(0)
ok 34 timeouts disabling suite-level nested suite should work with timeout(0)
ok 35 lib/utils clean should format a single line test function
ok 36 lib/utils clean should format a multi line test indented with spaces
ok 37 lib/utils clean should format a multi line test indented with tabs
ok 38 lib/utils clean should format functions saved in windows style - spaces
ok 39 lib/utils clean should format functions saved in windows style - tabs
ok 40 lib/utils clean should format es6 arrow functions
ok 41 lib/utils clean should format es6 arrow functions with implicit return
ok 42 lib/utils stringify should return Buffer with .toJSON representation
ok 43 lib/utils stringify should return Date object with .toISOString() + string prefix
ok 44 lib/utils stringify should return invalid Date object with .toString() + string prefix
ok 45 lib/utils stringify should canonicalize the object
ok 46 lib/utils stringify should handle circular structures in objects
ok 47 lib/utils stringify should handle circular structures in arrays
ok 48 lib/utils stringify should handle circular structures in functions
ok 49 lib/utils stringify should handle various non-undefined, non-null, non-object, non-array, non-date, and non-function values
ok 50 lib/utils stringify should handle arrays
ok 51 lib/utils stringify should handle functions
ok 52 lib/utils stringify should handle empty objects
ok 53 lib/utils stringify should handle empty arrays
ok 54 lib/utils stringify should handle non-empty arrays
ok 55 lib/utils stringify should handle empty functions (with no properties)
ok 56 lib/utils stringify should handle functions w/ properties
ok 57 lib/utils stringify should handle undefined values
ok 58 lib/utils stringify should recurse
ok 59 lib/utils stringify might get confusing
ok 60 lib/utils stringify should not freak out if it sees a primitive twice
ok 61 lib/utils stringify should stringify dates
ok 62 lib/utils stringify should handle object without an Object prototype
ok 63 lib/utils stringify Number should show the handle -0 situations
ok 64 lib/utils stringify Number should work well with `NaN` and `Infinity`
ok 65 lib/utils stringify Number floats and ints
ok 66 lib/utils stringify canonicalize example should represent the actual full result
ok 67 lib/utils type should recognize various types
ok 68 lib/utils lookupFiles should not choke on symlinks
ok 69 Mocha should not output colors to pipe
ok 70 Mocha "grep" option should add a RegExp to the mocha.options object
ok 71 Mocha "grep" option should convert string to a RegExp
ok 72 Mocha "fgrep" option should escape and convert string to a RegExp
ok 73 Mocha .grep() should add a RegExp to the mocha.options object
ok 74 Mocha .grep() should convert grep string to a RegExp
ok 75 Mocha .grep() should return it's parent Mocha object for chainability
ok 76 Mocha "invert" option should add a Boolean to the mocha.options object
ok 77 async hooks one
ok 78 async hooks two
ok 79 async hooks three
ok 80 hook error handling before hook error spec 1 should not be called because of error in before hook
ok 81 hook error handling before hook error spec 1 spec 1 nested should not be called, because hook error was in a parent suite
ok 82 hook error handling before hook error spec 2 should be called, because hook error was in a sibling suite
ok 83 hook error handling before each hook error spec 1 should not be called because of error in before each hook
ok 84 hook error handling before each hook error spec 1 spec 1 nested should not be called, because hook error was in a parent suite
ok 85 hook error handling before each hook error spec 2 should be called, because hook error was in a sibling suite
ok 86 hook error handling after hook error spec 1 should be called because error is in after hook
ok 87 hook error handling after hook error spec 1 spec 1 nested should be called, because hook error will happen after parent suite
ok 88 hook error handling after hook error spec 2 should be called, because hook error was in a sibling suite
ok 89 hook error handling after each hook error spec 1 should be called because error is in after each hook, and this is the first test
ok 90 hook error handling after each hook error spec 1 should not be called because error is in after each hook, and this is the second test
ok 91 hook error handling after each hook error spec 1 spec 1 nested should not be called, because hook error has already happened in parent suite
ok 92 hook error handling after each hook error spec 2 should be called, because hook error was in a sibling suite
ok 93 hook error handling multiple hook errors 1 1.1 1.1 test 1
ok 94 hook error handling multiple hook errors 1 1.1 1.1 test 2
ok 95 hook error handling multiple hook errors 1 1.2 1.2 test 1
ok 96 hook error handling multiple hook errors 1 1.2 1.2 test 2
ok 97 hook error handling multiple hook errors 2 2.1 2.1 test 1
ok 98 hook error handling multiple hook errors 2 2.1 2.1 test 2
ok 99 hook error handling multiple hook errors 2 2.2 2.2 test 1
ok 100 hook error handling multiple hook errors 2 2.2 2.2 test 2
ok 101 serial hooks one
ok 102 serial hooks two
ok 103 serial hooks three
ok 104 serial nested foo
ok 105 serial nested bar
ok 106 serial nested hooks one
ok 107 serial nested hooks two
ok 108 http server GET / should respond with "hello"
ok 109 http server GET /users should respond with "tobi, loki, jane"
ok 110 http server GET /users when given Accept: application/json should respond with "["tobi","loki","jane"]"
ok 111 http requests GET / should respond with hello
ok 112 http requests GET /users should respond with users
ok 113 http requests GET /users should respond with users
ok 114 Mocha .run(fn) should not raise errors if callback was not provided
ok 115 Mocha .run(fn) should execute the callback when complete
ok 116 Mocha .run(fn) should execute the callback with the number of failures as parameter
ok 117 .ms() get a value that less than 1 second should return milliseconds representation
ok 118 .ms() seconds representation should return short format
ok 119 .ms() seconds representation should return long format
ok 120 .ms() minutess representation should return short format
ok 121 .ms() minutess representation should return long format
ok 122 .ms() hours representation should return short format
ok 123 .ms() hours representation should return long format
ok 124 .ms() days representation should return short format
ok 125 .ms() days representation should return long format
ok 126 .ms() Getting string value should return the milliseconds representation(Number)
ok 127 Runnable(title, fn) timeout(ms) should set the timeout
ok 128 Runnable(title, fn) enableTimeouts(enabled) should set enabled
ok 129 Runnable(title, fn) slow(ms) should set the slow threshold
ok 130 Runnable(title, fn) .title should be present
ok 131 Runnable(title, fn) when arity >= 1 should be .async
ok 132 Runnable(title, fn) when arity == 0 should be .sync
ok 133 Runnable(title, fn) globals should allow for whitelisting globals
ok 134 Runnable(title, fn) .run(fn) when .pending should not invoke the callback
ok 135 Runnable(title, fn) .run(fn) when sync without error should invoke the callback
ok 136 Runnable(title, fn) .run(fn) when sync when an exception is thrown should invoke the callback
ok 137 Runnable(title, fn) .run(fn) when timeouts are disabled should not error with timeout
ok 138 Runnable(title, fn) .run(fn) when async should allow updating the timeout
ok 139 Runnable(title, fn) .run(fn) when async should allow a timeout of 0 # SKIP -
ok 140 Runnable(title, fn) .run(fn) when async without error should invoke the callback
ok 141 Runnable(title, fn) .run(fn) when async when the callback is invoked several times without an error should emit a single "error" event
ok 142 Runnable(title, fn) .run(fn) when async when the callback is invoked several times with an error should emit a single "error" event
ok 143 Runnable(title, fn) .run(fn) when async when an exception is thrown should invoke the callback
ok 144 Runnable(title, fn) .run(fn) when async when an exception is thrown should not throw its own exception if passed a non-object
ok 145 Runnable(title, fn) .run(fn) when async when an error is passed should invoke the callback
ok 146 Runnable(title, fn) .run(fn) when async when done() is invoked with a non-Error object should invoke the callback
ok 147 Runnable(title, fn) .run(fn) when async when done() is invoked with a string should invoke the callback
ok 148 Runnable(title, fn) .run(fn) when fn returns a promise when the promise is fulfilled with no value should invoke the callback
ok 149 Runnable(title, fn) .run(fn) when fn returns a promise when the promise is fulfilled with a value should invoke the callback
ok 150 Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback
ok 151 Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected without a reason should invoke the callback
ok 152 Runnable(title, fn) .run(fn) when fn returns a promise when the promise takes too long to settle should give the timeout error
ok 153 Runnable(title, fn) .run(fn) when fn returns a non-promise should invoke the callback
ok 154 Runner .grep() should update the runner.total with number of matched tests
ok 155 Runner .grep() should update the runner.total with number of matched tests when inverted
ok 156 Runner .grepTotal() should return the total number of matched tests
ok 157 Runner .grepTotal() should return the total number of matched tests when inverted
ok 158 Runner .globalProps() should include common non enumerable globals
ok 159 Runner .globals() should default to the known globals
ok 160 Runner .globals() should white-list globals
ok 161 Runner .checkGlobals(test) should allow variables that match a wildcard
ok 162 Runner .checkGlobals(test) should emit "fail" when a new global is introduced
ok 163 Runner .checkGlobals(test) should emit "fail" when a single new disallowed global is introduced after a single extra global is allowed
ok 164 Runner .checkGlobals(test) should not fail when a new common global is introduced
ok 165 Runner .checkGlobals(test) should pluralize the error message when several are introduced
ok 166 Runner .checkGlobals(test) should respect per test whitelisted globals
ok 167 Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks
ok 168 Runner .hook(name, fn) should execute hooks after failed test if suite bail is true
ok 169 Runner .fail(test, err) should increment .failures
ok 170 Runner .fail(test, err) should set test.state to "failed"
ok 171 Runner .fail(test, err) should emit "fail"
ok 172 Runner .fail(test, err) should emit a helpful message when failed with a string
ok 173 Runner .fail(test, err) should emit a the error when failed with an Error
ok 174 Runner .fail(test, err) should emit a helpful message when failed with an Object
ok 175 Runner .fail(test, err) should emit a helpful message when failed with an Array
ok 176 Runner .failHook(hook, err) should increment .failures
ok 177 Runner .failHook(hook, err) should emit "fail"
ok 178 Runner .failHook(hook, err) should emit "end" if suite bail is true
ok 179 Runner .failHook(hook, err) should not emit "end" if suite bail is not true
ok 180 Runner stackTrace shortStackTrace should prettify the stack-trace
ok 181 Runner stackTrace longStackTrace should display the full stack-trace
ok 182 Suite .clone() should copy the title
ok 183 Suite .clone() should copy the timeout value
ok 184 Suite .clone() should copy the slow value
ok 185 Suite .clone() should copy the bail value
ok 186 Suite .clone() should not copy the values from the suites array
ok 187 Suite .clone() should not copy the values from the tests array
ok 188 Suite .clone() should not copy the values from the _beforeEach array
ok 189 Suite .clone() should not copy the values from the _beforeAll array
ok 190 Suite .clone() should not copy the values from the _afterEach array
ok 191 Suite .clone() should not copy the values from the _afterAll array
ok 192 Suite .timeout() when no argument is passed should return the timeout value
ok 193 Suite .timeout() when argument is passed should return the Suite object
ok 194 Suite .slow() when given a string should parse it
ok 195 Suite .slow() when no argument is passed should return the slow value
ok 196 Suite .slow() when argument is passed should return the Suite object
ok 197 Suite .bail() when no argument is passed should return the bail value
ok 198 Suite .bail() when argument is passed should return the Suite object
ok 199 Suite .beforeAll() wraps the passed in function in a Hook adds it to _beforeAll
ok 200 Suite .beforeAll() wraps the passed in function in a Hook appends title to hook
ok 201 Suite .afterAll() wraps the passed in function in a Hook adds it to _afterAll
ok 202 Suite .afterAll() wraps the passed in function in a Hook appends title to hook
ok 203 Suite .beforeEach() wraps the passed in function in a Hook adds it to _beforeEach
ok 204 Suite .beforeEach() wraps the passed in function in a Hook appends title to hook
ok 205 Suite .afterEach() wraps the passed in function in a Hook adds it to _afterEach
ok 206 Suite .afterEach() wraps the passed in function in a Hook appends title to hook
ok 207 Suite .addSuite() sets the parent on the added Suite
ok 208 Suite .addSuite() copies the timeout value
ok 209 Suite .addSuite() copies the slow value
ok 210 Suite .addSuite() adds the suite to the suites collection
ok 211 Suite .fullTitle() when there is no parent returns the suite title
ok 212 Suite .fullTitle() when there is a parent returns the combination of parent's and suite's title
ok 213 Suite .total() when there are no nested suites or tests should return 0
ok 214 Suite .total() when there are several tests in the suite should return the number
ok 215 Suite .eachTest(fn) when there are no nested suites or tests should return 0
ok 216 Suite .eachTest(fn) when there are several tests in the suite should return the number
ok 217 Suite .eachTest(fn) when there are several levels of nested suites should return the number
ok 218 utils .clean() should remove the wrapping function declaration
ok 219 utils .clean() should handle newlines in the function declaration
ok 220 utils .clean() should remove space character indentation from the function body
ok 221 utils .clean() should remove tab character indentation from the function body
ok 222 utils .isBuffer() should test if object is a Buffer
ok 223 utils .map() should behave same as Array.prototype.map
ok 224 utils .map() should call the callback with 3 arguments[currentValue, index, array]
ok 225 utils .map() should apply with the given scope
ok 226 utils .parseQuery() should get queryString and return key-value object
ok 227 utils .stackTraceFilter() on node should get a stack-trace as a string and prettify it
ok 228 utils .stackTraceFilter() on node should ignore bower and components files
ok 229 utils .stackTraceFilter() on browser should strip out bower and components too
# tests 228
# pass 228
# fail 0
1..30
ok 1 diffs should display a diff for small strings
ok 2 diffs should display a diff of canonicalized objects
ok 3 diffs should display a diff for medium strings
ok 4 diffs should display a diff for entire object dumps
ok 5 diffs should display a diff for multi-line strings
ok 6 diffs should display a diff for entire object dumps
ok 7 diffs should display a full-comparison with escaped special characters
ok 8 diffs should display a word diff for large strings
ok 9 diffs should work with objects
ok 10 diffs should show value diffs and not be affected by commas
ok 11 diffs should display diff by data and not like an objects
ok 12 hooks are ran in correct order
ok 13 multiple calls to done() results in failures
ok 14 multiple calls to done() throws a descriptive error
ok 15 options --async-only should fail synchronous specs
ok 16 options --async-only should allow asynchronous specs
ok 17 options --bail should stop after the first error
ok 18 options --sort should sort tests in alphabetical order
ok 19 options --delay should run the generated test suite
ok 20 options --grep runs specs matching a string
ok 21 options --grep runs specs matching a RegExp
ok 22 options --grep with --invert runs specs that do not match the pattern
ok 23 pending pending specs should be created by omitting a function
ok 24 pending synchronous skip() in spec should immediately skip the spec and run all others
ok 25 pending synchronous skip() in before should skip all suite specs
ok 26 pending synchronous skip() in beforeEach should skip all suite specs
ok 27 regressions issue-1327: should run all 3 specs exactly once
ok 28 this.timeout() is respected by sync and async suites
ok 29 uncaught exceptions handles uncaught exceptions from hooks
ok 30 uncaught exceptions handles uncaught exceptions from async specs
# tests 30
# pass 30
# fail 0


  Suite
    .clone()
      ✓ should copy the title
      ✓ should copy the timeout value
      ✓ should copy the slow value
      ✓ should copy the bail value
      ✓ should not copy the values from the suites array
      ✓ should not copy the values from the tests array
      ✓ should not copy the values from the _beforeEach array
      ✓ should not copy the values from the _beforeAll array
      ✓ should not copy the values from the _afterEach array
      ✓ should not copy the values from the _afterAll array
    .timeout()
      when no argument is passed
        ✓ should return the timeout value
      when argument is passed
        ✓ should return the Suite object
    .slow()
      when given a string
        ✓ should parse it
      when no argument is passed
        ✓ should return the slow value
      when argument is passed
        ✓ should return the Suite object
    .bail()
      when no argument is passed
        ✓ should return the bail value
      when argument is passed
        ✓ should return the Suite object
    .beforeAll()
      wraps the passed in function in a Hook
        ✓ adds it to _beforeAll
        ✓ appends title to hook
    .afterAll()
      wraps the passed in function in a Hook
        ✓ adds it to _afterAll
        ✓ appends title to hook
    .beforeEach()
      wraps the passed in function in a Hook
        ✓ adds it to _beforeEach
        ✓ appends title to hook
    .afterEach()
      wraps the passed in function in a Hook
        ✓ adds it to _afterEach
        ✓ appends title to hook
    .addSuite()
      ✓ sets the parent on the added Suite
      ✓ copies the timeout value
      ✓ copies the slow value
      ✓ adds the suite to the suites collection
    .fullTitle()
      when there is no parent
        ✓ returns the suite title
      when there is a parent
        ✓ returns the combination of parent's and suite's title
    .total()
      when there are no nested suites or tests
        ✓ should return 0
      when there are several tests in the suite
        ✓ should return the number
    .eachTest(fn)
      when there are no nested suites or tests
        ✓ should return 0
      when there are several tests in the suite
        ✓ should return the number
      when there are several levels of nested suites
        ✓ should return the number

  Runner
    .grep()
      ✓ should update the runner.total with number of matched tests
      ✓ should update the runner.total with number of matched tests when inverted
    .grepTotal()
      ✓ should return the total number of matched tests
      ✓ should return the total number of matched tests when inverted
    .globalProps()
      ✓ should include common non enumerable globals
    .globals()
      ✓ should default to the known globals
      ✓ should white-list globals
    .checkGlobals(test)
      ✓ should allow variables that match a wildcard
      ✓ should emit "fail" when a new global is introduced
      ✓ should emit "fail" when a single new disallowed global is introduced after a single extra global is allowed
      ✓ should not fail when a new common global is introduced
      ✓ should pluralize the error message when several are introduced
      ✓ should respect per test whitelisted globals
      ✓ should respect per test whitelisted globals but still detect other leaks
    .hook(name, fn)
      ✓ should execute hooks after failed test if suite bail is true
    .fail(test, err)
      ✓ should increment .failures
      ✓ should set test.state to "failed"
      ✓ should emit "fail"
      ✓ should emit a helpful message when failed with a string
      ✓ should emit a the error when failed with an Error
      ✓ should emit a helpful message when failed with an Object
      ✓ should emit a helpful message when failed with an Array
    .failHook(hook, err)
      ✓ should increment .failures
      ✓ should emit "fail"
      ✓ should emit "end" if suite bail is true
      ✓ should not emit "end" if suite bail is not true
    stackTrace
      shortStackTrace
        ✓ should prettify the stack-trace
      longStackTrace
        ✓ should display the full stack-trace

  Runnable(title, fn)
    #timeout(ms)
      ✓ should set the timeout
    #enableTimeouts(enabled)
      ✓ should set enabled
    #slow(ms)
      ✓ should set the slow threshold
    .title
      ✓ should be present
    when arity >= 1
      ✓ should be .async
    when arity == 0
      ✓ should be .sync
    #globals
      ✓ should allow for whitelisting globals
    .run(fn)
      when .pending
        ✓ should not invoke the callback
      when sync
        without error
          ✓ should invoke the callback
        when an exception is thrown
          ✓ should invoke the callback
      when timeouts are disabled
        ✓ should not error with timeout
      when async
        ✓ should allow updating the timeout
        - should allow a timeout of 0
        without error
          ✓ should invoke the callback
        when the callback is invoked several times
          without an error
            ✓ should emit a single "error" event
          with an error
            ✓ should emit a single "error" event
        when an exception is thrown
          ✓ should invoke the callback
          ✓ should not throw its own exception if passed a non-object
        when an error is passed
          ✓ should invoke the callback
        when done() is invoked with a non-Error object
          ✓ should invoke the callback
        when done() is invoked with a string
          ✓ should invoke the callback
      when fn returns a promise
        when the promise is fulfilled with no value
          ✓ should invoke the callback
        when the promise is fulfilled with a value
          ✓ should invoke the callback
        when the promise is rejected
          ✓ should invoke the callback
        when the promise is rejected without a reason
          ✓ should invoke the callback
        when the promise takes too long to settle
          ✓ should give the timeout error
      when fn returns a non-promise
        ✓ should invoke the callback

  serial
    hooks
      ✓ one
      ✓ two
      ✓ three

  serial
    nested
      ✓ foo
      ✓ bar
      hooks
        ✓ one
        ✓ two

  async
    hooks
      ✓ one
      ✓ two
      ✓ three

  durations
    when slow
      ✓ should highlight in red (101ms)
    when reasonable
      ✓ should highlight in yellow (56ms)
    when fast
      ✓ should highlight in green

  fs.readFile()
    when the file exists
      ✓ should succeed
    when the file does not exist
      ✓ should fail

  global leaks
    ✓ should cause tests to fail
    ✓ should pass when accepted
    ✓ should pass with wildcard
    ✓ should pass when prefixed "mocha-"

  timeouts
    ✓ should error on timeout
    ✓ should allow overriding per-test (304ms)
    disabling
      ✓ should allow overriding per-test
      ✓ should work with timeout(0)
      using beforeEach
        ✓ should work with timeout(0)
      using before
        ✓ should work with timeout(0)
      using enableTimeouts(false)
        ✓ should suppress timeout(4) (56ms)
      suite-level
        ✓ should work with timeout(0)
        nested suite
          ✓ should work with timeout(0)


  118 passing (668ms)
  1 pending

done
1..2
ok 1 coffeescript should work
ok 2 custom compiler should work
# tests 2
# pass 2
# fail 0
Glob-test passed.
1..1
ok 1 require test should require args in order
# tests 1
# pass 1
# fail 0
1..14
{
  "stats": {
    "suites": 1,
    "tests": 1,
    "passes": 0,
    "pending": 0,
    "failures": 1,
    "start": "2016-06-04T18:00:53.743Z",
    "end": "2016-06-04T18:00:53.746Z",
    "duration": 3
  },
  "tests": [
    {
      "title": "json test 1",
      "fullTitle": "JSON suite json test 1",
      "duration": 1,
      "err": {
        "stack": "Error: oh shit\n    at Object.<anonymous> (test/reporters/json.js:23:13)\n    at Test.Runnable.run (lib/runnable.js:233:15)\n    at Runner.runTest (lib/runner.js:390:10)\n    at lib/runner.js:473:12\n    at next (lib/runner.js:315:14)\n    at lib/runner.js:325:7\n    at next (lib/runner.js:260:23)\n    at Immediate._onImmediate (lib/runner.js:292:5)",
        "message": "oh shit"
      }
    }
  ],
  "pending": [],
  "failures": [
    {
      "title": "json test 1",
      "fullTitle": "JSON suite json test 1",
      "duration": 1,
      "err": {
        "stack": "Error: oh shit\n    at Object.<anonymous> (test/reporters/json.js:23:13)\n    at Test.Runnable.run (lib/runnable.js:233:15)\n    at Runner.runTest (lib/runner.js:390:10)\n    at lib/runner.js:473:12\n    at next (lib/runner.js:315:14)\n    at lib/runner.js:325:7\n    at next (lib/runner.js:260:23)\n    at Immediate._onImmediate (lib/runner.js:292:5)",
        "message": "oh shit"
      }
    }
  ],
  "passes": []
}ok 9 json reporter should have 1 test failure
{
  "stats": {
    "suites": 1,
    "tests": 1,
    "passes": 0,
    "pending": 1,
    "failures": 0,
    "start": "2016-06-04T18:00:53.750Z",
    "end": "2016-06-04T18:00:53.750Z",
    "duration": 0
  },
  "tests": [
    {
      "title": "json test 1",
      "fullTitle": "JSON suite json test 1",
      "err": {}
    }
  ],
  "pending": [
    {
      "title": "json test 1",
      "fullTitle": "JSON suite json test 1",
      "err": {}
    }
  ],
  "failures": [],
  "passes": []
}ok 10 json reporter should have 1 test pending
ok 11 nyan face nyan face:(x .x) when "failures" at least one
ok 12 nyan face expected nyan face:(x .x) when "peinding" at least one and no failing
ok 13 nyan face expected nyan face:(^ .^) when "passing" only
ok 14 nyan face nyan face:(- .-) when otherwise
# tests 14
# pass 14
# fail 0
1..1
ok 1 should only run .only test in this tdd suite should run this test
# tests 1
# pass 1
# fail 0
1..1
ok 1 should only run .only test in this bdd suite should run this test
# tests 1
# pass 1
# fail 0
1..1
ok 1 should only run .only test in this qunit suite should run this test
# tests 1
# pass 1
# fail 0
