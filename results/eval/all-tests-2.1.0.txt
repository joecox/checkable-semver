1..4
ok 1 Array indexOf() should return -1 when the value is not present
ok 2 Array indexOf() should return the correct index when the value is present
ok 3 Array pop() should remove and return the last value
ok 4 Array has a length property
# tests 4
# pass 4
# fail 0
1..4
ok 1 Array indexOf() should return -1 when the value is not present
ok 2 Array indexOf() should return the correct index when the value is present
ok 3 Array indexOf() should skip this test # SKIP -
ok 4 Array indexOf() should skip this suite should skip this test # SKIP -
# tests 2
# pass 2
# fail 0
1..3
ok 1 Array length
ok 2 Array indexOf()
ok 3 String length
# tests 3
# pass 3
# fail 0
1..2
ok 1 Array indexOf() should return -1 when the value is not present
ok 2 Array indexOf() should return the correct index when the value is present
# tests 2
# pass 2
# fail 0
1..208
ok 1  should work
ok 2 Context nested should work
ok 3 Context Siblings sequestered sibling should work
ok 4 Context Siblings sibling verifiction should not have value set within a sibling describe
ok 5 Context Siblings sibling verifiction should allow test siblings to modify shared context
ok 6 Context Siblings sibling verifiction should have reset this.calls before describe
ok 7 timeout() should return the timeout
ok 8 diffs should display a diff for small strings
ok 9 diffs should display a diff of canonicalized objects
ok 10 diffs should display a diff for medium strings
ok 11 diffs should display a diff for entire object dumps
ok 12 diffs should display a diff for multi-line strings
ok 13 diffs should display a diff for entire object dumps
ok 14 diffs should display a full-comparison with escaped special characters
ok 15 diffs should display a word diff for large strings
ok 16 diffs should work with objects
ok 17 diffs should show value diffs and not be affected by commas
ok 18 diffs should display diff by data and not like an objects
ok 19 durations when slow should highlight in red
ok 20 durations when reasonable should highlight in yellow
ok 21 durations when fast should highlight in green
ok 22 fs.readFile() when the file exists should succeed
ok 23 fs.readFile() when the file does not exist should fail
ok 24 global leaks should cause tests to fail
ok 25 global leaks should pass when accepted
ok 26 global leaks should pass with wildcard
ok 27 global leaks should pass when prefixed "mocha-"
ok 28 http should provide an example
ok 29 multiple calls to done() should fail in a test-case
ok 30 multiple calls to done() should produce a reasonable trace
ok 31 pending should be allowed # SKIP -
ok 32 using imported describe using imported it
ok 33 root should be a valid suite
ok 34 a test that throws undefined should not pass if throwing sync and test is sync
ok 35 a test that throws undefined should not pass if throwing sync and test is async
ok 36 a test that throws undefined should not pass if throwing async and test is async
ok 37 a test that throws null should not pass if throwing sync and test is sync
ok 38 a test that throws null should not pass if throwing sync and test is async
ok 39 a test that throws null should not pass if throwing async and test is async
ok 40 timeouts should error on timeout
ok 41 timeouts should allow overriding per-test
ok 42 timeouts disabling should allow overriding per-test
ok 43 timeouts disabling should work with timeout(0)
ok 44 timeouts disabling using beforeEach should work with timeout(0)
ok 45 timeouts disabling using before should work with timeout(0)
ok 46 timeouts disabling using enableTimeouts(false) should suppress timeout(4)
ok 47 timeouts disabling suite-level should work with timeout(0)
ok 48 timeouts disabling suite-level nested suite should work with timeout(0)
ok 49 uncaught should report properly
ok 50 lib/utils clean should format a single line test function
ok 51 lib/utils clean should format a multi line test indented with spaces
ok 52 lib/utils clean should format a multi line test indented with tabs
ok 53 lib/utils clean should format functions saved in windows style - spaces
ok 54 lib/utils clean should format functions saved in windows style - tabs
ok 55 lib/utils clean should format es6 arrow functions
ok 56 lib/utils clean should format es6 arrow functions with implicit return
ok 57 lib/utils stringify should canonicalize the object
ok 58 lib/utils stringify should handle circular structures in objects
ok 59 lib/utils stringify should handle circular structures in arrays
ok 60 lib/utils stringify should handle circular structures in functions
ok 61 lib/utils stringify should handle various non-undefined, non-null, non-object, non-array, non-date, and non-function values
ok 62 lib/utils stringify should handle arrays
ok 63 lib/utils stringify should handle functions
ok 64 lib/utils stringify should handle empty objects
ok 65 lib/utils stringify should handle empty arrays
ok 66 lib/utils stringify should handle non-empty arrays
ok 67 lib/utils stringify should handle empty functions (with no properties)
ok 68 lib/utils stringify should handle functions w/ properties
ok 69 lib/utils stringify should handle undefined values
ok 70 lib/utils stringify should recurse
ok 71 lib/utils stringify might get confusing
ok 72 lib/utils stringify should not freak out if it sees a primitive twice
ok 73 lib/utils stringify should stringify dates
ok 74 lib/utils type should recognize various types
ok 75 lib/utils lookupFiles should not choke on symlinks
ok 76 Mocha should not output colors to pipe
ok 77 Mocha "grep" option should add a RegExp to the mocha.options object
ok 78 Mocha "grep" option should convert grep string to a RegExp
ok 79 Mocha .grep() should add a RegExp to the mocha.options object
ok 80 Mocha .grep() should convert grep string to a RegExp
ok 81 Mocha .grep() should return it's parent Mocha object for chainability
ok 82 Mocha "invert" option should add a Boolean to the mocha.options object
ok 83 async hooks one
ok 84 async hooks two
ok 85 async hooks three
ok 86 hook error handling before hook error spec 1 should not be called because of error in before hook
ok 87 hook error handling before hook error spec 1 spec 1 nested should not be called, because hook error was in a parent suite
ok 88 hook error handling before hook error spec 2 should be called, because hook error was in a sibling suite
ok 89 hook error handling before each hook error spec 1 should not be called because of error in before each hook
ok 90 hook error handling before each hook error spec 1 spec 1 nested should not be called, because hook error was in a parent suite
ok 91 hook error handling before each hook error spec 2 should be called, because hook error was in a sibling suite
ok 92 hook error handling after hook error spec 1 should be called because error is in after hook
ok 93 hook error handling after hook error spec 1 spec 1 nested should be called, because hook error will happen after parent suite
ok 94 hook error handling after hook error spec 2 should be called, because hook error was in a sibling suite
ok 95 hook error handling after each hook error spec 1 should be called because error is in after each hook, and this is the first test
ok 96 hook error handling after each hook error spec 1 should not be called because error is in after each hook, and this is the second test
ok 97 hook error handling after each hook error spec 1 spec 1 nested should not be called, because hook error has already happened in parent suite
ok 98 hook error handling after each hook error spec 2 should be called, because hook error was in a sibling suite
ok 99 hook error handling multiple hook errors 1 1.1 1.1 test 1
ok 100 hook error handling multiple hook errors 1 1.1 1.1 test 2
ok 101 hook error handling multiple hook errors 1 1.2 1.2 test 1
ok 102 hook error handling multiple hook errors 1 1.2 1.2 test 2
ok 103 hook error handling multiple hook errors 2 2.1 2.1 test 1
ok 104 hook error handling multiple hook errors 2 2.1 2.1 test 2
ok 105 hook error handling multiple hook errors 2 2.2 2.2 test 1
ok 106 hook error handling multiple hook errors 2 2.2 2.2 test 2
ok 107 serial hooks one
ok 108 serial hooks two
ok 109 serial hooks three
ok 110 serial nested foo
ok 111 serial nested bar
ok 112 serial nested hooks one
ok 113 serial nested hooks two
ok 114 http server GET / should respond with "hello"
ok 115 http server GET /users should respond with "tobi, loki, jane"
ok 116 http server GET /users when given Accept: application/json should respond with "["tobi","loki","jane"]"
ok 117 http requests GET / should respond with hello
ok 118 http requests GET /users should respond with users
ok 119 http requests GET /users should respond with users
ok 120 Runnable(title, fn) timeout(ms) should set the timeout
ok 121 Runnable(title, fn) enableTimeouts(enabled) should set enabled
ok 122 Runnable(title, fn) slow(ms) should set the slow threshold
ok 123 Runnable(title, fn) .title should be present
ok 124 Runnable(title, fn) when arity >= 1 should be .async
ok 125 Runnable(title, fn) when arity == 0 should be .sync
ok 126 Runnable(title, fn) globals should allow for whitelisting globals
ok 127 Runnable(title, fn) .run(fn) when .pending should not invoke the callback
ok 128 Runnable(title, fn) .run(fn) when sync without error should invoke the callback
ok 129 Runnable(title, fn) .run(fn) when sync when an exception is thrown should invoke the callback
ok 130 Runnable(title, fn) .run(fn) when timeouts are disabled should not error with timeout
ok 131 Runnable(title, fn) .run(fn) when async should allow updating the timeout
ok 132 Runnable(title, fn) .run(fn) when async should allow a timeout of 0 # SKIP -
ok 133 Runnable(title, fn) .run(fn) when async without error should invoke the callback
ok 134 Runnable(title, fn) .run(fn) when async when the callback is invoked several times without an error should emit a single "error" event
ok 135 Runnable(title, fn) .run(fn) when async when the callback is invoked several times with an error should emit a single "error" event
ok 136 Runnable(title, fn) .run(fn) when async when an exception is thrown should invoke the callback
ok 137 Runnable(title, fn) .run(fn) when async when an exception is thrown should not throw its own exception if passed a non-object
ok 138 Runnable(title, fn) .run(fn) when async when an error is passed should invoke the callback
ok 139 Runnable(title, fn) .run(fn) when async when done() is invoked with a non-Error object should invoke the callback
ok 140 Runnable(title, fn) .run(fn) when async when done() is invoked with a string should invoke the callback
ok 141 Runnable(title, fn) .run(fn) when fn returns a promise when the promise is fulfilled with no value should invoke the callback
ok 142 Runnable(title, fn) .run(fn) when fn returns a promise when the promise is fulfilled with a value should invoke the callback
ok 143 Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected should invoke the callback
ok 144 Runnable(title, fn) .run(fn) when fn returns a promise when the promise is rejected without a reason should invoke the callback
ok 145 Runnable(title, fn) .run(fn) when fn returns a promise when the promise takes too long to settle should give the timeout error
ok 146 Runnable(title, fn) .run(fn) when fn returns a non-promise should invoke the callback
ok 147 Runner .grep() should update the runner.total with number of matched tests
ok 148 Runner .grep() should update the runner.total with number of matched tests when inverted
ok 149 Runner .grepTotal() should return the total number of matched tests
ok 150 Runner .grepTotal() should return the total number of matched tests when inverted
ok 151 Runner .globalProps() should include common non enumerable globals
ok 152 Runner .globals() should default to the known globals
ok 153 Runner .globals() should white-list globals
ok 154 Runner .checkGlobals(test) should allow variables that match a wildcard
ok 155 Runner .checkGlobals(test) should emit "fail" when a new global is introduced
ok 156 Runner .checkGlobals(test) should emit "fail" when a single new disallowed global is introduced after a single extra global is allowed
ok 157 Runner .checkGlobals(test) should not fail when a new common global is introduced
ok 158 Runner .checkGlobals(test) should pluralize the error message when several are introduced
ok 159 Runner .checkGlobals(test) should respect per test whitelisted globals
ok 160 Runner .checkGlobals(test) should respect per test whitelisted globals but still detect other leaks
ok 161 Runner .hook(name, fn) should execute hooks after failed test if suite bail is true
ok 162 Runner .fail(test, err) should increment .failures
ok 163 Runner .fail(test, err) should set test.state to "failed"
ok 164 Runner .fail(test, err) should emit "fail"
ok 165 Runner .failHook(hook, err) should increment .failures
ok 166 Runner .failHook(hook, err) should emit "fail"
ok 167 Runner .failHook(hook, err) should emit "end" if suite bail is true
ok 168 Runner .failHook(hook, err) should not emit "end" if suite bail is not true
ok 169 Suite .clone() should copy the title
ok 170 Suite .clone() should copy the timeout value
ok 171 Suite .clone() should copy the slow value
ok 172 Suite .clone() should copy the bail value
ok 173 Suite .clone() should not copy the values from the suites array
ok 174 Suite .clone() should not copy the values from the tests array
ok 175 Suite .clone() should not copy the values from the _beforeEach array
ok 176 Suite .clone() should not copy the values from the _beforeAll array
ok 177 Suite .clone() should not copy the values from the _afterEach array
ok 178 Suite .clone() should not copy the values from the _afterAll array
ok 179 Suite .timeout() when no argument is passed should return the timeout value
ok 180 Suite .timeout() when argument is passed should return the Suite object
ok 181 Suite .slow() when given a string should parse it
ok 182 Suite .slow() when no argument is passed should return the slow value
ok 183 Suite .slow() when argument is passed should return the Suite object
ok 184 Suite .bail() when no argument is passed should return the bail value
ok 185 Suite .bail() when argument is passed should return the Suite object
ok 186 Suite .beforeAll() wraps the passed in function in a Hook adds it to _beforeAll
ok 187 Suite .beforeAll() wraps the passed in function in a Hook appends title to hook
ok 188 Suite .afterAll() wraps the passed in function in a Hook adds it to _afterAll
ok 189 Suite .afterAll() wraps the passed in function in a Hook appends title to hook
ok 190 Suite .beforeEach() wraps the passed in function in a Hook adds it to _beforeEach
ok 191 Suite .beforeEach() wraps the passed in function in a Hook appends title to hook
ok 192 Suite .afterEach() wraps the passed in function in a Hook adds it to _afterEach
ok 193 Suite .afterEach() wraps the passed in function in a Hook appends title to hook
ok 194 Suite .addSuite() sets the parent on the added Suite
ok 195 Suite .addSuite() copies the timeout value
ok 196 Suite .addSuite() copies the slow value
ok 197 Suite .addSuite() adds the suite to the suites collection
ok 198 Suite .fullTitle() when there is no parent returns the suite title
ok 199 Suite .fullTitle() when there is a parent returns the combination of parent's and suite's title
ok 200 Suite .total() when there are no nested suites or tests should return 0
ok 201 Suite .total() when there are several tests in the suite should return the number
ok 202 Suite .eachTest(fn) when there are no nested suites or tests should return 0
ok 203 Suite .eachTest(fn) when there are several tests in the suite should return the number
ok 204 Suite .eachTest(fn) when there are several levels of nested suites should return the number
ok 205 utils .clean() should remove the wrapping function declaration
ok 206 utils .clean() should remove space character indentation from the function body
ok 207 utils .clean() should remove tab character indentation from the function body
ok 208 utils .isBuffer() should test if object is a Buffer
# tests 206
# pass 206
# fail 0
1..2
ok 1 grep fast should run fast
ok 2 grep fast should run fast again
# tests 2
# pass 2
# fail 0


  Suite
    .clone()
      ✓ should copy the title 
      ✓ should copy the timeout value 
      ✓ should copy the slow value 
      ✓ should copy the bail value 
      ✓ should not copy the values from the suites array 
      ✓ should not copy the values from the tests array 
      ✓ should not copy the values from the _beforeEach array 
      ✓ should not copy the values from the _beforeAll array 
      ✓ should not copy the values from the _afterEach array 
      ✓ should not copy the values from the _afterAll array 
    .timeout()
      when no argument is passed
        ✓ should return the timeout value 
      when argument is passed
        ✓ should return the Suite object 
    .slow()
      when given a string
        ✓ should parse it 
      when no argument is passed
        ✓ should return the slow value 
      when argument is passed
        ✓ should return the Suite object 
    .bail()
      when no argument is passed
        ✓ should return the bail value 
      when argument is passed
        ✓ should return the Suite object 
    .beforeAll()
      wraps the passed in function in a Hook
        ✓ adds it to _beforeAll 
        ✓ appends title to hook 
    .afterAll()
      wraps the passed in function in a Hook
        ✓ adds it to _afterAll 
        ✓ appends title to hook 
    .beforeEach()
      wraps the passed in function in a Hook
        ✓ adds it to _beforeEach 
        ✓ appends title to hook 
    .afterEach()
      wraps the passed in function in a Hook
        ✓ adds it to _afterEach 
        ✓ appends title to hook 
    .addSuite()
      ✓ sets the parent on the added Suite 
      ✓ copies the timeout value 
      ✓ copies the slow value 
      ✓ adds the suite to the suites collection 
    .fullTitle()
      when there is no parent
        ✓ returns the suite title 
      when there is a parent
        ✓ returns the combination of parent's and suite's title 
    .total()
      when there are no nested suites or tests
        ✓ should return 0 
      when there are several tests in the suite
        ✓ should return the number 
    .eachTest(fn)
      when there are no nested suites or tests
        ✓ should return 0 
      when there are several tests in the suite
        ✓ should return the number 
      when there are several levels of nested suites
        ✓ should return the number 

  Runner
    .grep()
      ✓ should update the runner.total with number of matched tests 
      ✓ should update the runner.total with number of matched tests when inverted 
    .grepTotal()
      ✓ should return the total number of matched tests 
      ✓ should return the total number of matched tests when inverted 
    .globalProps()
      ✓ should include common non enumerable globals 
    .globals()
      ✓ should default to the known globals 
      ✓ should white-list globals 
    .checkGlobals(test)
      ✓ should allow variables that match a wildcard 
      ✓ should emit "fail" when a new global is introduced 
      ✓ should emit "fail" when a single new disallowed global is introduced after a single extra global is allowed 
      ✓ should not fail when a new common global is introduced 
      ✓ should pluralize the error message when several are introduced 
      ✓ should respect per test whitelisted globals 
      ✓ should respect per test whitelisted globals but still detect other leaks 
    .hook(name, fn)
      ✓ should execute hooks after failed test if suite bail is true 
    .fail(test, err)
      ✓ should increment .failures 
      ✓ should set test.state to "failed" 
      ✓ should emit "fail" 
    .failHook(hook, err)
      ✓ should increment .failures 
      ✓ should emit "fail" 
      ✓ should emit "end" if suite bail is true 
      ✓ should not emit "end" if suite bail is not true 

  Runnable(title, fn)
    #timeout(ms)
      ✓ should set the timeout 
    #enableTimeouts(enabled)
      ✓ should set enabled 
    #slow(ms)
      ✓ should set the slow threshold 
    .title
      ✓ should be present 
    when arity >= 1
      ✓ should be .async 
    when arity == 0
      ✓ should be .sync 
    #globals
      ✓ should allow for whitelisting globals 
    .run(fn)
      when .pending
        ✓ should not invoke the callback 
      when sync
        without error
          ✓ should invoke the callback 
        when an exception is thrown
          ✓ should invoke the callback 
      when timeouts are disabled
        ✓ should not error with timeout 
      when async
        ✓ should allow updating the timeout 
        - should allow a timeout of 0
        without error
          ✓ should invoke the callback 
        when the callback is invoked several times
          without an error
            ✓ should emit a single "error" event 
          with an error
            ✓ should emit a single "error" event 
        when an exception is thrown
          ✓ should invoke the callback 
          ✓ should not throw its own exception if passed a non-object 
        when an error is passed
          ✓ should invoke the callback 
        when done() is invoked with a non-Error object
          ✓ should invoke the callback 
        when done() is invoked with a string
          ✓ should invoke the callback 
      when fn returns a promise
        when the promise is fulfilled with no value
          ✓ should invoke the callback 
        when the promise is fulfilled with a value
          ✓ should invoke the callback 
        when the promise is rejected
          ✓ should invoke the callback 
        when the promise is rejected without a reason
          ✓ should invoke the callback 
        when the promise takes too long to settle
          ✓ should give the timeout error 
      when fn returns a non-promise
        ✓ should invoke the callback 

  serial
    hooks
      ✓ one 
      ✓ two 
      ✓ three 

  serial
    nested
      ✓ foo 
      ✓ bar 
      hooks
        ✓ one 
        ✓ two 

  async
    hooks
      ✓ one 
      ✓ two 
      ✓ three 

  durations
    when slow
      ✓ should highlight in red (100ms)
    when reasonable
      ✓ should highlight in yellow (51ms)
    when fast
      ✓ should highlight in green 

  fs.readFile()
    when the file exists
      ✓ should succeed 
    when the file does not exist
      ✓ should fail 

  global leaks
    ✓ should cause tests to fail 
    ✓ should pass when accepted 
    ✓ should pass with wildcard 
    ✓ should pass when prefixed "mocha-" 

  pending
    - should be allowed

  timeouts
    ✓ should error on timeout 
    ✓ should allow overriding per-test (305ms)
    disabling
      ✓ should allow overriding per-test 
      ✓ should work with timeout(0) 
      using beforeEach
        ✓ should work with timeout(0) 
      using before
        ✓ should work with timeout(0) 
      using enableTimeouts(false)
        ✓ should suppress timeout(4) (52ms)
      suite-level
        ✓ should work with timeout(0) 
        nested suite
          ✓ should work with timeout(0) 


  112 passing (645ms)
  2 pending

done
1..2
ok 1 coffeescript should work
ok 2 custom compiler should work
# tests 2
# pass 2
# fail 0
1..2
ok 1 alpha should be executed first
ok 2 beta should be executed second
# tests 2
# pass 2
# fail 0
Glob-test passed.
1..1
ok 1 require test should require args in order
# tests 1
# pass 1
# fail 0
1..10
ok 1 Base reporter should show diffs with showDiff property set
ok 2 Base reporter should not stringify strings
ok 3 Base reporter should stringify objects
ok 4 Base reporter should not show diffs when showDiff property set
{
  "stats": {
    "suites": 1,
    "tests": 1,
    "passes": 0,
    "pending": 0,
    "failures": 1,
    "start": "2016-06-04T17:59:53.207Z",
    "end": "2016-06-04T17:59:53.210Z",
    "duration": 3
  },
  "tests": [
    {
      "title": "json test 1",
      "fullTitle": "JSON suite json test 1",
      "duration": 1,
      "err": {
        "stack": "Error: oh shit\n    at Object.<anonymous> (/Users/matt/Documents/classes/cs230/checkable-semver/mocha/test/reporters/json.js:23:13)\n    at Test.Runnable.run (/Users/matt/Documents/classes/cs230/checkable-semver/mocha/lib/runnable.js:218:15)\n    at Runner.runTest (/Users/matt/Documents/classes/cs230/checkable-semver/mocha/lib/runner.js:374:10)\n    at /Users/matt/Documents/classes/cs230/checkable-semver/mocha/lib/runner.js:452:12\n    at next (/Users/matt/Documents/classes/cs230/checkable-semver/mocha/lib/runner.js:299:14)\n    at /Users/matt/Documents/classes/cs230/checkable-semver/mocha/lib/runner.js:309:7\n    at next (/Users/matt/Documents/classes/cs230/checkable-semver/mocha/lib/runner.js:248:23)\n    at Immediate._onImmediate (/Users/matt/Documents/classes/cs230/checkable-semver/mocha/lib/runner.js:276:5)\n    at processImmediate [as _immediateCallback] (timers.js:383:17)",
        "message": "oh shit"
      }
    }
  ],
  "pending": [],
  "failures": [
    {
      "title": "json test 1",
      "fullTitle": "JSON suite json test 1",
      "duration": 1,
      "err": {
        "stack": "Error: oh shit\n    at Object.<anonymous> (/Users/matt/Documents/classes/cs230/checkable-semver/mocha/test/reporters/json.js:23:13)\n    at Test.Runnable.run (/Users/matt/Documents/classes/cs230/checkable-semver/mocha/lib/runnable.js:218:15)\n    at Runner.runTest (/Users/matt/Documents/classes/cs230/checkable-semver/mocha/lib/runner.js:374:10)\n    at /Users/matt/Documents/classes/cs230/checkable-semver/mocha/lib/runner.js:452:12\n    at next (/Users/matt/Documents/classes/cs230/checkable-semver/mocha/lib/runner.js:299:14)\n    at /Users/matt/Documents/classes/cs230/checkable-semver/mocha/lib/runner.js:309:7\n    at next (/Users/matt/Documents/classes/cs230/checkable-semver/mocha/lib/runner.js:248:23)\n    at Immediate._onImmediate (/Users/matt/Documents/classes/cs230/checkable-semver/mocha/lib/runner.js:276:5)\n    at processImmediate [as _immediateCallback] (timers.js:383:17)",
        "message": "oh shit"
      }
    }
  ],
  "passes": []
}ok 5 json reporter should have 1 test failure
{
  "stats": {
    "suites": 1,
    "tests": 1,
    "passes": 0,
    "pending": 1,
    "failures": 0,
    "start": "2016-06-04T17:59:53.215Z",
    "end": "2016-06-04T17:59:53.215Z",
    "duration": 0
  },
  "tests": [
    {
      "title": "json test 1",
      "fullTitle": "JSON suite json test 1",
      "err": {}
    }
  ],
  "pending": [
    {
      "title": "json test 1",
      "fullTitle": "JSON suite json test 1",
      "err": {}
    }
  ],
  "failures": [],
  "passes": []
}ok 6 json reporter should have 1 test pending
ok 7 nyan face nyan face:(x .x) when "failures" at least one
ok 8 nyan face expected nyan face:(x .x) when "peinding" at least one and no failing
ok 9 nyan face expected nyan face:(^ .^) when "passing" only
ok 10 nyan face nyan face:(- .-) when otherwise
# tests 10
# pass 10
# fail 0
1..1
ok 1 should only run .only test in this tdd suite should run this test
# tests 1
# pass 1
# fail 0
1..1
ok 1 should only run .only test in this bdd suite should run this test
# tests 1
# pass 1
# fail 0
1..1
ok 1 should only run .only test in this qunit suite should run this test
# tests 1
# pass 1
# fail 0
./bin/mocha \
		--reporter tap \
		test/acceptance/failing/timeout.js > /dev/null 2>&1 ; \
		failures="$?" ; \
		if [ "$failures" != '2' ] ; then \
			echo 'test-failing:' ; \
			echo "  expected 2 failing tests but saw $failures" ; \
			exit 1 ; \
		fi
1..1
ok 1 GitHub issue 1327: expected behavior of case.js should have run 3 tests
# tests 1
# pass 1
# fail 0
